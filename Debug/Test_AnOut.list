
Test_AnOut.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ef8  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  0800a1c8  0800a1c8  0000b1c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a498  0800a498  0000b498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a4a0  0800a4a0  0000b4a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a4a4  0800a4a4  0000b4a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  0800a4a8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000012e4  2400006c  0800a514  0000c06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24001350  0800a514  0000c350  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014068  00000000  00000000  0000c09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002995  00000000  00000000  00020102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001240  00000000  00000000  00022a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000e06  00000000  00000000  00023cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035a4b  00000000  00000000  00024ade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017462  00000000  00000000  0005a529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001606c2  00000000  00000000  0007198b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d204d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005894  00000000  00000000  001d2090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005d  00000000  00000000  001d7924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400006c 	.word	0x2400006c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800a1b0 	.word	0x0800a1b0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000070 	.word	0x24000070
 800030c:	0800a1b0 	.word	0x0800a1b0

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80003b6:	f000 fa7d 	bl	80008b4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ba:	f000 fdef 	bl	8000f9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003be:	f000 f883 	bl	80004c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c2:	f000 f9f1 	bl	80007a8 <MX_GPIO_Init>
  MX_DMA_Init();
 80003c6:	f000 f9d5 	bl	8000774 <MX_DMA_Init>
  MX_DAC1_Init();
 80003ca:	f000 f95f 	bl	800068c <MX_DAC1_Init>
  MX_TIM6_Init();
 80003ce:	f000 f999 	bl	8000704 <MX_TIM6_Init>
  MX_ADC3_Init();
 80003d2:	f000 f8e9 	bl	80005a8 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  for ( int i = 0; i < SAMPLES; i++ )
 80003d6:	2300      	movs	r3, #0
 80003d8:	607b      	str	r3, [r7, #4]
 80003da:	e045      	b.n	8000468 <main+0xb8>
  {
	  signal1_values[i] = ( uint32_t )( ( 0.5 + 0.5 * sin ( 2*3.14159*i/SAMPLES + noise ) ) * 4095 );
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	ee07 3a90 	vmov	s15, r3
 80003e2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80003e6:	ed9f 6b2c 	vldr	d6, [pc, #176]	@ 8000498 <main+0xe8>
 80003ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80003ee:	ed9f 5b2c 	vldr	d5, [pc, #176]	@ 80004a0 <main+0xf0>
 80003f2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80003f6:	4b2e      	ldr	r3, [pc, #184]	@ (80004b0 <main+0x100>)
 80003f8:	edd3 7a00 	vldr	s15, [r3]
 80003fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000400:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000404:	eeb0 0b47 	vmov.f64	d0, d7
 8000408:	f009 f912 	bl	8009630 <sin>
 800040c:	eeb0 7b40 	vmov.f64	d7, d0
 8000410:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000414:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000418:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 800041c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000420:	ed9f 6b21 	vldr	d6, [pc, #132]	@ 80004a8 <main+0xf8>
 8000424:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000428:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800042c:	ee17 1a90 	vmov	r1, s15
 8000430:	4a20      	ldr	r2, [pc, #128]	@ (80004b4 <main+0x104>)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  noise = ((float)rand() / RAND_MAX - 0.5f) * 0.25f;;
 8000438:	f008 f91c 	bl	8008674 <rand>
 800043c:	ee07 0a90 	vmov	s15, r0
 8000440:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000444:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 80004b8 <main+0x108>
 8000448:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800044c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000450:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000454:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8000458:	ee67 7a87 	vmul.f32	s15, s15, s14
 800045c:	4b14      	ldr	r3, [pc, #80]	@ (80004b0 <main+0x100>)
 800045e:	edc3 7a00 	vstr	s15, [r3]
  for ( int i = 0; i < SAMPLES; i++ )
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	3301      	adds	r3, #1
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800046e:	dbb5      	blt.n	80003dc <main+0x2c>

  }

  HAL_DAC_Start_DMA ( &hdac1, DAC_CHANNEL_1, ( const uint32_t* )&signal1_values[0], SAMPLES, DAC_ALIGN_12B_R );
 8000470:	2300      	movs	r3, #0
 8000472:	9300      	str	r3, [sp, #0]
 8000474:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000478:	4a0e      	ldr	r2, [pc, #56]	@ (80004b4 <main+0x104>)
 800047a:	2100      	movs	r1, #0
 800047c:	480f      	ldr	r0, [pc, #60]	@ (80004bc <main+0x10c>)
 800047e:	f002 fbab 	bl	8002bd8 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start_IT ( &htim6 );
 8000482:	480f      	ldr	r0, [pc, #60]	@ (80004c0 <main+0x110>)
 8000484:	f007 fdda 	bl	800803c <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start(&hadc3);
 8000488:	480e      	ldr	r0, [pc, #56]	@ (80004c4 <main+0x114>)
 800048a:	f001 fad7 	bl	8001a3c <HAL_ADC_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800048e:	bf00      	nop
 8000490:	e7fd      	b.n	800048e <main+0xde>
 8000492:	bf00      	nop
 8000494:	f3af 8000 	nop.w
 8000498:	f01b866e 	.word	0xf01b866e
 800049c:	401921f9 	.word	0x401921f9
 80004a0:	00000000 	.word	0x00000000
 80004a4:	408f4000 	.word	0x408f4000
 80004a8:	00000000 	.word	0x00000000
 80004ac:	40affe00 	.word	0x40affe00
 80004b0:	24001038 	.word	0x24001038
 80004b4:	24000088 	.word	0x24000088
 80004b8:	4f000000 	.word	0x4f000000
 80004bc:	240010ac 	.word	0x240010ac
 80004c0:	240011b0 	.word	0x240011b0
 80004c4:	2400103c 	.word	0x2400103c

080004c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b09c      	sub	sp, #112	@ 0x70
 80004cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004d2:	224c      	movs	r2, #76	@ 0x4c
 80004d4:	2100      	movs	r1, #0
 80004d6:	4618      	mov	r0, r3
 80004d8:	f008 fa0f 	bl	80088fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	2220      	movs	r2, #32
 80004e0:	2100      	movs	r1, #0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f008 fa09 	bl	80088fa <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004e8:	2002      	movs	r0, #2
 80004ea:	f004 f9df 	bl	80048ac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80004ee:	2300      	movs	r3, #0
 80004f0:	603b      	str	r3, [r7, #0]
 80004f2:	4b2c      	ldr	r3, [pc, #176]	@ (80005a4 <SystemClock_Config+0xdc>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	4a2b      	ldr	r2, [pc, #172]	@ (80005a4 <SystemClock_Config+0xdc>)
 80004f8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80004fc:	6193      	str	r3, [r2, #24]
 80004fe:	4b29      	ldr	r3, [pc, #164]	@ (80005a4 <SystemClock_Config+0xdc>)
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000506:	603b      	str	r3, [r7, #0]
 8000508:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800050a:	bf00      	nop
 800050c:	4b25      	ldr	r3, [pc, #148]	@ (80005a4 <SystemClock_Config+0xdc>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000514:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000518:	d1f8      	bne.n	800050c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800051a:	2302      	movs	r3, #2
 800051c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800051e:	2301      	movs	r3, #1
 8000520:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000522:	2340      	movs	r3, #64	@ 0x40
 8000524:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000526:	2302      	movs	r3, #2
 8000528:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800052a:	2300      	movs	r3, #0
 800052c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800052e:	2304      	movs	r3, #4
 8000530:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 31;
 8000532:	231f      	movs	r3, #31
 8000534:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000536:	2301      	movs	r3, #1
 8000538:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800053a:	2302      	movs	r3, #2
 800053c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800053e:	2302      	movs	r3, #2
 8000540:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000542:	230c      	movs	r3, #12
 8000544:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000546:	2300      	movs	r3, #0
 8000548:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 2048;
 800054a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800054e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000550:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000554:	4618      	mov	r0, r3
 8000556:	f004 f9e3 	bl	8004920 <HAL_RCC_OscConfig>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000560:	f000 f9d4 	bl	800090c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000564:	233f      	movs	r3, #63	@ 0x3f
 8000566:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000568:	2303      	movs	r3, #3
 800056a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800056c:	2300      	movs	r3, #0
 800056e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000570:	2308      	movs	r3, #8
 8000572:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000574:	2340      	movs	r3, #64	@ 0x40
 8000576:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000578:	2340      	movs	r3, #64	@ 0x40
 800057a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800057c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000580:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000582:	2340      	movs	r3, #64	@ 0x40
 8000584:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	2103      	movs	r1, #3
 800058a:	4618      	mov	r0, r3
 800058c:	f004 fda2 	bl	80050d4 <HAL_RCC_ClockConfig>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000596:	f000 f9b9 	bl	800090c <Error_Handler>
  }
}
 800059a:	bf00      	nop
 800059c:	3770      	adds	r7, #112	@ 0x70
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	58024800 	.word	0x58024800

080005a8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08a      	sub	sp, #40	@ 0x28
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	2224      	movs	r2, #36	@ 0x24
 80005b2:	2100      	movs	r1, #0
 80005b4:	4618      	mov	r0, r3
 80005b6:	f008 f9a0 	bl	80088fa <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80005ba:	4b31      	ldr	r3, [pc, #196]	@ (8000680 <MX_ADC3_Init+0xd8>)
 80005bc:	4a31      	ldr	r2, [pc, #196]	@ (8000684 <MX_ADC3_Init+0xdc>)
 80005be:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005c0:	4b2f      	ldr	r3, [pc, #188]	@ (8000680 <MX_ADC3_Init+0xd8>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80005c6:	4b2e      	ldr	r3, [pc, #184]	@ (8000680 <MX_ADC3_Init+0xd8>)
 80005c8:	2208      	movs	r2, #8
 80005ca:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80005cc:	4b2c      	ldr	r3, [pc, #176]	@ (8000680 <MX_ADC3_Init+0xd8>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005d2:	4b2b      	ldr	r3, [pc, #172]	@ (8000680 <MX_ADC3_Init+0xd8>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005d8:	4b29      	ldr	r3, [pc, #164]	@ (8000680 <MX_ADC3_Init+0xd8>)
 80005da:	2204      	movs	r2, #4
 80005dc:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80005de:	4b28      	ldr	r3, [pc, #160]	@ (8000680 <MX_ADC3_Init+0xd8>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80005e4:	4b26      	ldr	r3, [pc, #152]	@ (8000680 <MX_ADC3_Init+0xd8>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80005ea:	4b25      	ldr	r3, [pc, #148]	@ (8000680 <MX_ADC3_Init+0xd8>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80005f0:	4b23      	ldr	r3, [pc, #140]	@ (8000680 <MX_ADC3_Init+0xd8>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f8:	4b21      	ldr	r3, [pc, #132]	@ (8000680 <MX_ADC3_Init+0xd8>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005fe:	4b20      	ldr	r3, [pc, #128]	@ (8000680 <MX_ADC3_Init+0xd8>)
 8000600:	2200      	movs	r2, #0
 8000602:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000604:	4b1e      	ldr	r3, [pc, #120]	@ (8000680 <MX_ADC3_Init+0xd8>)
 8000606:	2200      	movs	r2, #0
 8000608:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 800060c:	4b1c      	ldr	r3, [pc, #112]	@ (8000680 <MX_ADC3_Init+0xd8>)
 800060e:	2200      	movs	r2, #0
 8000610:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000612:	4b1b      	ldr	r3, [pc, #108]	@ (8000680 <MX_ADC3_Init+0xd8>)
 8000614:	2200      	movs	r2, #0
 8000616:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000618:	4b19      	ldr	r3, [pc, #100]	@ (8000680 <MX_ADC3_Init+0xd8>)
 800061a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800061e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000620:	4b17      	ldr	r3, [pc, #92]	@ (8000680 <MX_ADC3_Init+0xd8>)
 8000622:	2200      	movs	r2, #0
 8000624:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000626:	4b16      	ldr	r3, [pc, #88]	@ (8000680 <MX_ADC3_Init+0xd8>)
 8000628:	2200      	movs	r2, #0
 800062a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 800062e:	4b14      	ldr	r3, [pc, #80]	@ (8000680 <MX_ADC3_Init+0xd8>)
 8000630:	2200      	movs	r2, #0
 8000632:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000634:	4812      	ldr	r0, [pc, #72]	@ (8000680 <MX_ADC3_Init+0xd8>)
 8000636:	f000 fff9 	bl	800162c <HAL_ADC_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_ADC3_Init+0x9c>
  {
    Error_Handler();
 8000640:	f000 f964 	bl	800090c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000644:	4b10      	ldr	r3, [pc, #64]	@ (8000688 <MX_ADC3_Init+0xe0>)
 8000646:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000648:	2306      	movs	r3, #6
 800064a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 800064c:	2300      	movs	r3, #0
 800064e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000650:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000654:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000656:	2304      	movs	r3, #4
 8000658:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 800065e:	2300      	movs	r3, #0
 8000660:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	4619      	mov	r1, r3
 8000666:	4806      	ldr	r0, [pc, #24]	@ (8000680 <MX_ADC3_Init+0xd8>)
 8000668:	f001 fac0 	bl	8001bec <HAL_ADC_ConfigChannel>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 8000672:	f000 f94b 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	3728      	adds	r7, #40	@ 0x28
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	2400103c 	.word	0x2400103c
 8000684:	58026000 	.word	0x58026000
 8000688:	21800100 	.word	0x21800100

0800068c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08a      	sub	sp, #40	@ 0x28
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	2224      	movs	r2, #36	@ 0x24
 8000696:	2100      	movs	r1, #0
 8000698:	4618      	mov	r0, r3
 800069a:	f008 f92e 	bl	80088fa <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800069e:	4b17      	ldr	r3, [pc, #92]	@ (80006fc <MX_DAC1_Init+0x70>)
 80006a0:	4a17      	ldr	r2, [pc, #92]	@ (8000700 <MX_DAC1_Init+0x74>)
 80006a2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80006a4:	4815      	ldr	r0, [pc, #84]	@ (80006fc <MX_DAC1_Init+0x70>)
 80006a6:	f002 fa75 	bl	8002b94 <HAL_DAC_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80006b0:	f000 f92c 	bl	800090c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80006b8:	2316      	movs	r3, #22
 80006ba:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006bc:	2300      	movs	r3, #0
 80006be:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80006c0:	2301      	movs	r3, #1
 80006c2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2200      	movs	r2, #0
 80006cc:	4619      	mov	r1, r3
 80006ce:	480b      	ldr	r0, [pc, #44]	@ (80006fc <MX_DAC1_Init+0x70>)
 80006d0:	f002 fbc0 	bl	8002e54 <HAL_DAC_ConfigChannel>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80006da:	f000 f917 	bl	800090c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80006de:	1d3b      	adds	r3, r7, #4
 80006e0:	2210      	movs	r2, #16
 80006e2:	4619      	mov	r1, r3
 80006e4:	4805      	ldr	r0, [pc, #20]	@ (80006fc <MX_DAC1_Init+0x70>)
 80006e6:	f002 fbb5 	bl	8002e54 <HAL_DAC_ConfigChannel>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 80006f0:	f000 f90c 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	3728      	adds	r7, #40	@ 0x28
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	240010ac 	.word	0x240010ac
 8000700:	40007400 	.word	0x40007400

08000704 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000714:	4b15      	ldr	r3, [pc, #84]	@ (800076c <MX_TIM6_Init+0x68>)
 8000716:	4a16      	ldr	r2, [pc, #88]	@ (8000770 <MX_TIM6_Init+0x6c>)
 8000718:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 274;
 800071a:	4b14      	ldr	r3, [pc, #80]	@ (800076c <MX_TIM6_Init+0x68>)
 800071c:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8000720:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000722:	4b12      	ldr	r3, [pc, #72]	@ (800076c <MX_TIM6_Init+0x68>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000728:	4b10      	ldr	r3, [pc, #64]	@ (800076c <MX_TIM6_Init+0x68>)
 800072a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800072e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000730:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <MX_TIM6_Init+0x68>)
 8000732:	2200      	movs	r2, #0
 8000734:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000736:	480d      	ldr	r0, [pc, #52]	@ (800076c <MX_TIM6_Init+0x68>)
 8000738:	f007 fc28 	bl	8007f8c <HAL_TIM_Base_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000742:	f000 f8e3 	bl	800090c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000746:	2320      	movs	r3, #32
 8000748:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800074a:	2300      	movs	r3, #0
 800074c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	4619      	mov	r1, r3
 8000752:	4806      	ldr	r0, [pc, #24]	@ (800076c <MX_TIM6_Init+0x68>)
 8000754:	f007 fed4 	bl	8008500 <HAL_TIMEx_MasterConfigSynchronization>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800075e:	f000 f8d5 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	240011b0 	.word	0x240011b0
 8000770:	40001000 	.word	0x40001000

08000774 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800077a:	4b0a      	ldr	r3, [pc, #40]	@ (80007a4 <MX_DMA_Init+0x30>)
 800077c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000780:	4a08      	ldr	r2, [pc, #32]	@ (80007a4 <MX_DMA_Init+0x30>)
 8000782:	f043 0301 	orr.w	r3, r3, #1
 8000786:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800078a:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <MX_DMA_Init+0x30>)
 800078c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000790:	f003 0301 	and.w	r3, r3, #1
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	687b      	ldr	r3, [r7, #4]

}
 8000798:	bf00      	nop
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	58024400 	.word	0x58024400

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ae:	4b12      	ldr	r3, [pc, #72]	@ (80007f8 <MX_GPIO_Init+0x50>)
 80007b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007b4:	4a10      	ldr	r2, [pc, #64]	@ (80007f8 <MX_GPIO_Init+0x50>)
 80007b6:	f043 0320 	orr.w	r3, r3, #32
 80007ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007be:	4b0e      	ldr	r3, [pc, #56]	@ (80007f8 <MX_GPIO_Init+0x50>)
 80007c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007c4:	f003 0320 	and.w	r3, r3, #32
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007cc:	4b0a      	ldr	r3, [pc, #40]	@ (80007f8 <MX_GPIO_Init+0x50>)
 80007ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d2:	4a09      	ldr	r2, [pc, #36]	@ (80007f8 <MX_GPIO_Init+0x50>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007dc:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <MX_GPIO_Init+0x50>)
 80007de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	58024400 	.word	0x58024400
 80007fc:	00000000 	.word	0x00000000

08000800 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback( TIM_HandleTypeDef *htim ) //Fs = 2500 Hz
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	Raw_Sine_Wave = (3.3 / 4095 ) * HAL_ADC_GetValue(&hadc3) ;
 8000808:	4825      	ldr	r0, [pc, #148]	@ (80008a0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800080a:	f001 f9e1 	bl	8001bd0 <HAL_ADC_GetValue>
 800080e:	ee07 0a90 	vmov	s15, r0
 8000812:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000816:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 8000888 <HAL_TIM_PeriodElapsedCallback+0x88>
 800081a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800081e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000822:	4b20      	ldr	r3, [pc, #128]	@ (80008a4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000824:	edc3 7a00 	vstr	s15, [r3]
	RC_Filter_Output = 0.006211 * Raw_Sine_Wave + 0.006211 * Raw_Sine_Wave_old + 0.9876 * RC_Filter_Output_old;
 8000828:	4b1e      	ldr	r3, [pc, #120]	@ (80008a4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800082a:	edd3 7a00 	vldr	s15, [r3]
 800082e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000832:	ed9f 6b17 	vldr	d6, [pc, #92]	@ 8000890 <HAL_TIM_PeriodElapsedCallback+0x90>
 8000836:	ee27 6b06 	vmul.f64	d6, d7, d6
 800083a:	4b1b      	ldr	r3, [pc, #108]	@ (80008a8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800083c:	edd3 7a00 	vldr	s15, [r3]
 8000840:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000844:	ed9f 5b12 	vldr	d5, [pc, #72]	@ 8000890 <HAL_TIM_PeriodElapsedCallback+0x90>
 8000848:	ee27 7b05 	vmul.f64	d7, d7, d5
 800084c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000850:	4b16      	ldr	r3, [pc, #88]	@ (80008ac <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000852:	edd3 7a00 	vldr	s15, [r3]
 8000856:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800085a:	ed9f 5b0f 	vldr	d5, [pc, #60]	@ 8000898 <HAL_TIM_PeriodElapsedCallback+0x98>
 800085e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000862:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000866:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800086a:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800086c:	edc3 7a00 	vstr	s15, [r3]
	Raw_Sine_Wave_old = Raw_Sine_Wave;
 8000870:	4b0c      	ldr	r3, [pc, #48]	@ (80008a4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a0c      	ldr	r2, [pc, #48]	@ (80008a8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000876:	6013      	str	r3, [r2, #0]
	RC_Filter_Output_old = RC_Filter_Output;
 8000878:	4b0d      	ldr	r3, [pc, #52]	@ (80008b0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a0b      	ldr	r2, [pc, #44]	@ (80008ac <HAL_TIM_PeriodElapsedCallback+0xac>)
 800087e:	6013      	str	r3, [r2, #0]
}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	e734d9b4 	.word	0xe734d9b4
 800088c:	3f4a680c 	.word	0x3f4a680c
 8000890:	9e01de27 	.word	0x9e01de27
 8000894:	3f7970b4 	.word	0x3f7970b4
 8000898:	50b0f27c 	.word	0x50b0f27c
 800089c:	3fef9a6b 	.word	0x3fef9a6b
 80008a0:	2400103c 	.word	0x2400103c
 80008a4:	24001028 	.word	0x24001028
 80008a8:	24001030 	.word	0x24001030
 80008ac:	24001034 	.word	0x24001034
 80008b0:	2400102c 	.word	0x2400102c

080008b4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80008ba:	463b      	mov	r3, r7
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80008c6:	f002 f8ed 	bl	8002aa4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80008ca:	2301      	movs	r3, #1
 80008cc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80008d6:	231f      	movs	r3, #31
 80008d8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80008da:	2387      	movs	r3, #135	@ 0x87
 80008dc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80008de:	2300      	movs	r3, #0
 80008e0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80008e2:	2300      	movs	r3, #0
 80008e4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80008e6:	2301      	movs	r3, #1
 80008e8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80008ea:	2301      	movs	r3, #1
 80008ec:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80008f2:	2300      	movs	r3, #0
 80008f4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008f6:	463b      	mov	r3, r7
 80008f8:	4618      	mov	r0, r3
 80008fa:	f002 f90b 	bl	8002b14 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80008fe:	2004      	movs	r0, #4
 8000900:	f002 f8e8 	bl	8002ad4 <HAL_MPU_Enable>

}
 8000904:	bf00      	nop
 8000906:	3710      	adds	r7, #16
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000910:	b672      	cpsid	i
}
 8000912:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <Error_Handler+0x8>

08000918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091e:	4b0a      	ldr	r3, [pc, #40]	@ (8000948 <HAL_MspInit+0x30>)
 8000920:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000924:	4a08      	ldr	r2, [pc, #32]	@ (8000948 <HAL_MspInit+0x30>)
 8000926:	f043 0302 	orr.w	r3, r3, #2
 800092a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800092e:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <HAL_MspInit+0x30>)
 8000930:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000934:	f003 0302 	and.w	r3, r3, #2
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093c:	bf00      	nop
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	58024400 	.word	0x58024400

0800094c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b0b8      	sub	sp, #224	@ 0xe0
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000964:	f107 0310 	add.w	r3, r7, #16
 8000968:	22b8      	movs	r2, #184	@ 0xb8
 800096a:	2100      	movs	r1, #0
 800096c:	4618      	mov	r0, r3
 800096e:	f007 ffc4 	bl	80088fa <memset>
  if(hadc->Instance==ADC3)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a2b      	ldr	r2, [pc, #172]	@ (8000a24 <HAL_ADC_MspInit+0xd8>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d14f      	bne.n	8000a1c <HAL_ADC_MspInit+0xd0>

    /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800097c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000980:	f04f 0300 	mov.w	r3, #0
 8000984:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 32;
 8000988:	2320      	movs	r3, #32
 800098a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 129;
 800098c:	2381      	movs	r3, #129	@ 0x81
 800098e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000990:	2302      	movs	r3, #2
 8000992:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000994:	2302      	movs	r3, #2
 8000996:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000998:	2302      	movs	r3, #2
 800099a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 800099c:	2340      	movs	r3, #64	@ 0x40
 800099e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80009a8:	2300      	movs	r3, #0
 80009aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009ae:	f107 0310 	add.w	r3, r7, #16
 80009b2:	4618      	mov	r0, r3
 80009b4:	f004 ff04 	bl	80057c0 <HAL_RCCEx_PeriphCLKConfig>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 80009be:	f7ff ffa5 	bl	800090c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80009c2:	4b19      	ldr	r3, [pc, #100]	@ (8000a28 <HAL_ADC_MspInit+0xdc>)
 80009c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c8:	4a17      	ldr	r2, [pc, #92]	@ (8000a28 <HAL_ADC_MspInit+0xdc>)
 80009ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80009ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009d2:	4b15      	ldr	r3, [pc, #84]	@ (8000a28 <HAL_ADC_MspInit+0xdc>)
 80009d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80009e0:	4b11      	ldr	r3, [pc, #68]	@ (8000a28 <HAL_ADC_MspInit+0xdc>)
 80009e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e6:	4a10      	ldr	r2, [pc, #64]	@ (8000a28 <HAL_ADC_MspInit+0xdc>)
 80009e8:	f043 0320 	orr.w	r3, r3, #32
 80009ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000a28 <HAL_ADC_MspInit+0xdc>)
 80009f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f6:	f003 0320 	and.w	r3, r3, #32
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PF6     ------> ADC3_INP8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009fe:	2340      	movs	r3, #64	@ 0x40
 8000a00:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a10:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000a14:	4619      	mov	r1, r3
 8000a16:	4805      	ldr	r0, [pc, #20]	@ (8000a2c <HAL_ADC_MspInit+0xe0>)
 8000a18:	f003 fda0 	bl	800455c <HAL_GPIO_Init>

    /* USER CODE END ADC3_MspInit 1 */

  }

}
 8000a1c:	bf00      	nop
 8000a1e:	37e0      	adds	r7, #224	@ 0xe0
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	58026000 	.word	0x58026000
 8000a28:	58024400 	.word	0x58024400
 8000a2c:	58021400 	.word	0x58021400

08000a30 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	@ 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a4c      	ldr	r2, [pc, #304]	@ (8000b80 <HAL_DAC_MspInit+0x150>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	f040 8092 	bne.w	8000b78 <HAL_DAC_MspInit+0x148>
  {
    /* USER CODE BEGIN DAC1_MspInit 0 */

    /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000a54:	4b4b      	ldr	r3, [pc, #300]	@ (8000b84 <HAL_DAC_MspInit+0x154>)
 8000a56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000a5a:	4a4a      	ldr	r2, [pc, #296]	@ (8000b84 <HAL_DAC_MspInit+0x154>)
 8000a5c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000a60:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000a64:	4b47      	ldr	r3, [pc, #284]	@ (8000b84 <HAL_DAC_MspInit+0x154>)
 8000a66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000a6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000a6e:	613b      	str	r3, [r7, #16]
 8000a70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	4b44      	ldr	r3, [pc, #272]	@ (8000b84 <HAL_DAC_MspInit+0x154>)
 8000a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a78:	4a42      	ldr	r2, [pc, #264]	@ (8000b84 <HAL_DAC_MspInit+0x154>)
 8000a7a:	f043 0301 	orr.w	r3, r3, #1
 8000a7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a82:	4b40      	ldr	r3, [pc, #256]	@ (8000b84 <HAL_DAC_MspInit+0x154>)
 8000a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a90:	2330      	movs	r3, #48	@ 0x30
 8000a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a94:	2303      	movs	r3, #3
 8000a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4839      	ldr	r0, [pc, #228]	@ (8000b88 <HAL_DAC_MspInit+0x158>)
 8000aa4:	f003 fd5a 	bl	800455c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream0;
 8000aa8:	4b38      	ldr	r3, [pc, #224]	@ (8000b8c <HAL_DAC_MspInit+0x15c>)
 8000aaa:	4a39      	ldr	r2, [pc, #228]	@ (8000b90 <HAL_DAC_MspInit+0x160>)
 8000aac:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000aae:	4b37      	ldr	r3, [pc, #220]	@ (8000b8c <HAL_DAC_MspInit+0x15c>)
 8000ab0:	2243      	movs	r2, #67	@ 0x43
 8000ab2:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ab4:	4b35      	ldr	r3, [pc, #212]	@ (8000b8c <HAL_DAC_MspInit+0x15c>)
 8000ab6:	2240      	movs	r2, #64	@ 0x40
 8000ab8:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aba:	4b34      	ldr	r3, [pc, #208]	@ (8000b8c <HAL_DAC_MspInit+0x15c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000ac0:	4b32      	ldr	r3, [pc, #200]	@ (8000b8c <HAL_DAC_MspInit+0x15c>)
 8000ac2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ac6:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ac8:	4b30      	ldr	r3, [pc, #192]	@ (8000b8c <HAL_DAC_MspInit+0x15c>)
 8000aca:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ace:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ad0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b8c <HAL_DAC_MspInit+0x15c>)
 8000ad2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ad6:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000ad8:	4b2c      	ldr	r3, [pc, #176]	@ (8000b8c <HAL_DAC_MspInit+0x15c>)
 8000ada:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ade:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000ae0:	4b2a      	ldr	r3, [pc, #168]	@ (8000b8c <HAL_DAC_MspInit+0x15c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ae6:	4b29      	ldr	r3, [pc, #164]	@ (8000b8c <HAL_DAC_MspInit+0x15c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000aec:	4827      	ldr	r0, [pc, #156]	@ (8000b8c <HAL_DAC_MspInit+0x15c>)
 8000aee:	f002 fb8b 	bl	8003208 <HAL_DMA_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <HAL_DAC_MspInit+0xcc>
    {
      Error_Handler();
 8000af8:	f7ff ff08 	bl	800090c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4a23      	ldr	r2, [pc, #140]	@ (8000b8c <HAL_DAC_MspInit+0x15c>)
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	4a22      	ldr	r2, [pc, #136]	@ (8000b8c <HAL_DAC_MspInit+0x15c>)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DAC1_CH2 Init */
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 8000b08:	4b22      	ldr	r3, [pc, #136]	@ (8000b94 <HAL_DAC_MspInit+0x164>)
 8000b0a:	4a23      	ldr	r2, [pc, #140]	@ (8000b98 <HAL_DAC_MspInit+0x168>)
 8000b0c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 8000b0e:	4b21      	ldr	r3, [pc, #132]	@ (8000b94 <HAL_DAC_MspInit+0x164>)
 8000b10:	2244      	movs	r2, #68	@ 0x44
 8000b12:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b14:	4b1f      	ldr	r3, [pc, #124]	@ (8000b94 <HAL_DAC_MspInit+0x164>)
 8000b16:	2240      	movs	r2, #64	@ 0x40
 8000b18:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000b94 <HAL_DAC_MspInit+0x164>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000b20:	4b1c      	ldr	r3, [pc, #112]	@ (8000b94 <HAL_DAC_MspInit+0x164>)
 8000b22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b26:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b28:	4b1a      	ldr	r3, [pc, #104]	@ (8000b94 <HAL_DAC_MspInit+0x164>)
 8000b2a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000b2e:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b30:	4b18      	ldr	r3, [pc, #96]	@ (8000b94 <HAL_DAC_MspInit+0x164>)
 8000b32:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b36:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch2.Init.Mode = DMA_CIRCULAR;
 8000b38:	4b16      	ldr	r3, [pc, #88]	@ (8000b94 <HAL_DAC_MspInit+0x164>)
 8000b3a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b3e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8000b40:	4b14      	ldr	r3, [pc, #80]	@ (8000b94 <HAL_DAC_MspInit+0x164>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b46:	4b13      	ldr	r3, [pc, #76]	@ (8000b94 <HAL_DAC_MspInit+0x164>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8000b4c:	4811      	ldr	r0, [pc, #68]	@ (8000b94 <HAL_DAC_MspInit+0x164>)
 8000b4e:	f002 fb5b 	bl	8003208 <HAL_DMA_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <HAL_DAC_MspInit+0x12c>
    {
      Error_Handler();
 8000b58:	f7ff fed8 	bl	800090c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a0d      	ldr	r2, [pc, #52]	@ (8000b94 <HAL_DAC_MspInit+0x164>)
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	4a0c      	ldr	r2, [pc, #48]	@ (8000b94 <HAL_DAC_MspInit+0x164>)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	2036      	movs	r0, #54	@ 0x36
 8000b6e:	f001 ff64 	bl	8002a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b72:	2036      	movs	r0, #54	@ 0x36
 8000b74:	f001 ff7b 	bl	8002a6e <HAL_NVIC_EnableIRQ>

    /* USER CODE END DAC1_MspInit 1 */

  }

}
 8000b78:	bf00      	nop
 8000b7a:	3728      	adds	r7, #40	@ 0x28
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40007400 	.word	0x40007400
 8000b84:	58024400 	.word	0x58024400
 8000b88:	58020000 	.word	0x58020000
 8000b8c:	240010c0 	.word	0x240010c0
 8000b90:	40020010 	.word	0x40020010
 8000b94:	24001138 	.word	0x24001138
 8000b98:	40020028 	.word	0x40020028

08000b9c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a0e      	ldr	r2, [pc, #56]	@ (8000be4 <HAL_TIM_Base_MspInit+0x48>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d116      	bne.n	8000bdc <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000bae:	4b0e      	ldr	r3, [pc, #56]	@ (8000be8 <HAL_TIM_Base_MspInit+0x4c>)
 8000bb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000bb4:	4a0c      	ldr	r2, [pc, #48]	@ (8000be8 <HAL_TIM_Base_MspInit+0x4c>)
 8000bb6:	f043 0310 	orr.w	r3, r3, #16
 8000bba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000be8 <HAL_TIM_Base_MspInit+0x4c>)
 8000bc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000bc4:	f003 0310 	and.w	r3, r3, #16
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2100      	movs	r1, #0
 8000bd0:	2036      	movs	r0, #54	@ 0x36
 8000bd2:	f001 ff32 	bl	8002a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bd6:	2036      	movs	r0, #54	@ 0x36
 8000bd8:	f001 ff49 	bl	8002a6e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000bdc:	bf00      	nop
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40001000 	.word	0x40001000
 8000be8:	58024400 	.word	0x58024400

08000bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <NMI_Handler+0x4>

08000bf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <HardFault_Handler+0x4>

08000bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <MemManage_Handler+0x4>

08000c04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <BusFault_Handler+0x4>

08000c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <UsageFault_Handler+0x4>

08000c14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c42:	f000 fa1d 	bl	8001080 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8000c50:	4803      	ldr	r0, [pc, #12]	@ (8000c60 <TIM6_DAC_IRQHandler+0x14>)
 8000c52:	f002 f881 	bl	8002d58 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8000c56:	4803      	ldr	r0, [pc, #12]	@ (8000c64 <TIM6_DAC_IRQHandler+0x18>)
 8000c58:	f007 fa76 	bl	8008148 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	240010ac 	.word	0x240010ac
 8000c64:	240011b0 	.word	0x240011b0

08000c68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return 1;
 8000c6c:	2301      	movs	r3, #1
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <_kill>:

int _kill(int pid, int sig)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c82:	f007 fe89 	bl	8008998 <__errno>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2216      	movs	r2, #22
 8000c8a:	601a      	str	r2, [r3, #0]
  return -1;
 8000c8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <_exit>:

void _exit (int status)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff ffe7 	bl	8000c78 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000caa:	bf00      	nop
 8000cac:	e7fd      	b.n	8000caa <_exit+0x12>

08000cae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b086      	sub	sp, #24
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	60f8      	str	r0, [r7, #12]
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cba:	2300      	movs	r3, #0
 8000cbc:	617b      	str	r3, [r7, #20]
 8000cbe:	e00a      	b.n	8000cd6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cc0:	f3af 8000 	nop.w
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	1c5a      	adds	r2, r3, #1
 8000cca:	60ba      	str	r2, [r7, #8]
 8000ccc:	b2ca      	uxtb	r2, r1
 8000cce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	617b      	str	r3, [r7, #20]
 8000cd6:	697a      	ldr	r2, [r7, #20]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	dbf0      	blt.n	8000cc0 <_read+0x12>
  }

  return len;
 8000cde:	687b      	ldr	r3, [r7, #4]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3718      	adds	r7, #24
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	e009      	b.n	8000d0e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	1c5a      	adds	r2, r3, #1
 8000cfe:	60ba      	str	r2, [r7, #8]
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	617b      	str	r3, [r7, #20]
 8000d0e:	697a      	ldr	r2, [r7, #20]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	dbf1      	blt.n	8000cfa <_write+0x12>
  }
  return len;
 8000d16:	687b      	ldr	r3, [r7, #4]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <_close>:

int _close(int file)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d48:	605a      	str	r2, [r3, #4]
  return 0;
 8000d4a:	2300      	movs	r3, #0
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <_isatty>:

int _isatty(int file)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d60:	2301      	movs	r3, #1
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b085      	sub	sp, #20
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	60f8      	str	r0, [r7, #12]
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d7a:	2300      	movs	r3, #0
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d90:	4a14      	ldr	r2, [pc, #80]	@ (8000de4 <_sbrk+0x5c>)
 8000d92:	4b15      	ldr	r3, [pc, #84]	@ (8000de8 <_sbrk+0x60>)
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d9c:	4b13      	ldr	r3, [pc, #76]	@ (8000dec <_sbrk+0x64>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d102      	bne.n	8000daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da4:	4b11      	ldr	r3, [pc, #68]	@ (8000dec <_sbrk+0x64>)
 8000da6:	4a12      	ldr	r2, [pc, #72]	@ (8000df0 <_sbrk+0x68>)
 8000da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000daa:	4b10      	ldr	r3, [pc, #64]	@ (8000dec <_sbrk+0x64>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d207      	bcs.n	8000dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db8:	f007 fdee 	bl	8008998 <__errno>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc6:	e009      	b.n	8000ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc8:	4b08      	ldr	r3, [pc, #32]	@ (8000dec <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dce:	4b07      	ldr	r3, [pc, #28]	@ (8000dec <_sbrk+0x64>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	4a05      	ldr	r2, [pc, #20]	@ (8000dec <_sbrk+0x64>)
 8000dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dda:	68fb      	ldr	r3, [r7, #12]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	24050000 	.word	0x24050000
 8000de8:	00000400 	.word	0x00000400
 8000dec:	240011fc 	.word	0x240011fc
 8000df0:	24001350 	.word	0x24001350

08000df4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000df8:	4b3e      	ldr	r3, [pc, #248]	@ (8000ef4 <SystemInit+0x100>)
 8000dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dfe:	4a3d      	ldr	r2, [pc, #244]	@ (8000ef4 <SystemInit+0x100>)
 8000e00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e08:	4b3b      	ldr	r3, [pc, #236]	@ (8000ef8 <SystemInit+0x104>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f003 030f 	and.w	r3, r3, #15
 8000e10:	2b06      	cmp	r3, #6
 8000e12:	d807      	bhi.n	8000e24 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e14:	4b38      	ldr	r3, [pc, #224]	@ (8000ef8 <SystemInit+0x104>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f023 030f 	bic.w	r3, r3, #15
 8000e1c:	4a36      	ldr	r2, [pc, #216]	@ (8000ef8 <SystemInit+0x104>)
 8000e1e:	f043 0307 	orr.w	r3, r3, #7
 8000e22:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e24:	4b35      	ldr	r3, [pc, #212]	@ (8000efc <SystemInit+0x108>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a34      	ldr	r2, [pc, #208]	@ (8000efc <SystemInit+0x108>)
 8000e2a:	f043 0301 	orr.w	r3, r3, #1
 8000e2e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e30:	4b32      	ldr	r3, [pc, #200]	@ (8000efc <SystemInit+0x108>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e36:	4b31      	ldr	r3, [pc, #196]	@ (8000efc <SystemInit+0x108>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	4930      	ldr	r1, [pc, #192]	@ (8000efc <SystemInit+0x108>)
 8000e3c:	4b30      	ldr	r3, [pc, #192]	@ (8000f00 <SystemInit+0x10c>)
 8000e3e:	4013      	ands	r3, r2
 8000e40:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e42:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef8 <SystemInit+0x104>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f003 0308 	and.w	r3, r3, #8
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d007      	beq.n	8000e5e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ef8 <SystemInit+0x104>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f023 030f 	bic.w	r3, r3, #15
 8000e56:	4a28      	ldr	r2, [pc, #160]	@ (8000ef8 <SystemInit+0x104>)
 8000e58:	f043 0307 	orr.w	r3, r3, #7
 8000e5c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e5e:	4b27      	ldr	r3, [pc, #156]	@ (8000efc <SystemInit+0x108>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e64:	4b25      	ldr	r3, [pc, #148]	@ (8000efc <SystemInit+0x108>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000e6a:	4b24      	ldr	r3, [pc, #144]	@ (8000efc <SystemInit+0x108>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e70:	4b22      	ldr	r3, [pc, #136]	@ (8000efc <SystemInit+0x108>)
 8000e72:	4a24      	ldr	r2, [pc, #144]	@ (8000f04 <SystemInit+0x110>)
 8000e74:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e76:	4b21      	ldr	r3, [pc, #132]	@ (8000efc <SystemInit+0x108>)
 8000e78:	4a23      	ldr	r2, [pc, #140]	@ (8000f08 <SystemInit+0x114>)
 8000e7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000efc <SystemInit+0x108>)
 8000e7e:	4a23      	ldr	r2, [pc, #140]	@ (8000f0c <SystemInit+0x118>)
 8000e80:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e82:	4b1e      	ldr	r3, [pc, #120]	@ (8000efc <SystemInit+0x108>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e88:	4b1c      	ldr	r3, [pc, #112]	@ (8000efc <SystemInit+0x108>)
 8000e8a:	4a20      	ldr	r2, [pc, #128]	@ (8000f0c <SystemInit+0x118>)
 8000e8c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000efc <SystemInit+0x108>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e94:	4b19      	ldr	r3, [pc, #100]	@ (8000efc <SystemInit+0x108>)
 8000e96:	4a1d      	ldr	r2, [pc, #116]	@ (8000f0c <SystemInit+0x118>)
 8000e98:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e9a:	4b18      	ldr	r3, [pc, #96]	@ (8000efc <SystemInit+0x108>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ea0:	4b16      	ldr	r3, [pc, #88]	@ (8000efc <SystemInit+0x108>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a15      	ldr	r2, [pc, #84]	@ (8000efc <SystemInit+0x108>)
 8000ea6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000eaa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000eac:	4b13      	ldr	r3, [pc, #76]	@ (8000efc <SystemInit+0x108>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000eb2:	4b12      	ldr	r3, [pc, #72]	@ (8000efc <SystemInit+0x108>)
 8000eb4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000eb8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d113      	bne.n	8000ee8 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8000efc <SystemInit+0x108>)
 8000ec2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ec6:	4a0d      	ldr	r2, [pc, #52]	@ (8000efc <SystemInit+0x108>)
 8000ec8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ecc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f10 <SystemInit+0x11c>)
 8000ed2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000ed6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000ed8:	4b08      	ldr	r3, [pc, #32]	@ (8000efc <SystemInit+0x108>)
 8000eda:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ede:	4a07      	ldr	r2, [pc, #28]	@ (8000efc <SystemInit+0x108>)
 8000ee0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000ee4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	e000ed00 	.word	0xe000ed00
 8000ef8:	52002000 	.word	0x52002000
 8000efc:	58024400 	.word	0x58024400
 8000f00:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f04:	02020200 	.word	0x02020200
 8000f08:	01ff0000 	.word	0x01ff0000
 8000f0c:	01010280 	.word	0x01010280
 8000f10:	52004000 	.word	0x52004000

08000f14 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000f18:	4b09      	ldr	r3, [pc, #36]	@ (8000f40 <ExitRun0Mode+0x2c>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	4a08      	ldr	r2, [pc, #32]	@ (8000f40 <ExitRun0Mode+0x2c>)
 8000f1e:	f043 0302 	orr.w	r3, r3, #2
 8000f22:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000f24:	bf00      	nop
 8000f26:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <ExitRun0Mode+0x2c>)
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d0f9      	beq.n	8000f26 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000f32:	bf00      	nop
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	58024800 	.word	0x58024800

08000f44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f44:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000f80 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000f48:	f7ff ffe4 	bl	8000f14 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f4c:	f7ff ff52 	bl	8000df4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f50:	480c      	ldr	r0, [pc, #48]	@ (8000f84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f52:	490d      	ldr	r1, [pc, #52]	@ (8000f88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f54:	4a0d      	ldr	r2, [pc, #52]	@ (8000f8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f58:	e002      	b.n	8000f60 <LoopCopyDataInit>

08000f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5e:	3304      	adds	r3, #4

08000f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f64:	d3f9      	bcc.n	8000f5a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f66:	4a0a      	ldr	r2, [pc, #40]	@ (8000f90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f68:	4c0a      	ldr	r4, [pc, #40]	@ (8000f94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f6c:	e001      	b.n	8000f72 <LoopFillZerobss>

08000f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f70:	3204      	adds	r2, #4

08000f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f74:	d3fb      	bcc.n	8000f6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f76:	f007 fd15 	bl	80089a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f7a:	f7ff fa19 	bl	80003b0 <main>
  bx  lr
 8000f7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f80:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000f84:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f88:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8000f8c:	0800a4a8 	.word	0x0800a4a8
  ldr r2, =_sbss
 8000f90:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8000f94:	24001350 	.word	0x24001350

08000f98 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f98:	e7fe      	b.n	8000f98 <ADC3_IRQHandler>
	...

08000f9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa2:	2003      	movs	r0, #3
 8000fa4:	f001 fd3e 	bl	8002a24 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000fa8:	f004 fa4a 	bl	8005440 <HAL_RCC_GetSysClockFreq>
 8000fac:	4602      	mov	r2, r0
 8000fae:	4b15      	ldr	r3, [pc, #84]	@ (8001004 <HAL_Init+0x68>)
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	0a1b      	lsrs	r3, r3, #8
 8000fb4:	f003 030f 	and.w	r3, r3, #15
 8000fb8:	4913      	ldr	r1, [pc, #76]	@ (8001008 <HAL_Init+0x6c>)
 8000fba:	5ccb      	ldrb	r3, [r1, r3]
 8000fbc:	f003 031f 	and.w	r3, r3, #31
 8000fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fc4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8001004 <HAL_Init+0x68>)
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	f003 030f 	and.w	r3, r3, #15
 8000fce:	4a0e      	ldr	r2, [pc, #56]	@ (8001008 <HAL_Init+0x6c>)
 8000fd0:	5cd3      	ldrb	r3, [r2, r3]
 8000fd2:	f003 031f 	and.w	r3, r3, #31
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fdc:	4a0b      	ldr	r2, [pc, #44]	@ (800100c <HAL_Init+0x70>)
 8000fde:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fe0:	4a0b      	ldr	r2, [pc, #44]	@ (8001010 <HAL_Init+0x74>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fe6:	200f      	movs	r0, #15
 8000fe8:	f000 f814 	bl	8001014 <HAL_InitTick>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e002      	b.n	8000ffc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff6:	f7ff fc8f 	bl	8000918 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ffa:	2300      	movs	r3, #0
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	58024400 	.word	0x58024400
 8001008:	0800a1c8 	.word	0x0800a1c8
 800100c:	24000004 	.word	0x24000004
 8001010:	24000000 	.word	0x24000000

08001014 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800101c:	4b15      	ldr	r3, [pc, #84]	@ (8001074 <HAL_InitTick+0x60>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d101      	bne.n	8001028 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e021      	b.n	800106c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001028:	4b13      	ldr	r3, [pc, #76]	@ (8001078 <HAL_InitTick+0x64>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b11      	ldr	r3, [pc, #68]	@ (8001074 <HAL_InitTick+0x60>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	4619      	mov	r1, r3
 8001032:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001036:	fbb3 f3f1 	udiv	r3, r3, r1
 800103a:	fbb2 f3f3 	udiv	r3, r2, r3
 800103e:	4618      	mov	r0, r3
 8001040:	f001 fd23 	bl	8002a8a <HAL_SYSTICK_Config>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e00e      	b.n	800106c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b0f      	cmp	r3, #15
 8001052:	d80a      	bhi.n	800106a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001054:	2200      	movs	r2, #0
 8001056:	6879      	ldr	r1, [r7, #4]
 8001058:	f04f 30ff 	mov.w	r0, #4294967295
 800105c:	f001 fced 	bl	8002a3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001060:	4a06      	ldr	r2, [pc, #24]	@ (800107c <HAL_InitTick+0x68>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001066:	2300      	movs	r3, #0
 8001068:	e000      	b.n	800106c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
}
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	2400000c 	.word	0x2400000c
 8001078:	24000000 	.word	0x24000000
 800107c:	24000008 	.word	0x24000008

08001080 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001084:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <HAL_IncTick+0x20>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	461a      	mov	r2, r3
 800108a:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <HAL_IncTick+0x24>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4413      	add	r3, r2
 8001090:	4a04      	ldr	r2, [pc, #16]	@ (80010a4 <HAL_IncTick+0x24>)
 8001092:	6013      	str	r3, [r2, #0]
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	2400000c 	.word	0x2400000c
 80010a4:	24001200 	.word	0x24001200

080010a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return uwTick;
 80010ac:	4b03      	ldr	r3, [pc, #12]	@ (80010bc <HAL_GetTick+0x14>)
 80010ae:	681b      	ldr	r3, [r3, #0]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	24001200 	.word	0x24001200

080010c0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	431a      	orrs	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	609a      	str	r2, [r3, #8]
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	431a      	orrs	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	609a      	str	r2, [r3, #8]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800111c:	4618      	mov	r0, r3
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001128:	b480      	push	{r7}
 800112a:	b087      	sub	sp, #28
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
#if defined(ADC_VER_V5_V90)
    if (ADCx != ADC3)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a18      	ldr	r2, [pc, #96]	@ (8001198 <LL_ADC_SetChannelPreselection+0x70>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d027      	beq.n	800118a <LL_ADC_SetChannelPreselection+0x62>
    {
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001140:	2b00      	cmp	r3, #0
 8001142:	d107      	bne.n	8001154 <LL_ADC_SetChannelPreselection+0x2c>
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	0e9b      	lsrs	r3, r3, #26
 8001148:	f003 031f 	and.w	r3, r3, #31
 800114c:	2201      	movs	r2, #1
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	e015      	b.n	8001180 <LL_ADC_SetChannelPreselection+0x58>
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	fa93 f3a3 	rbit	r3, r3
 800115e:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d101      	bne.n	800116e <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 800116a:	2320      	movs	r3, #32
 800116c:	e003      	b.n	8001176 <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	fab3 f383 	clz	r3, r3
 8001174:	b2db      	uxtb	r3, r3
 8001176:	f003 031f 	and.w	r3, r3, #31
 800117a:	2201      	movs	r2, #1
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	69d2      	ldr	r2, [r2, #28]
 8001184:	431a      	orrs	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	61da      	str	r2, [r3, #28]
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
}
 800118a:	bf00      	nop
 800118c:	371c      	adds	r7, #28
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	58026000 	.word	0x58026000

0800119c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800119c:	b480      	push	{r7}
 800119e:	b087      	sub	sp, #28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
 80011a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	3360      	adds	r3, #96	@ 0x60
 80011ae:	461a      	mov	r2, r3
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4413      	add	r3, r2
 80011b6:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4a10      	ldr	r2, [pc, #64]	@ (80011fc <LL_ADC_SetOffset+0x60>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d10b      	bne.n	80011d8 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80011d6:	e00b      	b.n	80011f0 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	430b      	orrs	r3, r1
 80011ea:	431a      	orrs	r2, r3
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	601a      	str	r2, [r3, #0]
}
 80011f0:	bf00      	nop
 80011f2:	371c      	adds	r7, #28
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	58026000 	.word	0x58026000

08001200 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	3360      	adds	r3, #96	@ 0x60
 800120e:	461a      	mov	r2, r3
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001220:	4618      	mov	r0, r3
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	691b      	ldr	r3, [r3, #16]
 800123c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	f003 031f 	and.w	r3, r3, #31
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	fa01 f303 	lsl.w	r3, r1, r3
 800124c:	431a      	orrs	r2, r3
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	611a      	str	r2, [r3, #16]
}
 8001252:	bf00      	nop
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001260:	b480      	push	{r7}
 8001262:	b087      	sub	sp, #28
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4a0c      	ldr	r2, [pc, #48]	@ (80012a0 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d00e      	beq.n	8001292 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	3360      	adds	r3, #96	@ 0x60
 8001278:	461a      	mov	r2, r3
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	4413      	add	r3, r2
 8001280:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	431a      	orrs	r2, r3
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	601a      	str	r2, [r3, #0]
  }
}
 8001292:	bf00      	nop
 8001294:	371c      	adds	r7, #28
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	58026000 	.word	0x58026000

080012a4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b087      	sub	sp, #28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4a0c      	ldr	r2, [pc, #48]	@ (80012e4 <LL_ADC_SetOffsetSaturation+0x40>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d10e      	bne.n	80012d6 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	3360      	adds	r3, #96	@ 0x60
 80012bc:	461a      	mov	r2, r3
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4413      	add	r3, r2
 80012c4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	431a      	orrs	r2, r3
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80012d6:	bf00      	nop
 80012d8:	371c      	adds	r7, #28
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	58026000 	.word	0x58026000

080012e8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b087      	sub	sp, #28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4a0c      	ldr	r2, [pc, #48]	@ (8001328 <LL_ADC_SetOffsetSign+0x40>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d10e      	bne.n	800131a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	3360      	adds	r3, #96	@ 0x60
 8001300:	461a      	mov	r2, r3
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	431a      	orrs	r2, r3
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800131a:	bf00      	nop
 800131c:	371c      	adds	r7, #28
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	58026000 	.word	0x58026000

0800132c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800132c:	b480      	push	{r7}
 800132e:	b087      	sub	sp, #28
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	3360      	adds	r3, #96	@ 0x60
 800133c:	461a      	mov	r2, r3
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	4a0c      	ldr	r2, [pc, #48]	@ (800137c <LL_ADC_SetOffsetState+0x50>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d108      	bne.n	8001360 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	431a      	orrs	r2, r3
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800135e:	e007      	b.n	8001370 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	431a      	orrs	r2, r3
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	601a      	str	r2, [r3, #0]
}
 8001370:	bf00      	nop
 8001372:	371c      	adds	r7, #28
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	58026000 	.word	0x58026000

08001380 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001380:	b480      	push	{r7}
 8001382:	b087      	sub	sp, #28
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	3330      	adds	r3, #48	@ 0x30
 8001390:	461a      	mov	r2, r3
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	0a1b      	lsrs	r3, r3, #8
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	f003 030c 	and.w	r3, r3, #12
 800139c:	4413      	add	r3, r2
 800139e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	f003 031f 	and.w	r3, r3, #31
 80013aa:	211f      	movs	r1, #31
 80013ac:	fa01 f303 	lsl.w	r3, r1, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	401a      	ands	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	0e9b      	lsrs	r3, r3, #26
 80013b8:	f003 011f 	and.w	r1, r3, #31
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	f003 031f 	and.w	r3, r3, #31
 80013c2:	fa01 f303 	lsl.w	r3, r1, r3
 80013c6:	431a      	orrs	r2, r3
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80013cc:	bf00      	nop
 80013ce:	371c      	adds	r7, #28
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80013d8:	b480      	push	{r7}
 80013da:	b087      	sub	sp, #28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	3314      	adds	r3, #20
 80013e8:	461a      	mov	r2, r3
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	0e5b      	lsrs	r3, r3, #25
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	f003 0304 	and.w	r3, r3, #4
 80013f4:	4413      	add	r3, r2
 80013f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	0d1b      	lsrs	r3, r3, #20
 8001400:	f003 031f 	and.w	r3, r3, #31
 8001404:	2107      	movs	r1, #7
 8001406:	fa01 f303 	lsl.w	r3, r1, r3
 800140a:	43db      	mvns	r3, r3
 800140c:	401a      	ands	r2, r3
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	0d1b      	lsrs	r3, r3, #20
 8001412:	f003 031f 	and.w	r3, r3, #31
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	fa01 f303 	lsl.w	r3, r1, r3
 800141c:	431a      	orrs	r2, r3
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001422:	bf00      	nop
 8001424:	371c      	adds	r7, #28
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
	...

08001430 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4a1a      	ldr	r2, [pc, #104]	@ (80014a8 <LL_ADC_SetChannelSingleDiff+0x78>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d115      	bne.n	8001470 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001450:	43db      	mvns	r3, r3
 8001452:	401a      	ands	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f003 0318 	and.w	r3, r3, #24
 800145a:	4914      	ldr	r1, [pc, #80]	@ (80014ac <LL_ADC_SetChannelSingleDiff+0x7c>)
 800145c:	40d9      	lsrs	r1, r3
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	400b      	ands	r3, r1
 8001462:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001466:	431a      	orrs	r2, r3
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800146e:	e014      	b.n	800149a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800147c:	43db      	mvns	r3, r3
 800147e:	401a      	ands	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f003 0318 	and.w	r3, r3, #24
 8001486:	4909      	ldr	r1, [pc, #36]	@ (80014ac <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001488:	40d9      	lsrs	r1, r3
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	400b      	ands	r3, r1
 800148e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001492:	431a      	orrs	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 800149a:	bf00      	nop
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	58026000 	.word	0x58026000
 80014ac:	000fffff 	.word	0x000fffff

080014b0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f003 031f 	and.w	r3, r3, #31
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	4b04      	ldr	r3, [pc, #16]	@ (80014ec <LL_ADC_DisableDeepPowerDown+0x20>)
 80014da:	4013      	ands	r3, r2
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	6093      	str	r3, [r2, #8]
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	5fffffc0 	.word	0x5fffffc0

080014f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001500:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001504:	d101      	bne.n	800150a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689a      	ldr	r2, [r3, #8]
 8001524:	4b05      	ldr	r3, [pc, #20]	@ (800153c <LL_ADC_EnableInternalRegulator+0x24>)
 8001526:	4013      	ands	r3, r2
 8001528:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	6fffffc0 	.word	0x6fffffc0

08001540 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001550:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001554:	d101      	bne.n	800155a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001556:	2301      	movs	r3, #1
 8001558:	e000      	b.n	800155c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	4b05      	ldr	r3, [pc, #20]	@ (800158c <LL_ADC_Enable+0x24>)
 8001576:	4013      	ands	r3, r2
 8001578:	f043 0201 	orr.w	r2, r3, #1
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	7fffffc0 	.word	0x7fffffc0

08001590 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d101      	bne.n	80015a8 <LL_ADC_IsEnabled+0x18>
 80015a4:	2301      	movs	r3, #1
 80015a6:	e000      	b.n	80015aa <LL_ADC_IsEnabled+0x1a>
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
	...

080015b8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	4b05      	ldr	r3, [pc, #20]	@ (80015dc <LL_ADC_REG_StartConversion+0x24>)
 80015c6:	4013      	ands	r3, r2
 80015c8:	f043 0204 	orr.w	r2, r3, #4
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	7fffffc0 	.word	0x7fffffc0

080015e0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	2b04      	cmp	r3, #4
 80015f2:	d101      	bne.n	80015f8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80015f4:	2301      	movs	r3, #1
 80015f6:	e000      	b.n	80015fa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 0308 	and.w	r3, r3, #8
 8001616:	2b08      	cmp	r3, #8
 8001618:	d101      	bne.n	800161e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800162c:	b590      	push	{r4, r7, lr}
 800162e:	b089      	sub	sp, #36	@ 0x24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001634:	2300      	movs	r3, #0
 8001636:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001638:	2300      	movs	r3, #0
 800163a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e1ee      	b.n	8001a24 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001650:	2b00      	cmp	r3, #0
 8001652:	d109      	bne.n	8001668 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff f979 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ff3f 	bl	80014f0 <LL_ADC_IsDeepPowerDownEnabled>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d004      	beq.n	8001682 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff25 	bl	80014cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff ff5a 	bl	8001540 <LL_ADC_IsInternalRegulatorEnabled>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d114      	bne.n	80016bc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff ff3e 	bl	8001518 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800169c:	4b8e      	ldr	r3, [pc, #568]	@ (80018d8 <HAL_ADC_Init+0x2ac>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	099b      	lsrs	r3, r3, #6
 80016a2:	4a8e      	ldr	r2, [pc, #568]	@ (80018dc <HAL_ADC_Init+0x2b0>)
 80016a4:	fba2 2303 	umull	r2, r3, r2, r3
 80016a8:	099b      	lsrs	r3, r3, #6
 80016aa:	3301      	adds	r3, #1
 80016ac:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80016ae:	e002      	b.n	80016b6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1f9      	bne.n	80016b0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ff3d 	bl	8001540 <LL_ADC_IsInternalRegulatorEnabled>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d10d      	bne.n	80016e8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016d0:	f043 0210 	orr.w	r2, r3, #16
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80016dc:	f043 0201 	orr.w	r2, r3, #1
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ff77 	bl	80015e0 <LL_ADC_REG_IsConversionOngoing>
 80016f2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016f8:	f003 0310 	and.w	r3, r3, #16
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f040 8188 	bne.w	8001a12 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	2b00      	cmp	r3, #0
 8001706:	f040 8184 	bne.w	8001a12 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800170e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001712:	f043 0202 	orr.w	r2, r3, #2
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff ff36 	bl	8001590 <LL_ADC_IsEnabled>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d136      	bne.n	8001798 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a6c      	ldr	r2, [pc, #432]	@ (80018e0 <HAL_ADC_Init+0x2b4>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d004      	beq.n	800173e <HAL_ADC_Init+0x112>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a6a      	ldr	r2, [pc, #424]	@ (80018e4 <HAL_ADC_Init+0x2b8>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d10e      	bne.n	800175c <HAL_ADC_Init+0x130>
 800173e:	4868      	ldr	r0, [pc, #416]	@ (80018e0 <HAL_ADC_Init+0x2b4>)
 8001740:	f7ff ff26 	bl	8001590 <LL_ADC_IsEnabled>
 8001744:	4604      	mov	r4, r0
 8001746:	4867      	ldr	r0, [pc, #412]	@ (80018e4 <HAL_ADC_Init+0x2b8>)
 8001748:	f7ff ff22 	bl	8001590 <LL_ADC_IsEnabled>
 800174c:	4603      	mov	r3, r0
 800174e:	4323      	orrs	r3, r4
 8001750:	2b00      	cmp	r3, #0
 8001752:	bf0c      	ite	eq
 8001754:	2301      	moveq	r3, #1
 8001756:	2300      	movne	r3, #0
 8001758:	b2db      	uxtb	r3, r3
 800175a:	e008      	b.n	800176e <HAL_ADC_Init+0x142>
 800175c:	4862      	ldr	r0, [pc, #392]	@ (80018e8 <HAL_ADC_Init+0x2bc>)
 800175e:	f7ff ff17 	bl	8001590 <LL_ADC_IsEnabled>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	bf0c      	ite	eq
 8001768:	2301      	moveq	r3, #1
 800176a:	2300      	movne	r3, #0
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d012      	beq.n	8001798 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a5a      	ldr	r2, [pc, #360]	@ (80018e0 <HAL_ADC_Init+0x2b4>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d004      	beq.n	8001786 <HAL_ADC_Init+0x15a>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a58      	ldr	r2, [pc, #352]	@ (80018e4 <HAL_ADC_Init+0x2b8>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d101      	bne.n	800178a <HAL_ADC_Init+0x15e>
 8001786:	4a59      	ldr	r2, [pc, #356]	@ (80018ec <HAL_ADC_Init+0x2c0>)
 8001788:	e000      	b.n	800178c <HAL_ADC_Init+0x160>
 800178a:	4a59      	ldr	r2, [pc, #356]	@ (80018f0 <HAL_ADC_Init+0x2c4>)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	4619      	mov	r1, r3
 8001792:	4610      	mov	r0, r2
 8001794:	f7ff fc94 	bl	80010c0 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a52      	ldr	r2, [pc, #328]	@ (80018e8 <HAL_ADC_Init+0x2bc>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d129      	bne.n	80017f6 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	7e5b      	ldrb	r3, [r3, #25]
 80017a6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80017ac:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80017b2:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	2b08      	cmp	r3, #8
 80017ba:	d013      	beq.n	80017e4 <HAL_ADC_Init+0x1b8>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	2b0c      	cmp	r3, #12
 80017c2:	d00d      	beq.n	80017e0 <HAL_ADC_Init+0x1b4>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2b1c      	cmp	r3, #28
 80017ca:	d007      	beq.n	80017dc <HAL_ADC_Init+0x1b0>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	2b18      	cmp	r3, #24
 80017d2:	d101      	bne.n	80017d8 <HAL_ADC_Init+0x1ac>
 80017d4:	2318      	movs	r3, #24
 80017d6:	e006      	b.n	80017e6 <HAL_ADC_Init+0x1ba>
 80017d8:	2300      	movs	r3, #0
 80017da:	e004      	b.n	80017e6 <HAL_ADC_Init+0x1ba>
 80017dc:	2310      	movs	r3, #16
 80017de:	e002      	b.n	80017e6 <HAL_ADC_Init+0x1ba>
 80017e0:	2308      	movs	r3, #8
 80017e2:	e000      	b.n	80017e6 <HAL_ADC_Init+0x1ba>
 80017e4:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80017e6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017ee:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80017f0:	4313      	orrs	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
 80017f4:	e00e      	b.n	8001814 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	7e5b      	ldrb	r3, [r3, #25]
 80017fa:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001800:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001806:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800180e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 3020 	ldrb.w	r3, [r3, #32]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d106      	bne.n	800182c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001822:	3b01      	subs	r3, #1
 8001824:	045b      	lsls	r3, r3, #17
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4313      	orrs	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001830:	2b00      	cmp	r3, #0
 8001832:	d009      	beq.n	8001848 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001838:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001840:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4313      	orrs	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a26      	ldr	r2, [pc, #152]	@ (80018e8 <HAL_ADC_Init+0x2bc>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d115      	bne.n	800187e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68da      	ldr	r2, [r3, #12]
 8001858:	4b26      	ldr	r3, [pc, #152]	@ (80018f4 <HAL_ADC_Init+0x2c8>)
 800185a:	4013      	ands	r3, r2
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	6812      	ldr	r2, [r2, #0]
 8001860:	69b9      	ldr	r1, [r7, #24]
 8001862:	430b      	orrs	r3, r1
 8001864:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	430a      	orrs	r2, r1
 800187a:	611a      	str	r2, [r3, #16]
 800187c:	e009      	b.n	8001892 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68da      	ldr	r2, [r3, #12]
 8001884:	4b1c      	ldr	r3, [pc, #112]	@ (80018f8 <HAL_ADC_Init+0x2cc>)
 8001886:	4013      	ands	r3, r2
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6812      	ldr	r2, [r2, #0]
 800188c:	69b9      	ldr	r1, [r7, #24]
 800188e:	430b      	orrs	r3, r1
 8001890:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fea2 	bl	80015e0 <LL_ADC_REG_IsConversionOngoing>
 800189c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff feaf 	bl	8001606 <LL_ADC_INJ_IsConversionOngoing>
 80018a8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f040 808e 	bne.w	80019ce <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f040 808a 	bne.w	80019ce <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a0a      	ldr	r2, [pc, #40]	@ (80018e8 <HAL_ADC_Init+0x2bc>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d11b      	bne.n	80018fc <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	7e1b      	ldrb	r3, [r3, #24]
 80018c8:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80018d0:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
 80018d6:	e018      	b.n	800190a <HAL_ADC_Init+0x2de>
 80018d8:	24000000 	.word	0x24000000
 80018dc:	053e2d63 	.word	0x053e2d63
 80018e0:	40022000 	.word	0x40022000
 80018e4:	40022100 	.word	0x40022100
 80018e8:	58026000 	.word	0x58026000
 80018ec:	40022300 	.word	0x40022300
 80018f0:	58026300 	.word	0x58026300
 80018f4:	fff04007 	.word	0xfff04007
 80018f8:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	7e1b      	ldrb	r3, [r3, #24]
 8001900:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8001906:	4313      	orrs	r3, r2
 8001908:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68da      	ldr	r2, [r3, #12]
 8001910:	4b46      	ldr	r3, [pc, #280]	@ (8001a2c <HAL_ADC_Init+0x400>)
 8001912:	4013      	ands	r3, r2
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	6812      	ldr	r2, [r2, #0]
 8001918:	69b9      	ldr	r1, [r7, #24]
 800191a:	430b      	orrs	r3, r1
 800191c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001924:	2b01      	cmp	r3, #1
 8001926:	d137      	bne.n	8001998 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800192c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a3f      	ldr	r2, [pc, #252]	@ (8001a30 <HAL_ADC_Init+0x404>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d116      	bne.n	8001966 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	691a      	ldr	r2, [r3, #16]
 800193e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a34 <HAL_ADC_Init+0x408>)
 8001940:	4013      	ands	r3, r2
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800194a:	4311      	orrs	r1, r2
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001950:	4311      	orrs	r1, r2
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001956:	430a      	orrs	r2, r1
 8001958:	431a      	orrs	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f042 0201 	orr.w	r2, r2, #1
 8001962:	611a      	str	r2, [r3, #16]
 8001964:	e020      	b.n	80019a8 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	691a      	ldr	r2, [r3, #16]
 800196c:	4b32      	ldr	r3, [pc, #200]	@ (8001a38 <HAL_ADC_Init+0x40c>)
 800196e:	4013      	ands	r3, r2
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001974:	3a01      	subs	r2, #1
 8001976:	0411      	lsls	r1, r2, #16
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800197c:	4311      	orrs	r1, r2
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001982:	4311      	orrs	r1, r2
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8001988:	430a      	orrs	r2, r1
 800198a:	431a      	orrs	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f042 0201 	orr.w	r2, r2, #1
 8001994:	611a      	str	r2, [r3, #16]
 8001996:	e007      	b.n	80019a8 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	691a      	ldr	r2, [r3, #16]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 0201 	bic.w	r2, r2, #1
 80019a6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a1b      	ldr	r2, [pc, #108]	@ (8001a30 <HAL_ADC_Init+0x404>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d002      	beq.n	80019ce <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 fe6d 	bl	80026a8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d10c      	bne.n	80019f0 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019dc:	f023 010f 	bic.w	r1, r3, #15
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	1e5a      	subs	r2, r3, #1
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80019ee:	e007      	b.n	8001a00 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f022 020f 	bic.w	r2, r2, #15
 80019fe:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a04:	f023 0303 	bic.w	r3, r3, #3
 8001a08:	f043 0201 	orr.w	r2, r3, #1
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	661a      	str	r2, [r3, #96]	@ 0x60
 8001a10:	e007      	b.n	8001a22 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a16:	f043 0210 	orr.w	r2, r3, #16
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a22:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3724      	adds	r7, #36	@ 0x24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd90      	pop	{r4, r7, pc}
 8001a2c:	ffffbffc 	.word	0xffffbffc
 8001a30:	58026000 	.word	0x58026000
 8001a34:	fc00f81f 	.word	0xfc00f81f
 8001a38:	fc00f81e 	.word	0xfc00f81e

08001a3c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a5c      	ldr	r2, [pc, #368]	@ (8001bbc <HAL_ADC_Start+0x180>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d004      	beq.n	8001a58 <HAL_ADC_Start+0x1c>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a5b      	ldr	r2, [pc, #364]	@ (8001bc0 <HAL_ADC_Start+0x184>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d101      	bne.n	8001a5c <HAL_ADC_Start+0x20>
 8001a58:	4b5a      	ldr	r3, [pc, #360]	@ (8001bc4 <HAL_ADC_Start+0x188>)
 8001a5a:	e000      	b.n	8001a5e <HAL_ADC_Start+0x22>
 8001a5c:	4b5a      	ldr	r3, [pc, #360]	@ (8001bc8 <HAL_ADC_Start+0x18c>)
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff fd26 	bl	80014b0 <LL_ADC_GetMultimode>
 8001a64:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff fdb8 	bl	80015e0 <LL_ADC_REG_IsConversionOngoing>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f040 809a 	bne.w	8001bac <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d101      	bne.n	8001a86 <HAL_ADC_Start+0x4a>
 8001a82:	2302      	movs	r3, #2
 8001a84:	e095      	b.n	8001bb2 <HAL_ADC_Start+0x176>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 fd80 	bl	8002594 <ADC_Enable>
 8001a94:	4603      	mov	r3, r0
 8001a96:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a98:	7dfb      	ldrb	r3, [r7, #23]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f040 8081 	bne.w	8001ba2 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001aa4:	4b49      	ldr	r3, [pc, #292]	@ (8001bcc <HAL_ADC_Start+0x190>)
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a42      	ldr	r2, [pc, #264]	@ (8001bc0 <HAL_ADC_Start+0x184>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d002      	beq.n	8001ac0 <HAL_ADC_Start+0x84>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	e000      	b.n	8001ac2 <HAL_ADC_Start+0x86>
 8001ac0:	4b3e      	ldr	r3, [pc, #248]	@ (8001bbc <HAL_ADC_Start+0x180>)
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	6812      	ldr	r2, [r2, #0]
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d002      	beq.n	8001ad0 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d105      	bne.n	8001adc <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ad4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ae0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ae4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ae8:	d106      	bne.n	8001af8 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001aee:	f023 0206 	bic.w	r2, r3, #6
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	665a      	str	r2, [r3, #100]	@ 0x64
 8001af6:	e002      	b.n	8001afe <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	221c      	movs	r2, #28
 8001b04:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a2b      	ldr	r2, [pc, #172]	@ (8001bc0 <HAL_ADC_Start+0x184>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d002      	beq.n	8001b1e <HAL_ADC_Start+0xe2>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	e000      	b.n	8001b20 <HAL_ADC_Start+0xe4>
 8001b1e:	4b27      	ldr	r3, [pc, #156]	@ (8001bbc <HAL_ADC_Start+0x180>)
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	6812      	ldr	r2, [r2, #0]
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d008      	beq.n	8001b3a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d005      	beq.n	8001b3a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	2b05      	cmp	r3, #5
 8001b32:	d002      	beq.n	8001b3a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	2b09      	cmp	r3, #9
 8001b38:	d114      	bne.n	8001b64 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d007      	beq.n	8001b58 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b4c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b50:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fd2b 	bl	80015b8 <LL_ADC_REG_StartConversion>
 8001b62:	e025      	b.n	8001bb0 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b68:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a12      	ldr	r2, [pc, #72]	@ (8001bc0 <HAL_ADC_Start+0x184>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d002      	beq.n	8001b80 <HAL_ADC_Start+0x144>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	e000      	b.n	8001b82 <HAL_ADC_Start+0x146>
 8001b80:	4b0e      	ldr	r3, [pc, #56]	@ (8001bbc <HAL_ADC_Start+0x180>)
 8001b82:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d00f      	beq.n	8001bb0 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b94:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b98:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	661a      	str	r2, [r3, #96]	@ 0x60
 8001ba0:	e006      	b.n	8001bb0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8001baa:	e001      	b.n	8001bb0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001bac:	2302      	movs	r3, #2
 8001bae:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3718      	adds	r7, #24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40022000 	.word	0x40022000
 8001bc0:	40022100 	.word	0x40022100
 8001bc4:	40022300 	.word	0x40022300
 8001bc8:	58026300 	.word	0x58026300
 8001bcc:	fffff0fe 	.word	0xfffff0fe

08001bd0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
	...

08001bec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001bec:	b590      	push	{r4, r7, lr}
 8001bee:	b0a5      	sub	sp, #148	@ 0x94
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001c06:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	4aa4      	ldr	r2, [pc, #656]	@ (8001ea0 <HAL_ADC_ConfigChannel+0x2b4>)
 8001c0e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d102      	bne.n	8001c20 <HAL_ADC_ConfigChannel+0x34>
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	f000 bca2 	b.w	8002564 <HAL_ADC_ConfigChannel+0x978>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fcd7 	bl	80015e0 <LL_ADC_REG_IsConversionOngoing>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f040 8486 	bne.w	8002546 <HAL_ADC_ConfigChannel+0x95a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	db31      	blt.n	8001ca6 <HAL_ADC_ConfigChannel+0xba>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a97      	ldr	r2, [pc, #604]	@ (8001ea4 <HAL_ADC_ConfigChannel+0x2b8>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d02c      	beq.n	8001ca6 <HAL_ADC_ConfigChannel+0xba>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d108      	bne.n	8001c6a <HAL_ADC_ConfigChannel+0x7e>
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	0e9b      	lsrs	r3, r3, #26
 8001c5e:	f003 031f 	and.w	r3, r3, #31
 8001c62:	2201      	movs	r2, #1
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	e016      	b.n	8001c98 <HAL_ADC_ConfigChannel+0xac>
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c72:	fa93 f3a3 	rbit	r3, r3
 8001c76:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001c78:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001c7a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001c7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <HAL_ADC_ConfigChannel+0x9a>
    return 32U;
 8001c82:	2320      	movs	r3, #32
 8001c84:	e003      	b.n	8001c8e <HAL_ADC_ConfigChannel+0xa2>
  return __builtin_clz(value);
 8001c86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001c88:	fab3 f383 	clz	r3, r3
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	f003 031f 	and.w	r3, r3, #31
 8001c92:	2201      	movs	r2, #1
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	6812      	ldr	r2, [r2, #0]
 8001c9c:	69d1      	ldr	r1, [r2, #28]
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6812      	ldr	r2, [r2, #0]
 8001ca2:	430b      	orrs	r3, r1
 8001ca4:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6818      	ldr	r0, [r3, #0]
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	6859      	ldr	r1, [r3, #4]
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	f7ff fb64 	bl	8001380 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff fc8f 	bl	80015e0 <LL_ADC_REG_IsConversionOngoing>
 8001cc2:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fc9b 	bl	8001606 <LL_ADC_INJ_IsConversionOngoing>
 8001cd0:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f040 824a 	bne.w	8002172 <HAL_ADC_ConfigChannel+0x586>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cde:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f040 8245 	bne.w	8002172 <HAL_ADC_ConfigChannel+0x586>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6818      	ldr	r0, [r3, #0]
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	6819      	ldr	r1, [r3, #0]
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	f7ff fb6f 	bl	80013d8 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a69      	ldr	r2, [pc, #420]	@ (8001ea4 <HAL_ADC_ConfigChannel+0x2b8>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d10d      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x134>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	695a      	ldr	r2, [r3, #20]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	08db      	lsrs	r3, r3, #3
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001d1e:	e032      	b.n	8001d86 <HAL_ADC_ConfigChannel+0x19a>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001d20:	4b61      	ldr	r3, [pc, #388]	@ (8001ea8 <HAL_ADC_ConfigChannel+0x2bc>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001d28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001d2c:	d10b      	bne.n	8001d46 <HAL_ADC_ConfigChannel+0x15a>
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	695a      	ldr	r2, [r3, #20]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	089b      	lsrs	r3, r3, #2
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	e01d      	b.n	8001d82 <HAL_ADC_ConfigChannel+0x196>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	f003 0310 	and.w	r3, r3, #16
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10b      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x180>
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	695a      	ldr	r2, [r3, #20]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	089b      	lsrs	r3, r3, #2
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	e00a      	b.n	8001d82 <HAL_ADC_ConfigChannel+0x196>
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	695a      	ldr	r2, [r3, #20]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	089b      	lsrs	r3, r3, #2
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	d048      	beq.n	8001e20 <HAL_ADC_ConfigChannel+0x234>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6818      	ldr	r0, [r3, #0]
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	6919      	ldr	r1, [r3, #16]
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d9e:	f7ff f9fd 	bl	800119c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a3f      	ldr	r2, [pc, #252]	@ (8001ea4 <HAL_ADC_ConfigChannel+0x2b8>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d119      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6818      	ldr	r0, [r3, #0]
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	6919      	ldr	r1, [r3, #16]
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	69db      	ldr	r3, [r3, #28]
 8001db8:	461a      	mov	r2, r3
 8001dba:	f7ff fa95 	bl	80012e8 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6818      	ldr	r0, [r3, #0]
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	6919      	ldr	r1, [r3, #16]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d102      	bne.n	8001dd6 <HAL_ADC_ConfigChannel+0x1ea>
 8001dd0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001dd4:	e000      	b.n	8001dd8 <HAL_ADC_ConfigChannel+0x1ec>
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	461a      	mov	r2, r3
 8001dda:	f7ff fa63 	bl	80012a4 <LL_ADC_SetOffsetSaturation>
 8001dde:	e1c8      	b.n	8002172 <HAL_ADC_ConfigChannel+0x586>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6818      	ldr	r0, [r3, #0]
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	6919      	ldr	r1, [r3, #16]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d102      	bne.n	8001df8 <HAL_ADC_ConfigChannel+0x20c>
 8001df2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001df6:	e000      	b.n	8001dfa <HAL_ADC_ConfigChannel+0x20e>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	f7ff fa30 	bl	8001260 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6818      	ldr	r0, [r3, #0]
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	6919      	ldr	r1, [r3, #16]
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	7e1b      	ldrb	r3, [r3, #24]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d102      	bne.n	8001e16 <HAL_ADC_ConfigChannel+0x22a>
 8001e10:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001e14:	e000      	b.n	8001e18 <HAL_ADC_ConfigChannel+0x22c>
 8001e16:	2300      	movs	r3, #0
 8001e18:	461a      	mov	r2, r3
 8001e1a:	f7ff fa07 	bl	800122c <LL_ADC_SetDataRightShift>
 8001e1e:	e1a8      	b.n	8002172 <HAL_ADC_ConfigChannel+0x586>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a1f      	ldr	r2, [pc, #124]	@ (8001ea4 <HAL_ADC_ConfigChannel+0x2b8>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	f040 815b 	bne.w	80020e2 <HAL_ADC_ConfigChannel+0x4f6>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2100      	movs	r1, #0
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff f9e4 	bl	8001200 <LL_ADC_GetOffsetChannel>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10a      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x26c>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2100      	movs	r1, #0
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff f9d9 	bl	8001200 <LL_ADC_GetOffsetChannel>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	0e9b      	lsrs	r3, r3, #26
 8001e52:	f003 021f 	and.w	r2, r3, #31
 8001e56:	e017      	b.n	8001e88 <HAL_ADC_ConfigChannel+0x29c>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff f9ce 	bl	8001200 <LL_ADC_GetOffsetChannel>
 8001e64:	4603      	mov	r3, r0
 8001e66:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e6a:	fa93 f3a3 	rbit	r3, r3
 8001e6e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001e70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e72:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001e74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001e7a:	2320      	movs	r3, #32
 8001e7c:	e003      	b.n	8001e86 <HAL_ADC_ConfigChannel+0x29a>
  return __builtin_clz(value);
 8001e7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e80:	fab3 f383 	clz	r3, r3
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	461a      	mov	r2, r3
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d10b      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x2c0>
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	0e9b      	lsrs	r3, r3, #26
 8001e9a:	f003 031f 	and.w	r3, r3, #31
 8001e9e:	e017      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x2e4>
 8001ea0:	47ff0000 	.word	0x47ff0000
 8001ea4:	58026000 	.word	0x58026000
 8001ea8:	5c001000 	.word	0x5c001000
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001eb4:	fa93 f3a3 	rbit	r3, r3
 8001eb8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001eba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ebc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001ebe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 8001ec4:	2320      	movs	r3, #32
 8001ec6:	e003      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 8001ec8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001eca:	fab3 f383 	clz	r3, r3
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d106      	bne.n	8001ee2 <HAL_ADC_ConfigChannel+0x2f6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2100      	movs	r1, #0
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff fa25 	bl	800132c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff f989 	bl	8001200 <LL_ADC_GetOffsetChannel>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10a      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x322>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2101      	movs	r1, #1
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff f97e 	bl	8001200 <LL_ADC_GetOffsetChannel>
 8001f04:	4603      	mov	r3, r0
 8001f06:	0e9b      	lsrs	r3, r3, #26
 8001f08:	f003 021f 	and.w	r2, r3, #31
 8001f0c:	e017      	b.n	8001f3e <HAL_ADC_ConfigChannel+0x352>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2101      	movs	r1, #1
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff f973 	bl	8001200 <LL_ADC_GetOffsetChannel>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f20:	fa93 f3a3 	rbit	r3, r3
 8001f24:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001f26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f28:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001f2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x348>
    return 32U;
 8001f30:	2320      	movs	r3, #32
 8001f32:	e003      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 8001f34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f36:	fab3 f383 	clz	r3, r3
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d105      	bne.n	8001f56 <HAL_ADC_ConfigChannel+0x36a>
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	0e9b      	lsrs	r3, r3, #26
 8001f50:	f003 031f 	and.w	r3, r3, #31
 8001f54:	e011      	b.n	8001f7a <HAL_ADC_ConfigChannel+0x38e>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f5e:	fa93 f3a3 	rbit	r3, r3
 8001f62:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001f64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f66:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001f68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8001f6e:	2320      	movs	r3, #32
 8001f70:	e003      	b.n	8001f7a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001f72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f74:	fab3 f383 	clz	r3, r3
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d106      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x3a0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2200      	movs	r2, #0
 8001f84:	2101      	movs	r1, #1
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff f9d0 	bl	800132c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2102      	movs	r1, #2
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff f934 	bl	8001200 <LL_ADC_GetOffsetChannel>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d10a      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x3cc>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2102      	movs	r1, #2
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff f929 	bl	8001200 <LL_ADC_GetOffsetChannel>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	0e9b      	lsrs	r3, r3, #26
 8001fb2:	f003 021f 	and.w	r2, r3, #31
 8001fb6:	e017      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x3fc>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2102      	movs	r1, #2
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff f91e 	bl	8001200 <LL_ADC_GetOffsetChannel>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fca:	fa93 f3a3 	rbit	r3, r3
 8001fce:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8001fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001fd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001fda:	2320      	movs	r3, #32
 8001fdc:	e003      	b.n	8001fe6 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001fde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fe0:	fab3 f383 	clz	r3, r3
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d105      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x414>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	0e9b      	lsrs	r3, r3, #26
 8001ffa:	f003 031f 	and.w	r3, r3, #31
 8001ffe:	e011      	b.n	8002024 <HAL_ADC_ConfigChannel+0x438>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002008:	fa93 f3a3 	rbit	r3, r3
 800200c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800200e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002010:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002018:	2320      	movs	r3, #32
 800201a:	e003      	b.n	8002024 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800201c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800201e:	fab3 f383 	clz	r3, r3
 8002022:	b2db      	uxtb	r3, r3
 8002024:	429a      	cmp	r2, r3
 8002026:	d106      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x44a>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2200      	movs	r2, #0
 800202e:	2102      	movs	r1, #2
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff f97b 	bl	800132c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2103      	movs	r1, #3
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff f8df 	bl	8001200 <LL_ADC_GetOffsetChannel>
 8002042:	4603      	mov	r3, r0
 8002044:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002048:	2b00      	cmp	r3, #0
 800204a:	d10a      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x476>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2103      	movs	r1, #3
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff f8d4 	bl	8001200 <LL_ADC_GetOffsetChannel>
 8002058:	4603      	mov	r3, r0
 800205a:	0e9b      	lsrs	r3, r3, #26
 800205c:	f003 021f 	and.w	r2, r3, #31
 8002060:	e017      	b.n	8002092 <HAL_ADC_ConfigChannel+0x4a6>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2103      	movs	r1, #3
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff f8c9 	bl	8001200 <LL_ADC_GetOffsetChannel>
 800206e:	4603      	mov	r3, r0
 8002070:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	fa93 f3a3 	rbit	r3, r3
 8002078:	61fb      	str	r3, [r7, #28]
  return result;
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800207e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002084:	2320      	movs	r3, #32
 8002086:	e003      	b.n	8002090 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208a:	fab3 f383 	clz	r3, r3
 800208e:	b2db      	uxtb	r3, r3
 8002090:	461a      	mov	r2, r3
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800209a:	2b00      	cmp	r3, #0
 800209c:	d105      	bne.n	80020aa <HAL_ADC_ConfigChannel+0x4be>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	0e9b      	lsrs	r3, r3, #26
 80020a4:	f003 031f 	and.w	r3, r3, #31
 80020a8:	e011      	b.n	80020ce <HAL_ADC_ConfigChannel+0x4e2>
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	fa93 f3a3 	rbit	r3, r3
 80020b6:	613b      	str	r3, [r7, #16]
  return result;
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 80020c2:	2320      	movs	r3, #32
 80020c4:	e003      	b.n	80020ce <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	fab3 f383 	clz	r3, r3
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d14f      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x586>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2200      	movs	r2, #0
 80020d8:	2103      	movs	r1, #3
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff f926 	bl	800132c <LL_ADC_SetOffsetState>
 80020e0:	e047      	b.n	8002172 <HAL_ADC_ConfigChannel+0x586>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020e8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	069b      	lsls	r3, r3, #26
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d107      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x51a>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002104:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800210c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	069b      	lsls	r3, r3, #26
 8002116:	429a      	cmp	r2, r3
 8002118:	d107      	bne.n	800212a <HAL_ADC_ConfigChannel+0x53e>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002128:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002130:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	069b      	lsls	r3, r3, #26
 800213a:	429a      	cmp	r2, r3
 800213c:	d107      	bne.n	800214e <HAL_ADC_ConfigChannel+0x562>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800214c:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002154:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	069b      	lsls	r3, r3, #26
 800215e:	429a      	cmp	r2, r3
 8002160:	d107      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x586>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002170:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff fa0a 	bl	8001590 <LL_ADC_IsEnabled>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	f040 81ea 	bne.w	8002558 <HAL_ADC_ConfigChannel+0x96c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6818      	ldr	r0, [r3, #0]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	6819      	ldr	r1, [r3, #0]
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	461a      	mov	r2, r3
 8002192:	f7ff f94d 	bl	8001430 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	4a7a      	ldr	r2, [pc, #488]	@ (8002384 <HAL_ADC_ConfigChannel+0x798>)
 800219c:	4293      	cmp	r3, r2
 800219e:	f040 80e0 	bne.w	8002362 <HAL_ADC_ConfigChannel+0x776>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4977      	ldr	r1, [pc, #476]	@ (8002388 <HAL_ADC_ConfigChannel+0x79c>)
 80021ac:	428b      	cmp	r3, r1
 80021ae:	d147      	bne.n	8002240 <HAL_ADC_ConfigChannel+0x654>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4975      	ldr	r1, [pc, #468]	@ (800238c <HAL_ADC_ConfigChannel+0x7a0>)
 80021b6:	428b      	cmp	r3, r1
 80021b8:	d040      	beq.n	800223c <HAL_ADC_ConfigChannel+0x650>
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4974      	ldr	r1, [pc, #464]	@ (8002390 <HAL_ADC_ConfigChannel+0x7a4>)
 80021c0:	428b      	cmp	r3, r1
 80021c2:	d039      	beq.n	8002238 <HAL_ADC_ConfigChannel+0x64c>
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4972      	ldr	r1, [pc, #456]	@ (8002394 <HAL_ADC_ConfigChannel+0x7a8>)
 80021ca:	428b      	cmp	r3, r1
 80021cc:	d032      	beq.n	8002234 <HAL_ADC_ConfigChannel+0x648>
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4971      	ldr	r1, [pc, #452]	@ (8002398 <HAL_ADC_ConfigChannel+0x7ac>)
 80021d4:	428b      	cmp	r3, r1
 80021d6:	d02b      	beq.n	8002230 <HAL_ADC_ConfigChannel+0x644>
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	496f      	ldr	r1, [pc, #444]	@ (800239c <HAL_ADC_ConfigChannel+0x7b0>)
 80021de:	428b      	cmp	r3, r1
 80021e0:	d024      	beq.n	800222c <HAL_ADC_ConfigChannel+0x640>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	496e      	ldr	r1, [pc, #440]	@ (80023a0 <HAL_ADC_ConfigChannel+0x7b4>)
 80021e8:	428b      	cmp	r3, r1
 80021ea:	d01d      	beq.n	8002228 <HAL_ADC_ConfigChannel+0x63c>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	496c      	ldr	r1, [pc, #432]	@ (80023a4 <HAL_ADC_ConfigChannel+0x7b8>)
 80021f2:	428b      	cmp	r3, r1
 80021f4:	d016      	beq.n	8002224 <HAL_ADC_ConfigChannel+0x638>
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	496b      	ldr	r1, [pc, #428]	@ (80023a8 <HAL_ADC_ConfigChannel+0x7bc>)
 80021fc:	428b      	cmp	r3, r1
 80021fe:	d00f      	beq.n	8002220 <HAL_ADC_ConfigChannel+0x634>
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4969      	ldr	r1, [pc, #420]	@ (80023ac <HAL_ADC_ConfigChannel+0x7c0>)
 8002206:	428b      	cmp	r3, r1
 8002208:	d008      	beq.n	800221c <HAL_ADC_ConfigChannel+0x630>
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4968      	ldr	r1, [pc, #416]	@ (80023b0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002210:	428b      	cmp	r3, r1
 8002212:	d101      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x62c>
 8002214:	4b67      	ldr	r3, [pc, #412]	@ (80023b4 <HAL_ADC_ConfigChannel+0x7c8>)
 8002216:	e0a0      	b.n	800235a <HAL_ADC_ConfigChannel+0x76e>
 8002218:	2300      	movs	r3, #0
 800221a:	e09e      	b.n	800235a <HAL_ADC_ConfigChannel+0x76e>
 800221c:	4b66      	ldr	r3, [pc, #408]	@ (80023b8 <HAL_ADC_ConfigChannel+0x7cc>)
 800221e:	e09c      	b.n	800235a <HAL_ADC_ConfigChannel+0x76e>
 8002220:	4b66      	ldr	r3, [pc, #408]	@ (80023bc <HAL_ADC_ConfigChannel+0x7d0>)
 8002222:	e09a      	b.n	800235a <HAL_ADC_ConfigChannel+0x76e>
 8002224:	4b60      	ldr	r3, [pc, #384]	@ (80023a8 <HAL_ADC_ConfigChannel+0x7bc>)
 8002226:	e098      	b.n	800235a <HAL_ADC_ConfigChannel+0x76e>
 8002228:	4b5e      	ldr	r3, [pc, #376]	@ (80023a4 <HAL_ADC_ConfigChannel+0x7b8>)
 800222a:	e096      	b.n	800235a <HAL_ADC_ConfigChannel+0x76e>
 800222c:	4b64      	ldr	r3, [pc, #400]	@ (80023c0 <HAL_ADC_ConfigChannel+0x7d4>)
 800222e:	e094      	b.n	800235a <HAL_ADC_ConfigChannel+0x76e>
 8002230:	4b64      	ldr	r3, [pc, #400]	@ (80023c4 <HAL_ADC_ConfigChannel+0x7d8>)
 8002232:	e092      	b.n	800235a <HAL_ADC_ConfigChannel+0x76e>
 8002234:	4b64      	ldr	r3, [pc, #400]	@ (80023c8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002236:	e090      	b.n	800235a <HAL_ADC_ConfigChannel+0x76e>
 8002238:	4b64      	ldr	r3, [pc, #400]	@ (80023cc <HAL_ADC_ConfigChannel+0x7e0>)
 800223a:	e08e      	b.n	800235a <HAL_ADC_ConfigChannel+0x76e>
 800223c:	2301      	movs	r3, #1
 800223e:	e08c      	b.n	800235a <HAL_ADC_ConfigChannel+0x76e>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4962      	ldr	r1, [pc, #392]	@ (80023d0 <HAL_ADC_ConfigChannel+0x7e4>)
 8002246:	428b      	cmp	r3, r1
 8002248:	d140      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x6e0>
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	494f      	ldr	r1, [pc, #316]	@ (800238c <HAL_ADC_ConfigChannel+0x7a0>)
 8002250:	428b      	cmp	r3, r1
 8002252:	d039      	beq.n	80022c8 <HAL_ADC_ConfigChannel+0x6dc>
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	494d      	ldr	r1, [pc, #308]	@ (8002390 <HAL_ADC_ConfigChannel+0x7a4>)
 800225a:	428b      	cmp	r3, r1
 800225c:	d032      	beq.n	80022c4 <HAL_ADC_ConfigChannel+0x6d8>
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	494c      	ldr	r1, [pc, #304]	@ (8002394 <HAL_ADC_ConfigChannel+0x7a8>)
 8002264:	428b      	cmp	r3, r1
 8002266:	d02b      	beq.n	80022c0 <HAL_ADC_ConfigChannel+0x6d4>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	494a      	ldr	r1, [pc, #296]	@ (8002398 <HAL_ADC_ConfigChannel+0x7ac>)
 800226e:	428b      	cmp	r3, r1
 8002270:	d024      	beq.n	80022bc <HAL_ADC_ConfigChannel+0x6d0>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4949      	ldr	r1, [pc, #292]	@ (800239c <HAL_ADC_ConfigChannel+0x7b0>)
 8002278:	428b      	cmp	r3, r1
 800227a:	d01d      	beq.n	80022b8 <HAL_ADC_ConfigChannel+0x6cc>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4947      	ldr	r1, [pc, #284]	@ (80023a0 <HAL_ADC_ConfigChannel+0x7b4>)
 8002282:	428b      	cmp	r3, r1
 8002284:	d016      	beq.n	80022b4 <HAL_ADC_ConfigChannel+0x6c8>
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4946      	ldr	r1, [pc, #280]	@ (80023a4 <HAL_ADC_ConfigChannel+0x7b8>)
 800228c:	428b      	cmp	r3, r1
 800228e:	d00f      	beq.n	80022b0 <HAL_ADC_ConfigChannel+0x6c4>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4944      	ldr	r1, [pc, #272]	@ (80023a8 <HAL_ADC_ConfigChannel+0x7bc>)
 8002296:	428b      	cmp	r3, r1
 8002298:	d008      	beq.n	80022ac <HAL_ADC_ConfigChannel+0x6c0>
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4944      	ldr	r1, [pc, #272]	@ (80023b0 <HAL_ADC_ConfigChannel+0x7c4>)
 80022a0:	428b      	cmp	r3, r1
 80022a2:	d101      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x6bc>
 80022a4:	4b43      	ldr	r3, [pc, #268]	@ (80023b4 <HAL_ADC_ConfigChannel+0x7c8>)
 80022a6:	e058      	b.n	800235a <HAL_ADC_ConfigChannel+0x76e>
 80022a8:	2300      	movs	r3, #0
 80022aa:	e056      	b.n	800235a <HAL_ADC_ConfigChannel+0x76e>
 80022ac:	4b43      	ldr	r3, [pc, #268]	@ (80023bc <HAL_ADC_ConfigChannel+0x7d0>)
 80022ae:	e054      	b.n	800235a <HAL_ADC_ConfigChannel+0x76e>
 80022b0:	4b3d      	ldr	r3, [pc, #244]	@ (80023a8 <HAL_ADC_ConfigChannel+0x7bc>)
 80022b2:	e052      	b.n	800235a <HAL_ADC_ConfigChannel+0x76e>
 80022b4:	4b3b      	ldr	r3, [pc, #236]	@ (80023a4 <HAL_ADC_ConfigChannel+0x7b8>)
 80022b6:	e050      	b.n	800235a <HAL_ADC_ConfigChannel+0x76e>
 80022b8:	4b41      	ldr	r3, [pc, #260]	@ (80023c0 <HAL_ADC_ConfigChannel+0x7d4>)
 80022ba:	e04e      	b.n	800235a <HAL_ADC_ConfigChannel+0x76e>
 80022bc:	4b41      	ldr	r3, [pc, #260]	@ (80023c4 <HAL_ADC_ConfigChannel+0x7d8>)
 80022be:	e04c      	b.n	800235a <HAL_ADC_ConfigChannel+0x76e>
 80022c0:	4b41      	ldr	r3, [pc, #260]	@ (80023c8 <HAL_ADC_ConfigChannel+0x7dc>)
 80022c2:	e04a      	b.n	800235a <HAL_ADC_ConfigChannel+0x76e>
 80022c4:	4b41      	ldr	r3, [pc, #260]	@ (80023cc <HAL_ADC_ConfigChannel+0x7e0>)
 80022c6:	e048      	b.n	800235a <HAL_ADC_ConfigChannel+0x76e>
 80022c8:	2301      	movs	r3, #1
 80022ca:	e046      	b.n	800235a <HAL_ADC_ConfigChannel+0x76e>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4940      	ldr	r1, [pc, #256]	@ (80023d4 <HAL_ADC_ConfigChannel+0x7e8>)
 80022d2:	428b      	cmp	r3, r1
 80022d4:	d140      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x76c>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	492c      	ldr	r1, [pc, #176]	@ (800238c <HAL_ADC_ConfigChannel+0x7a0>)
 80022dc:	428b      	cmp	r3, r1
 80022de:	d039      	beq.n	8002354 <HAL_ADC_ConfigChannel+0x768>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	492a      	ldr	r1, [pc, #168]	@ (8002390 <HAL_ADC_ConfigChannel+0x7a4>)
 80022e6:	428b      	cmp	r3, r1
 80022e8:	d032      	beq.n	8002350 <HAL_ADC_ConfigChannel+0x764>
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4929      	ldr	r1, [pc, #164]	@ (8002394 <HAL_ADC_ConfigChannel+0x7a8>)
 80022f0:	428b      	cmp	r3, r1
 80022f2:	d02b      	beq.n	800234c <HAL_ADC_ConfigChannel+0x760>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4927      	ldr	r1, [pc, #156]	@ (8002398 <HAL_ADC_ConfigChannel+0x7ac>)
 80022fa:	428b      	cmp	r3, r1
 80022fc:	d024      	beq.n	8002348 <HAL_ADC_ConfigChannel+0x75c>
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4926      	ldr	r1, [pc, #152]	@ (800239c <HAL_ADC_ConfigChannel+0x7b0>)
 8002304:	428b      	cmp	r3, r1
 8002306:	d01d      	beq.n	8002344 <HAL_ADC_ConfigChannel+0x758>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4924      	ldr	r1, [pc, #144]	@ (80023a0 <HAL_ADC_ConfigChannel+0x7b4>)
 800230e:	428b      	cmp	r3, r1
 8002310:	d016      	beq.n	8002340 <HAL_ADC_ConfigChannel+0x754>
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4923      	ldr	r1, [pc, #140]	@ (80023a4 <HAL_ADC_ConfigChannel+0x7b8>)
 8002318:	428b      	cmp	r3, r1
 800231a:	d00f      	beq.n	800233c <HAL_ADC_ConfigChannel+0x750>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4926      	ldr	r1, [pc, #152]	@ (80023bc <HAL_ADC_ConfigChannel+0x7d0>)
 8002322:	428b      	cmp	r3, r1
 8002324:	d008      	beq.n	8002338 <HAL_ADC_ConfigChannel+0x74c>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	492b      	ldr	r1, [pc, #172]	@ (80023d8 <HAL_ADC_ConfigChannel+0x7ec>)
 800232c:	428b      	cmp	r3, r1
 800232e:	d101      	bne.n	8002334 <HAL_ADC_ConfigChannel+0x748>
 8002330:	4b2a      	ldr	r3, [pc, #168]	@ (80023dc <HAL_ADC_ConfigChannel+0x7f0>)
 8002332:	e012      	b.n	800235a <HAL_ADC_ConfigChannel+0x76e>
 8002334:	2300      	movs	r3, #0
 8002336:	e010      	b.n	800235a <HAL_ADC_ConfigChannel+0x76e>
 8002338:	4b27      	ldr	r3, [pc, #156]	@ (80023d8 <HAL_ADC_ConfigChannel+0x7ec>)
 800233a:	e00e      	b.n	800235a <HAL_ADC_ConfigChannel+0x76e>
 800233c:	4b1a      	ldr	r3, [pc, #104]	@ (80023a8 <HAL_ADC_ConfigChannel+0x7bc>)
 800233e:	e00c      	b.n	800235a <HAL_ADC_ConfigChannel+0x76e>
 8002340:	4b18      	ldr	r3, [pc, #96]	@ (80023a4 <HAL_ADC_ConfigChannel+0x7b8>)
 8002342:	e00a      	b.n	800235a <HAL_ADC_ConfigChannel+0x76e>
 8002344:	4b1e      	ldr	r3, [pc, #120]	@ (80023c0 <HAL_ADC_ConfigChannel+0x7d4>)
 8002346:	e008      	b.n	800235a <HAL_ADC_ConfigChannel+0x76e>
 8002348:	4b1e      	ldr	r3, [pc, #120]	@ (80023c4 <HAL_ADC_ConfigChannel+0x7d8>)
 800234a:	e006      	b.n	800235a <HAL_ADC_ConfigChannel+0x76e>
 800234c:	4b1e      	ldr	r3, [pc, #120]	@ (80023c8 <HAL_ADC_ConfigChannel+0x7dc>)
 800234e:	e004      	b.n	800235a <HAL_ADC_ConfigChannel+0x76e>
 8002350:	4b1e      	ldr	r3, [pc, #120]	@ (80023cc <HAL_ADC_ConfigChannel+0x7e0>)
 8002352:	e002      	b.n	800235a <HAL_ADC_ConfigChannel+0x76e>
 8002354:	2301      	movs	r3, #1
 8002356:	e000      	b.n	800235a <HAL_ADC_ConfigChannel+0x76e>
 8002358:	2300      	movs	r3, #0
 800235a:	4619      	mov	r1, r3
 800235c:	4610      	mov	r0, r2
 800235e:	f7fe fee3 	bl	8001128 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	f280 80f6 	bge.w	8002558 <HAL_ADC_ConfigChannel+0x96c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a05      	ldr	r2, [pc, #20]	@ (8002388 <HAL_ADC_ConfigChannel+0x79c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d004      	beq.n	8002380 <HAL_ADC_ConfigChannel+0x794>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a15      	ldr	r2, [pc, #84]	@ (80023d0 <HAL_ADC_ConfigChannel+0x7e4>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d131      	bne.n	80023e4 <HAL_ADC_ConfigChannel+0x7f8>
 8002380:	4b17      	ldr	r3, [pc, #92]	@ (80023e0 <HAL_ADC_ConfigChannel+0x7f4>)
 8002382:	e030      	b.n	80023e6 <HAL_ADC_ConfigChannel+0x7fa>
 8002384:	47ff0000 	.word	0x47ff0000
 8002388:	40022000 	.word	0x40022000
 800238c:	04300002 	.word	0x04300002
 8002390:	08600004 	.word	0x08600004
 8002394:	0c900008 	.word	0x0c900008
 8002398:	10c00010 	.word	0x10c00010
 800239c:	14f00020 	.word	0x14f00020
 80023a0:	2a000400 	.word	0x2a000400
 80023a4:	2e300800 	.word	0x2e300800
 80023a8:	32601000 	.word	0x32601000
 80023ac:	43210000 	.word	0x43210000
 80023b0:	4b840000 	.word	0x4b840000
 80023b4:	4fb80000 	.word	0x4fb80000
 80023b8:	47520000 	.word	0x47520000
 80023bc:	36902000 	.word	0x36902000
 80023c0:	25b00200 	.word	0x25b00200
 80023c4:	21800100 	.word	0x21800100
 80023c8:	1d500080 	.word	0x1d500080
 80023cc:	19200040 	.word	0x19200040
 80023d0:	40022100 	.word	0x40022100
 80023d4:	58026000 	.word	0x58026000
 80023d8:	3ac04000 	.word	0x3ac04000
 80023dc:	3ef08000 	.word	0x3ef08000
 80023e0:	40022300 	.word	0x40022300
 80023e4:	4b61      	ldr	r3, [pc, #388]	@ (800256c <HAL_ADC_ConfigChannel+0x980>)
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe fe90 	bl	800110c <LL_ADC_GetCommonPathInternalCh>
 80023ec:	67f8      	str	r0, [r7, #124]	@ 0x7c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a5f      	ldr	r2, [pc, #380]	@ (8002570 <HAL_ADC_ConfigChannel+0x984>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d004      	beq.n	8002402 <HAL_ADC_ConfigChannel+0x816>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a5d      	ldr	r2, [pc, #372]	@ (8002574 <HAL_ADC_ConfigChannel+0x988>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d10e      	bne.n	8002420 <HAL_ADC_ConfigChannel+0x834>
 8002402:	485b      	ldr	r0, [pc, #364]	@ (8002570 <HAL_ADC_ConfigChannel+0x984>)
 8002404:	f7ff f8c4 	bl	8001590 <LL_ADC_IsEnabled>
 8002408:	4604      	mov	r4, r0
 800240a:	485a      	ldr	r0, [pc, #360]	@ (8002574 <HAL_ADC_ConfigChannel+0x988>)
 800240c:	f7ff f8c0 	bl	8001590 <LL_ADC_IsEnabled>
 8002410:	4603      	mov	r3, r0
 8002412:	4323      	orrs	r3, r4
 8002414:	2b00      	cmp	r3, #0
 8002416:	bf0c      	ite	eq
 8002418:	2301      	moveq	r3, #1
 800241a:	2300      	movne	r3, #0
 800241c:	b2db      	uxtb	r3, r3
 800241e:	e008      	b.n	8002432 <HAL_ADC_ConfigChannel+0x846>
 8002420:	4855      	ldr	r0, [pc, #340]	@ (8002578 <HAL_ADC_ConfigChannel+0x98c>)
 8002422:	f7ff f8b5 	bl	8001590 <LL_ADC_IsEnabled>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	bf0c      	ite	eq
 800242c:	2301      	moveq	r3, #1
 800242e:	2300      	movne	r3, #0
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d07d      	beq.n	8002532 <HAL_ADC_ConfigChannel+0x946>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a50      	ldr	r2, [pc, #320]	@ (800257c <HAL_ADC_ConfigChannel+0x990>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d130      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x8b6>
 8002440:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002442:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d12b      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x8b6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a4a      	ldr	r2, [pc, #296]	@ (8002578 <HAL_ADC_ConfigChannel+0x98c>)
 8002450:	4293      	cmp	r3, r2
 8002452:	f040 8081 	bne.w	8002558 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a45      	ldr	r2, [pc, #276]	@ (8002570 <HAL_ADC_ConfigChannel+0x984>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d004      	beq.n	800246a <HAL_ADC_ConfigChannel+0x87e>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a43      	ldr	r2, [pc, #268]	@ (8002574 <HAL_ADC_ConfigChannel+0x988>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d101      	bne.n	800246e <HAL_ADC_ConfigChannel+0x882>
 800246a:	4a45      	ldr	r2, [pc, #276]	@ (8002580 <HAL_ADC_ConfigChannel+0x994>)
 800246c:	e000      	b.n	8002470 <HAL_ADC_ConfigChannel+0x884>
 800246e:	4a3f      	ldr	r2, [pc, #252]	@ (800256c <HAL_ADC_ConfigChannel+0x980>)
 8002470:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002472:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002476:	4619      	mov	r1, r3
 8002478:	4610      	mov	r0, r2
 800247a:	f7fe fe34 	bl	80010e6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800247e:	4b41      	ldr	r3, [pc, #260]	@ (8002584 <HAL_ADC_ConfigChannel+0x998>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	099b      	lsrs	r3, r3, #6
 8002484:	4a40      	ldr	r2, [pc, #256]	@ (8002588 <HAL_ADC_ConfigChannel+0x99c>)
 8002486:	fba2 2303 	umull	r2, r3, r2, r3
 800248a:	099b      	lsrs	r3, r3, #6
 800248c:	3301      	adds	r3, #1
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8002492:	e002      	b.n	800249a <HAL_ADC_ConfigChannel+0x8ae>
              {
                wait_loop_index--;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	3b01      	subs	r3, #1
 8002498:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1f9      	bne.n	8002494 <HAL_ADC_ConfigChannel+0x8a8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024a0:	e05a      	b.n	8002558 <HAL_ADC_ConfigChannel+0x96c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a39      	ldr	r2, [pc, #228]	@ (800258c <HAL_ADC_ConfigChannel+0x9a0>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d11e      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x8fe>
 80024ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80024ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d119      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x8fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a2f      	ldr	r2, [pc, #188]	@ (8002578 <HAL_ADC_ConfigChannel+0x98c>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d14b      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a2a      	ldr	r2, [pc, #168]	@ (8002570 <HAL_ADC_ConfigChannel+0x984>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d004      	beq.n	80024d4 <HAL_ADC_ConfigChannel+0x8e8>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a29      	ldr	r2, [pc, #164]	@ (8002574 <HAL_ADC_ConfigChannel+0x988>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d101      	bne.n	80024d8 <HAL_ADC_ConfigChannel+0x8ec>
 80024d4:	4a2a      	ldr	r2, [pc, #168]	@ (8002580 <HAL_ADC_ConfigChannel+0x994>)
 80024d6:	e000      	b.n	80024da <HAL_ADC_ConfigChannel+0x8ee>
 80024d8:	4a24      	ldr	r2, [pc, #144]	@ (800256c <HAL_ADC_ConfigChannel+0x980>)
 80024da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80024dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024e0:	4619      	mov	r1, r3
 80024e2:	4610      	mov	r0, r2
 80024e4:	f7fe fdff 	bl	80010e6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024e8:	e036      	b.n	8002558 <HAL_ADC_ConfigChannel+0x96c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a28      	ldr	r2, [pc, #160]	@ (8002590 <HAL_ADC_ConfigChannel+0x9a4>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d131      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x96c>
 80024f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80024f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d12c      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x96c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a1d      	ldr	r2, [pc, #116]	@ (8002578 <HAL_ADC_ConfigChannel+0x98c>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d127      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x96c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a18      	ldr	r2, [pc, #96]	@ (8002570 <HAL_ADC_ConfigChannel+0x984>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d004      	beq.n	800251c <HAL_ADC_ConfigChannel+0x930>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a17      	ldr	r2, [pc, #92]	@ (8002574 <HAL_ADC_ConfigChannel+0x988>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d101      	bne.n	8002520 <HAL_ADC_ConfigChannel+0x934>
 800251c:	4a18      	ldr	r2, [pc, #96]	@ (8002580 <HAL_ADC_ConfigChannel+0x994>)
 800251e:	e000      	b.n	8002522 <HAL_ADC_ConfigChannel+0x936>
 8002520:	4a12      	ldr	r2, [pc, #72]	@ (800256c <HAL_ADC_ConfigChannel+0x980>)
 8002522:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002524:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002528:	4619      	mov	r1, r3
 800252a:	4610      	mov	r0, r2
 800252c:	f7fe fddb 	bl	80010e6 <LL_ADC_SetCommonPathInternalCh>
 8002530:	e012      	b.n	8002558 <HAL_ADC_ConfigChannel+0x96c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002536:	f043 0220 	orr.w	r2, r3, #32
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
 8002544:	e008      	b.n	8002558 <HAL_ADC_ConfigChannel+0x96c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800254a:	f043 0220 	orr.w	r2, r3, #32
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002560:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
}
 8002564:	4618      	mov	r0, r3
 8002566:	3794      	adds	r7, #148	@ 0x94
 8002568:	46bd      	mov	sp, r7
 800256a:	bd90      	pop	{r4, r7, pc}
 800256c:	58026300 	.word	0x58026300
 8002570:	40022000 	.word	0x40022000
 8002574:	40022100 	.word	0x40022100
 8002578:	58026000 	.word	0x58026000
 800257c:	c7520000 	.word	0xc7520000
 8002580:	40022300 	.word	0x40022300
 8002584:	24000000 	.word	0x24000000
 8002588:	053e2d63 	.word	0x053e2d63
 800258c:	c3210000 	.word	0xc3210000
 8002590:	cb840000 	.word	0xcb840000

08002594 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fe fff5 	bl	8001590 <LL_ADC_IsEnabled>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d16e      	bne.n	800268a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	4b38      	ldr	r3, [pc, #224]	@ (8002694 <ADC_Enable+0x100>)
 80025b4:	4013      	ands	r3, r2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00d      	beq.n	80025d6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025be:	f043 0210 	orr.w	r2, r3, #16
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025ca:	f043 0201 	orr.w	r2, r3, #1
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e05a      	b.n	800268c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fe ffc4 	bl	8001568 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80025e0:	f7fe fd62 	bl	80010a8 <HAL_GetTick>
 80025e4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a2b      	ldr	r2, [pc, #172]	@ (8002698 <ADC_Enable+0x104>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d004      	beq.n	80025fa <ADC_Enable+0x66>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a29      	ldr	r2, [pc, #164]	@ (800269c <ADC_Enable+0x108>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d101      	bne.n	80025fe <ADC_Enable+0x6a>
 80025fa:	4b29      	ldr	r3, [pc, #164]	@ (80026a0 <ADC_Enable+0x10c>)
 80025fc:	e000      	b.n	8002600 <ADC_Enable+0x6c>
 80025fe:	4b29      	ldr	r3, [pc, #164]	@ (80026a4 <ADC_Enable+0x110>)
 8002600:	4618      	mov	r0, r3
 8002602:	f7fe ff55 	bl	80014b0 <LL_ADC_GetMultimode>
 8002606:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a23      	ldr	r2, [pc, #140]	@ (800269c <ADC_Enable+0x108>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d002      	beq.n	8002618 <ADC_Enable+0x84>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	e000      	b.n	800261a <ADC_Enable+0x86>
 8002618:	4b1f      	ldr	r3, [pc, #124]	@ (8002698 <ADC_Enable+0x104>)
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6812      	ldr	r2, [r2, #0]
 800261e:	4293      	cmp	r3, r2
 8002620:	d02c      	beq.n	800267c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d130      	bne.n	800268a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002628:	e028      	b.n	800267c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f7fe ffae 	bl	8001590 <LL_ADC_IsEnabled>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d104      	bne.n	8002644 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f7fe ff92 	bl	8001568 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002644:	f7fe fd30 	bl	80010a8 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d914      	bls.n	800267c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	2b01      	cmp	r3, #1
 800265e:	d00d      	beq.n	800267c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002664:	f043 0210 	orr.w	r2, r3, #16
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002670:	f043 0201 	orr.w	r2, r3, #1
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e007      	b.n	800268c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b01      	cmp	r3, #1
 8002688:	d1cf      	bne.n	800262a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	8000003f 	.word	0x8000003f
 8002698:	40022000 	.word	0x40022000
 800269c:	40022100 	.word	0x40022100
 80026a0:	40022300 	.word	0x40022300
 80026a4:	58026300 	.word	0x58026300

080026a8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a6c      	ldr	r2, [pc, #432]	@ (8002868 <ADC_ConfigureBoostMode+0x1c0>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d004      	beq.n	80026c4 <ADC_ConfigureBoostMode+0x1c>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a6b      	ldr	r2, [pc, #428]	@ (800286c <ADC_ConfigureBoostMode+0x1c4>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d109      	bne.n	80026d8 <ADC_ConfigureBoostMode+0x30>
 80026c4:	4b6a      	ldr	r3, [pc, #424]	@ (8002870 <ADC_ConfigureBoostMode+0x1c8>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	bf14      	ite	ne
 80026d0:	2301      	movne	r3, #1
 80026d2:	2300      	moveq	r3, #0
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	e008      	b.n	80026ea <ADC_ConfigureBoostMode+0x42>
 80026d8:	4b66      	ldr	r3, [pc, #408]	@ (8002874 <ADC_ConfigureBoostMode+0x1cc>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	bf14      	ite	ne
 80026e4:	2301      	movne	r3, #1
 80026e6:	2300      	moveq	r3, #0
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d01c      	beq.n	8002728 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80026ee:	f003 f821 	bl	8005734 <HAL_RCC_GetHCLKFreq>
 80026f2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80026fc:	d010      	beq.n	8002720 <ADC_ConfigureBoostMode+0x78>
 80026fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002702:	d873      	bhi.n	80027ec <ADC_ConfigureBoostMode+0x144>
 8002704:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002708:	d002      	beq.n	8002710 <ADC_ConfigureBoostMode+0x68>
 800270a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800270e:	d16d      	bne.n	80027ec <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	0c1b      	lsrs	r3, r3, #16
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	fbb2 f3f3 	udiv	r3, r2, r3
 800271c:	60fb      	str	r3, [r7, #12]
        break;
 800271e:	e068      	b.n	80027f2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	089b      	lsrs	r3, r3, #2
 8002724:	60fb      	str	r3, [r7, #12]
        break;
 8002726:	e064      	b.n	80027f2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002728:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800272c:	f04f 0100 	mov.w	r1, #0
 8002730:	f004 f9e6 	bl	8006b00 <HAL_RCCEx_GetPeriphCLKFreq>
 8002734:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800273e:	d051      	beq.n	80027e4 <ADC_ConfigureBoostMode+0x13c>
 8002740:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002744:	d854      	bhi.n	80027f0 <ADC_ConfigureBoostMode+0x148>
 8002746:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800274a:	d047      	beq.n	80027dc <ADC_ConfigureBoostMode+0x134>
 800274c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002750:	d84e      	bhi.n	80027f0 <ADC_ConfigureBoostMode+0x148>
 8002752:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002756:	d03d      	beq.n	80027d4 <ADC_ConfigureBoostMode+0x12c>
 8002758:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800275c:	d848      	bhi.n	80027f0 <ADC_ConfigureBoostMode+0x148>
 800275e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002762:	d033      	beq.n	80027cc <ADC_ConfigureBoostMode+0x124>
 8002764:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002768:	d842      	bhi.n	80027f0 <ADC_ConfigureBoostMode+0x148>
 800276a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800276e:	d029      	beq.n	80027c4 <ADC_ConfigureBoostMode+0x11c>
 8002770:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002774:	d83c      	bhi.n	80027f0 <ADC_ConfigureBoostMode+0x148>
 8002776:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800277a:	d01a      	beq.n	80027b2 <ADC_ConfigureBoostMode+0x10a>
 800277c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002780:	d836      	bhi.n	80027f0 <ADC_ConfigureBoostMode+0x148>
 8002782:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002786:	d014      	beq.n	80027b2 <ADC_ConfigureBoostMode+0x10a>
 8002788:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800278c:	d830      	bhi.n	80027f0 <ADC_ConfigureBoostMode+0x148>
 800278e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002792:	d00e      	beq.n	80027b2 <ADC_ConfigureBoostMode+0x10a>
 8002794:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002798:	d82a      	bhi.n	80027f0 <ADC_ConfigureBoostMode+0x148>
 800279a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800279e:	d008      	beq.n	80027b2 <ADC_ConfigureBoostMode+0x10a>
 80027a0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80027a4:	d824      	bhi.n	80027f0 <ADC_ConfigureBoostMode+0x148>
 80027a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80027aa:	d002      	beq.n	80027b2 <ADC_ConfigureBoostMode+0x10a>
 80027ac:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80027b0:	d11e      	bne.n	80027f0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	0c9b      	lsrs	r3, r3, #18
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c0:	60fb      	str	r3, [r7, #12]
        break;
 80027c2:	e016      	b.n	80027f2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	091b      	lsrs	r3, r3, #4
 80027c8:	60fb      	str	r3, [r7, #12]
        break;
 80027ca:	e012      	b.n	80027f2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	095b      	lsrs	r3, r3, #5
 80027d0:	60fb      	str	r3, [r7, #12]
        break;
 80027d2:	e00e      	b.n	80027f2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	099b      	lsrs	r3, r3, #6
 80027d8:	60fb      	str	r3, [r7, #12]
        break;
 80027da:	e00a      	b.n	80027f2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	09db      	lsrs	r3, r3, #7
 80027e0:	60fb      	str	r3, [r7, #12]
        break;
 80027e2:	e006      	b.n	80027f2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	0a1b      	lsrs	r3, r3, #8
 80027e8:	60fb      	str	r3, [r7, #12]
        break;
 80027ea:	e002      	b.n	80027f2 <ADC_ConfigureBoostMode+0x14a>
        break;
 80027ec:	bf00      	nop
 80027ee:	e000      	b.n	80027f2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80027f0:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	085b      	lsrs	r3, r3, #1
 80027f6:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4a1f      	ldr	r2, [pc, #124]	@ (8002878 <ADC_ConfigureBoostMode+0x1d0>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d808      	bhi.n	8002812 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689a      	ldr	r2, [r3, #8]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800280e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002810:	e025      	b.n	800285e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	4a19      	ldr	r2, [pc, #100]	@ (800287c <ADC_ConfigureBoostMode+0x1d4>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d80a      	bhi.n	8002830 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800282c:	609a      	str	r2, [r3, #8]
}
 800282e:	e016      	b.n	800285e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4a13      	ldr	r2, [pc, #76]	@ (8002880 <ADC_ConfigureBoostMode+0x1d8>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d80a      	bhi.n	800284e <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800284a:	609a      	str	r2, [r3, #8]
}
 800284c:	e007      	b.n	800285e <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800285c:	609a      	str	r2, [r3, #8]
}
 800285e:	bf00      	nop
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40022000 	.word	0x40022000
 800286c:	40022100 	.word	0x40022100
 8002870:	40022300 	.word	0x40022300
 8002874:	58026300 	.word	0x58026300
 8002878:	005f5e10 	.word	0x005f5e10
 800287c:	00bebc20 	.word	0x00bebc20
 8002880:	017d7840 	.word	0x017d7840

08002884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002894:	4b0b      	ldr	r3, [pc, #44]	@ (80028c4 <__NVIC_SetPriorityGrouping+0x40>)
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028a0:	4013      	ands	r3, r2
 80028a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80028ac:	4b06      	ldr	r3, [pc, #24]	@ (80028c8 <__NVIC_SetPriorityGrouping+0x44>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028b2:	4a04      	ldr	r2, [pc, #16]	@ (80028c4 <__NVIC_SetPriorityGrouping+0x40>)
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	60d3      	str	r3, [r2, #12]
}
 80028b8:	bf00      	nop
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	e000ed00 	.word	0xe000ed00
 80028c8:	05fa0000 	.word	0x05fa0000

080028cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028d0:	4b04      	ldr	r3, [pc, #16]	@ (80028e4 <__NVIC_GetPriorityGrouping+0x18>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	0a1b      	lsrs	r3, r3, #8
 80028d6:	f003 0307 	and.w	r3, r3, #7
}
 80028da:	4618      	mov	r0, r3
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	e000ed00 	.word	0xe000ed00

080028e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80028f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	db0b      	blt.n	8002912 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028fa:	88fb      	ldrh	r3, [r7, #6]
 80028fc:	f003 021f 	and.w	r2, r3, #31
 8002900:	4907      	ldr	r1, [pc, #28]	@ (8002920 <__NVIC_EnableIRQ+0x38>)
 8002902:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002906:	095b      	lsrs	r3, r3, #5
 8002908:	2001      	movs	r0, #1
 800290a:	fa00 f202 	lsl.w	r2, r0, r2
 800290e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	e000e100 	.word	0xe000e100

08002924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	4603      	mov	r3, r0
 800292c:	6039      	str	r1, [r7, #0]
 800292e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002930:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002934:	2b00      	cmp	r3, #0
 8002936:	db0a      	blt.n	800294e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	b2da      	uxtb	r2, r3
 800293c:	490c      	ldr	r1, [pc, #48]	@ (8002970 <__NVIC_SetPriority+0x4c>)
 800293e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002942:	0112      	lsls	r2, r2, #4
 8002944:	b2d2      	uxtb	r2, r2
 8002946:	440b      	add	r3, r1
 8002948:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800294c:	e00a      	b.n	8002964 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	b2da      	uxtb	r2, r3
 8002952:	4908      	ldr	r1, [pc, #32]	@ (8002974 <__NVIC_SetPriority+0x50>)
 8002954:	88fb      	ldrh	r3, [r7, #6]
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	3b04      	subs	r3, #4
 800295c:	0112      	lsls	r2, r2, #4
 800295e:	b2d2      	uxtb	r2, r2
 8002960:	440b      	add	r3, r1
 8002962:	761a      	strb	r2, [r3, #24]
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	e000e100 	.word	0xe000e100
 8002974:	e000ed00 	.word	0xe000ed00

08002978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002978:	b480      	push	{r7}
 800297a:	b089      	sub	sp, #36	@ 0x24
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	f1c3 0307 	rsb	r3, r3, #7
 8002992:	2b04      	cmp	r3, #4
 8002994:	bf28      	it	cs
 8002996:	2304      	movcs	r3, #4
 8002998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	3304      	adds	r3, #4
 800299e:	2b06      	cmp	r3, #6
 80029a0:	d902      	bls.n	80029a8 <NVIC_EncodePriority+0x30>
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	3b03      	subs	r3, #3
 80029a6:	e000      	b.n	80029aa <NVIC_EncodePriority+0x32>
 80029a8:	2300      	movs	r3, #0
 80029aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029ac:	f04f 32ff 	mov.w	r2, #4294967295
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	43da      	mvns	r2, r3
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	401a      	ands	r2, r3
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029c0:	f04f 31ff 	mov.w	r1, #4294967295
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ca:	43d9      	mvns	r1, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d0:	4313      	orrs	r3, r2
         );
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3724      	adds	r7, #36	@ 0x24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
	...

080029e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029f0:	d301      	bcc.n	80029f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029f2:	2301      	movs	r3, #1
 80029f4:	e00f      	b.n	8002a16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002a20 <SysTick_Config+0x40>)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3b01      	subs	r3, #1
 80029fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029fe:	210f      	movs	r1, #15
 8002a00:	f04f 30ff 	mov.w	r0, #4294967295
 8002a04:	f7ff ff8e 	bl	8002924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a08:	4b05      	ldr	r3, [pc, #20]	@ (8002a20 <SysTick_Config+0x40>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a0e:	4b04      	ldr	r3, [pc, #16]	@ (8002a20 <SysTick_Config+0x40>)
 8002a10:	2207      	movs	r2, #7
 8002a12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	e000e010 	.word	0xe000e010

08002a24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f7ff ff29 	bl	8002884 <__NVIC_SetPriorityGrouping>
}
 8002a32:	bf00      	nop
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b086      	sub	sp, #24
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	4603      	mov	r3, r0
 8002a42:	60b9      	str	r1, [r7, #8]
 8002a44:	607a      	str	r2, [r7, #4]
 8002a46:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a48:	f7ff ff40 	bl	80028cc <__NVIC_GetPriorityGrouping>
 8002a4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	68b9      	ldr	r1, [r7, #8]
 8002a52:	6978      	ldr	r0, [r7, #20]
 8002a54:	f7ff ff90 	bl	8002978 <NVIC_EncodePriority>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a5e:	4611      	mov	r1, r2
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff ff5f 	bl	8002924 <__NVIC_SetPriority>
}
 8002a66:	bf00      	nop
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b082      	sub	sp, #8
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	4603      	mov	r3, r0
 8002a76:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff ff33 	bl	80028e8 <__NVIC_EnableIRQ>
}
 8002a82:	bf00      	nop
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b082      	sub	sp, #8
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f7ff ffa4 	bl	80029e0 <SysTick_Config>
 8002a98:	4603      	mov	r3, r0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
	...

08002aa4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8002aa8:	f3bf 8f5f 	dmb	sy
}
 8002aac:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002aae:	4b07      	ldr	r3, [pc, #28]	@ (8002acc <HAL_MPU_Disable+0x28>)
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab2:	4a06      	ldr	r2, [pc, #24]	@ (8002acc <HAL_MPU_Disable+0x28>)
 8002ab4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ab8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002aba:	4b05      	ldr	r3, [pc, #20]	@ (8002ad0 <HAL_MPU_Disable+0x2c>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	605a      	str	r2, [r3, #4]
}
 8002ac0:	bf00      	nop
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	e000ed00 	.word	0xe000ed00
 8002ad0:	e000ed90 	.word	0xe000ed90

08002ad4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002adc:	4a0b      	ldr	r2, [pc, #44]	@ (8002b0c <HAL_MPU_Enable+0x38>)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8002b10 <HAL_MPU_Enable+0x3c>)
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aea:	4a09      	ldr	r2, [pc, #36]	@ (8002b10 <HAL_MPU_Enable+0x3c>)
 8002aec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002af0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002af2:	f3bf 8f4f 	dsb	sy
}
 8002af6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002af8:	f3bf 8f6f 	isb	sy
}
 8002afc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	e000ed90 	.word	0xe000ed90
 8002b10:	e000ed00 	.word	0xe000ed00

08002b14 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	785a      	ldrb	r2, [r3, #1]
 8002b20:	4b1b      	ldr	r3, [pc, #108]	@ (8002b90 <HAL_MPU_ConfigRegion+0x7c>)
 8002b22:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002b24:	4b1a      	ldr	r3, [pc, #104]	@ (8002b90 <HAL_MPU_ConfigRegion+0x7c>)
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	4a19      	ldr	r2, [pc, #100]	@ (8002b90 <HAL_MPU_ConfigRegion+0x7c>)
 8002b2a:	f023 0301 	bic.w	r3, r3, #1
 8002b2e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002b30:	4a17      	ldr	r2, [pc, #92]	@ (8002b90 <HAL_MPU_ConfigRegion+0x7c>)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	7b1b      	ldrb	r3, [r3, #12]
 8002b3c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	7adb      	ldrb	r3, [r3, #11]
 8002b42:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002b44:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	7a9b      	ldrb	r3, [r3, #10]
 8002b4a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002b4c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	7b5b      	ldrb	r3, [r3, #13]
 8002b52:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002b54:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	7b9b      	ldrb	r3, [r3, #14]
 8002b5a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002b5c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	7bdb      	ldrb	r3, [r3, #15]
 8002b62:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002b64:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	7a5b      	ldrb	r3, [r3, #9]
 8002b6a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002b6c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	7a1b      	ldrb	r3, [r3, #8]
 8002b72:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002b74:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	7812      	ldrb	r2, [r2, #0]
 8002b7a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002b7c:	4a04      	ldr	r2, [pc, #16]	@ (8002b90 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002b7e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002b80:	6113      	str	r3, [r2, #16]
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	e000ed90 	.word	0xe000ed90

08002b94 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e014      	b.n	8002bd0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	791b      	ldrb	r3, [r3, #4]
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d105      	bne.n	8002bbc <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7fd ff3a 	bl	8000a30 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
 8002be4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d101      	bne.n	8002bf0 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e0a2      	b.n	8002d36 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	795b      	ldrb	r3, [r3, #5]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d101      	bne.n	8002bfc <HAL_DAC_Start_DMA+0x24>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	e09c      	b.n	8002d36 <HAL_DAC_Start_DMA+0x15e>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2202      	movs	r2, #2
 8002c06:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d129      	bne.n	8002c62 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	4a4b      	ldr	r2, [pc, #300]	@ (8002d40 <HAL_DAC_Start_DMA+0x168>)
 8002c14:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	4a4a      	ldr	r2, [pc, #296]	@ (8002d44 <HAL_DAC_Start_DMA+0x16c>)
 8002c1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	4a49      	ldr	r2, [pc, #292]	@ (8002d48 <HAL_DAC_Start_DMA+0x170>)
 8002c24:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002c34:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <HAL_DAC_Start_DMA+0x6c>
 8002c3c:	6a3b      	ldr	r3, [r7, #32]
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d005      	beq.n	8002c4e <HAL_DAC_Start_DMA+0x76>
 8002c42:	e009      	b.n	8002c58 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	3308      	adds	r3, #8
 8002c4a:	613b      	str	r3, [r7, #16]
        break;
 8002c4c:	e033      	b.n	8002cb6 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	330c      	adds	r3, #12
 8002c54:	613b      	str	r3, [r7, #16]
        break;
 8002c56:	e02e      	b.n	8002cb6 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	3310      	adds	r3, #16
 8002c5e:	613b      	str	r3, [r7, #16]
        break;
 8002c60:	e029      	b.n	8002cb6 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	4a39      	ldr	r2, [pc, #228]	@ (8002d4c <HAL_DAC_Start_DMA+0x174>)
 8002c68:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	4a38      	ldr	r2, [pc, #224]	@ (8002d50 <HAL_DAC_Start_DMA+0x178>)
 8002c70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	4a37      	ldr	r2, [pc, #220]	@ (8002d54 <HAL_DAC_Start_DMA+0x17c>)
 8002c78:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002c88:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_DAC_Start_DMA+0xc0>
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	d005      	beq.n	8002ca2 <HAL_DAC_Start_DMA+0xca>
 8002c96:	e009      	b.n	8002cac <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	3314      	adds	r3, #20
 8002c9e:	613b      	str	r3, [r7, #16]
        break;
 8002ca0:	e009      	b.n	8002cb6 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	3318      	adds	r3, #24
 8002ca8:	613b      	str	r3, [r7, #16]
        break;
 8002caa:	e004      	b.n	8002cb6 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	331c      	adds	r3, #28
 8002cb2:	613b      	str	r3, [r7, #16]
        break;
 8002cb4:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d111      	bne.n	8002ce0 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002cca:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6898      	ldr	r0, [r3, #8]
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	f000 fdef 	bl	80038b8 <HAL_DMA_Start_IT>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	75fb      	strb	r3, [r7, #23]
 8002cde:	e010      	b.n	8002d02 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002cee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	68d8      	ldr	r0, [r3, #12]
 8002cf4:	6879      	ldr	r1, [r7, #4]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	f000 fddd 	bl	80038b8 <HAL_DMA_Start_IT>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002d08:	7dfb      	ldrb	r3, [r7, #23]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10c      	bne.n	8002d28 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6819      	ldr	r1, [r3, #0]
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	f003 0310 	and.w	r3, r3, #16
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	409a      	lsls	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	e005      	b.n	8002d34 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	f043 0204 	orr.w	r2, r3, #4
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3718      	adds	r7, #24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	080030e1 	.word	0x080030e1
 8002d44:	08003103 	.word	0x08003103
 8002d48:	0800311f 	.word	0x0800311f
 8002d4c:	0800319d 	.word	0x0800319d
 8002d50:	080031bf 	.word	0x080031bf
 8002d54:	080031db 	.word	0x080031db

08002d58 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d6e:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d01d      	beq.n	8002db6 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d018      	beq.n	8002db6 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2204      	movs	r2, #4
 8002d88:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	f043 0201 	orr.w	r2, r3, #1
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d9e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002dae:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 f845 	bl	8002e40 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d01d      	beq.n	8002dfc <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d018      	beq.n	8002dfc <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2204      	movs	r2, #4
 8002dce:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	f043 0202 	orr.w	r2, r3, #2
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002de4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8002df4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f9c6 	bl	8003188 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8002dfc:	bf00      	nop
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002e48:	bf00      	nop
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b08a      	sub	sp, #40	@ 0x28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e60:	2300      	movs	r3, #0
 8002e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d002      	beq.n	8002e72 <HAL_DAC_ConfigChannel+0x1e>
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e12d      	b.n	80030d2 <HAL_DAC_ConfigChannel+0x27e>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2b04      	cmp	r3, #4
    }
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	795b      	ldrb	r3, [r3, #5]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d101      	bne.n	8002e88 <HAL_DAC_ConfigChannel+0x34>
 8002e84:	2302      	movs	r3, #2
 8002e86:	e124      	b.n	80030d2 <HAL_DAC_ConfigChannel+0x27e>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2202      	movs	r2, #2
 8002e92:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d17a      	bne.n	8002f92 <HAL_DAC_ConfigChannel+0x13e>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002e9c:	f7fe f904 	bl	80010a8 <HAL_GetTick>
 8002ea0:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d13d      	bne.n	8002f24 <HAL_DAC_ConfigChannel+0xd0>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002ea8:	e018      	b.n	8002edc <HAL_DAC_ConfigChannel+0x88>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002eaa:	f7fe f8fd 	bl	80010a8 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d911      	bls.n	8002edc <HAL_DAC_ConfigChannel+0x88>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ebe:	4b87      	ldr	r3, [pc, #540]	@ (80030dc <HAL_DAC_ConfigChannel+0x288>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00a      	beq.n	8002edc <HAL_DAC_ConfigChannel+0x88>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	f043 0208 	orr.w	r2, r3, #8
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2203      	movs	r2, #3
 8002ed6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e0fa      	b.n	80030d2 <HAL_DAC_ConfigChannel+0x27e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ee2:	4b7e      	ldr	r3, [pc, #504]	@ (80030dc <HAL_DAC_ConfigChannel+0x288>)
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1df      	bne.n	8002eaa <HAL_DAC_ConfigChannel+0x56>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	6992      	ldr	r2, [r2, #24]
 8002ef2:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ef4:	e020      	b.n	8002f38 <HAL_DAC_ConfigChannel+0xe4>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002ef6:	f7fe f8d7 	bl	80010a8 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d90f      	bls.n	8002f24 <HAL_DAC_ConfigChannel+0xd0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	da0a      	bge.n	8002f24 <HAL_DAC_ConfigChannel+0xd0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	f043 0208 	orr.w	r2, r3, #8
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2203      	movs	r2, #3
 8002f1e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e0d6      	b.n	80030d2 <HAL_DAC_ConfigChannel+0x27e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	dbe3      	blt.n	8002ef6 <HAL_DAC_ConfigChannel+0xa2>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	6992      	ldr	r2, [r2, #24]
 8002f36:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f003 0310 	and.w	r3, r3, #16
 8002f44:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002f48:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	ea02 0103 	and.w	r1, r2, r3
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	69da      	ldr	r2, [r3, #28]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f003 0310 	and.w	r3, r3, #16
 8002f5c:	409a      	lsls	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f003 0310 	and.w	r3, r3, #16
 8002f72:	21ff      	movs	r1, #255	@ 0xff
 8002f74:	fa01 f303 	lsl.w	r3, r1, r3
 8002f78:	43db      	mvns	r3, r3
 8002f7a:	ea02 0103 	and.w	r1, r2, r3
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	6a1a      	ldr	r2, [r3, #32]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f003 0310 	and.w	r3, r3, #16
 8002f88:	409a      	lsls	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d11d      	bne.n	8002fd6 <HAL_DAC_ConfigChannel+0x182>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fa0:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f003 0310 	and.w	r3, r3, #16
 8002fa8:	221f      	movs	r2, #31
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f003 0310 	and.w	r3, r3, #16
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fdc:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f003 0310 	and.w	r3, r3, #16
 8002fe4:	2207      	movs	r2, #7
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43db      	mvns	r3, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d102      	bne.n	8003000 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = 0x00000000UL;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ffe:	e00f      	b.n	8003020 <HAL_DAC_ConfigChannel+0x1cc>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	2b02      	cmp	r3, #2
 8003006:	d102      	bne.n	800300e <HAL_DAC_ConfigChannel+0x1ba>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003008:	2301      	movs	r3, #1
 800300a:	627b      	str	r3, [r7, #36]	@ 0x24
 800300c:	e008      	b.n	8003020 <HAL_DAC_ConfigChannel+0x1cc>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d102      	bne.n	800301c <HAL_DAC_ConfigChannel+0x1c8>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003016:	2301      	movs	r3, #1
 8003018:	627b      	str	r3, [r7, #36]	@ 0x24
 800301a:	e001      	b.n	8003020 <HAL_DAC_ConfigChannel+0x1cc>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800301c:	2300      	movs	r3, #0
 800301e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	4313      	orrs	r3, r2
 800302a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800302c:	4313      	orrs	r3, r2
 800302e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f003 0310 	and.w	r3, r3, #16
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	4313      	orrs	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6819      	ldr	r1, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f003 0310 	and.w	r3, r3, #16
 8003056:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	43da      	mvns	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	400a      	ands	r2, r1
 8003066:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f003 0310 	and.w	r3, r3, #16
 8003076:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43db      	mvns	r3, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4013      	ands	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f003 0310 	and.w	r3, r3, #16
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	4313      	orrs	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6819      	ldr	r1, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f003 0310 	and.w	r3, r3, #16
 80030b2:	22c0      	movs	r2, #192	@ 0xc0
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	43da      	mvns	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	400a      	ands	r2, r1
 80030c0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2201      	movs	r2, #1
 80030c6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80030ce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3728      	adds	r7, #40	@ 0x28
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	20008000 	.word	0x20008000

080030e0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ec:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f7ff fe88 	bl	8002e04 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2201      	movs	r2, #1
 80030f8:	711a      	strb	r2, [r3, #4]
}
 80030fa:	bf00      	nop
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b084      	sub	sp, #16
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800310e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f7ff fe81 	bl	8002e18 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003116:	bf00      	nop
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b084      	sub	sp, #16
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800312a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	f043 0204 	orr.w	r2, r3, #4
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f7ff fe77 	bl	8002e2c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2201      	movs	r2, #1
 8003142:	711a      	strb	r2, [r3, #4]
}
 8003144:	bf00      	nop
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031a8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f7ff ffce 	bl	800314c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2201      	movs	r2, #1
 80031b4:	711a      	strb	r2, [r3, #4]
}
 80031b6:	bf00      	nop
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b084      	sub	sp, #16
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ca:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f7ff ffc7 	bl	8003160 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80031d2:	bf00      	nop
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b084      	sub	sp, #16
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	f043 0204 	orr.w	r2, r3, #4
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f7ff ffbd 	bl	8003174 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2201      	movs	r2, #1
 80031fe:	711a      	strb	r2, [r3, #4]
}
 8003200:	bf00      	nop
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003210:	f7fd ff4a 	bl	80010a8 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e312      	b.n	8003846 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a66      	ldr	r2, [pc, #408]	@ (80033c0 <HAL_DMA_Init+0x1b8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d04a      	beq.n	80032c0 <HAL_DMA_Init+0xb8>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a65      	ldr	r2, [pc, #404]	@ (80033c4 <HAL_DMA_Init+0x1bc>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d045      	beq.n	80032c0 <HAL_DMA_Init+0xb8>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a63      	ldr	r2, [pc, #396]	@ (80033c8 <HAL_DMA_Init+0x1c0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d040      	beq.n	80032c0 <HAL_DMA_Init+0xb8>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a62      	ldr	r2, [pc, #392]	@ (80033cc <HAL_DMA_Init+0x1c4>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d03b      	beq.n	80032c0 <HAL_DMA_Init+0xb8>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a60      	ldr	r2, [pc, #384]	@ (80033d0 <HAL_DMA_Init+0x1c8>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d036      	beq.n	80032c0 <HAL_DMA_Init+0xb8>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a5f      	ldr	r2, [pc, #380]	@ (80033d4 <HAL_DMA_Init+0x1cc>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d031      	beq.n	80032c0 <HAL_DMA_Init+0xb8>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a5d      	ldr	r2, [pc, #372]	@ (80033d8 <HAL_DMA_Init+0x1d0>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d02c      	beq.n	80032c0 <HAL_DMA_Init+0xb8>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a5c      	ldr	r2, [pc, #368]	@ (80033dc <HAL_DMA_Init+0x1d4>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d027      	beq.n	80032c0 <HAL_DMA_Init+0xb8>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a5a      	ldr	r2, [pc, #360]	@ (80033e0 <HAL_DMA_Init+0x1d8>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d022      	beq.n	80032c0 <HAL_DMA_Init+0xb8>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a59      	ldr	r2, [pc, #356]	@ (80033e4 <HAL_DMA_Init+0x1dc>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d01d      	beq.n	80032c0 <HAL_DMA_Init+0xb8>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a57      	ldr	r2, [pc, #348]	@ (80033e8 <HAL_DMA_Init+0x1e0>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d018      	beq.n	80032c0 <HAL_DMA_Init+0xb8>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a56      	ldr	r2, [pc, #344]	@ (80033ec <HAL_DMA_Init+0x1e4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d013      	beq.n	80032c0 <HAL_DMA_Init+0xb8>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a54      	ldr	r2, [pc, #336]	@ (80033f0 <HAL_DMA_Init+0x1e8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d00e      	beq.n	80032c0 <HAL_DMA_Init+0xb8>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a53      	ldr	r2, [pc, #332]	@ (80033f4 <HAL_DMA_Init+0x1ec>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d009      	beq.n	80032c0 <HAL_DMA_Init+0xb8>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a51      	ldr	r2, [pc, #324]	@ (80033f8 <HAL_DMA_Init+0x1f0>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d004      	beq.n	80032c0 <HAL_DMA_Init+0xb8>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a50      	ldr	r2, [pc, #320]	@ (80033fc <HAL_DMA_Init+0x1f4>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d101      	bne.n	80032c4 <HAL_DMA_Init+0xbc>
 80032c0:	2301      	movs	r3, #1
 80032c2:	e000      	b.n	80032c6 <HAL_DMA_Init+0xbe>
 80032c4:	2300      	movs	r3, #0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 813c 	beq.w	8003544 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2202      	movs	r2, #2
 80032d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a37      	ldr	r2, [pc, #220]	@ (80033c0 <HAL_DMA_Init+0x1b8>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d04a      	beq.n	800337c <HAL_DMA_Init+0x174>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a36      	ldr	r2, [pc, #216]	@ (80033c4 <HAL_DMA_Init+0x1bc>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d045      	beq.n	800337c <HAL_DMA_Init+0x174>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a34      	ldr	r2, [pc, #208]	@ (80033c8 <HAL_DMA_Init+0x1c0>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d040      	beq.n	800337c <HAL_DMA_Init+0x174>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a33      	ldr	r2, [pc, #204]	@ (80033cc <HAL_DMA_Init+0x1c4>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d03b      	beq.n	800337c <HAL_DMA_Init+0x174>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a31      	ldr	r2, [pc, #196]	@ (80033d0 <HAL_DMA_Init+0x1c8>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d036      	beq.n	800337c <HAL_DMA_Init+0x174>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a30      	ldr	r2, [pc, #192]	@ (80033d4 <HAL_DMA_Init+0x1cc>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d031      	beq.n	800337c <HAL_DMA_Init+0x174>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a2e      	ldr	r2, [pc, #184]	@ (80033d8 <HAL_DMA_Init+0x1d0>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d02c      	beq.n	800337c <HAL_DMA_Init+0x174>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a2d      	ldr	r2, [pc, #180]	@ (80033dc <HAL_DMA_Init+0x1d4>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d027      	beq.n	800337c <HAL_DMA_Init+0x174>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a2b      	ldr	r2, [pc, #172]	@ (80033e0 <HAL_DMA_Init+0x1d8>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d022      	beq.n	800337c <HAL_DMA_Init+0x174>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a2a      	ldr	r2, [pc, #168]	@ (80033e4 <HAL_DMA_Init+0x1dc>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d01d      	beq.n	800337c <HAL_DMA_Init+0x174>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a28      	ldr	r2, [pc, #160]	@ (80033e8 <HAL_DMA_Init+0x1e0>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d018      	beq.n	800337c <HAL_DMA_Init+0x174>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a27      	ldr	r2, [pc, #156]	@ (80033ec <HAL_DMA_Init+0x1e4>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d013      	beq.n	800337c <HAL_DMA_Init+0x174>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a25      	ldr	r2, [pc, #148]	@ (80033f0 <HAL_DMA_Init+0x1e8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d00e      	beq.n	800337c <HAL_DMA_Init+0x174>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a24      	ldr	r2, [pc, #144]	@ (80033f4 <HAL_DMA_Init+0x1ec>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d009      	beq.n	800337c <HAL_DMA_Init+0x174>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a22      	ldr	r2, [pc, #136]	@ (80033f8 <HAL_DMA_Init+0x1f0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d004      	beq.n	800337c <HAL_DMA_Init+0x174>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a21      	ldr	r2, [pc, #132]	@ (80033fc <HAL_DMA_Init+0x1f4>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d108      	bne.n	800338e <HAL_DMA_Init+0x186>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0201 	bic.w	r2, r2, #1
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	e007      	b.n	800339e <HAL_DMA_Init+0x196>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0201 	bic.w	r2, r2, #1
 800339c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800339e:	e02f      	b.n	8003400 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033a0:	f7fd fe82 	bl	80010a8 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b05      	cmp	r3, #5
 80033ac:	d928      	bls.n	8003400 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2220      	movs	r2, #32
 80033b2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2203      	movs	r2, #3
 80033b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e242      	b.n	8003846 <HAL_DMA_Init+0x63e>
 80033c0:	40020010 	.word	0x40020010
 80033c4:	40020028 	.word	0x40020028
 80033c8:	40020040 	.word	0x40020040
 80033cc:	40020058 	.word	0x40020058
 80033d0:	40020070 	.word	0x40020070
 80033d4:	40020088 	.word	0x40020088
 80033d8:	400200a0 	.word	0x400200a0
 80033dc:	400200b8 	.word	0x400200b8
 80033e0:	40020410 	.word	0x40020410
 80033e4:	40020428 	.word	0x40020428
 80033e8:	40020440 	.word	0x40020440
 80033ec:	40020458 	.word	0x40020458
 80033f0:	40020470 	.word	0x40020470
 80033f4:	40020488 	.word	0x40020488
 80033f8:	400204a0 	.word	0x400204a0
 80033fc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1c8      	bne.n	80033a0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	4b83      	ldr	r3, [pc, #524]	@ (8003628 <HAL_DMA_Init+0x420>)
 800341a:	4013      	ands	r3, r2
 800341c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003426:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003432:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800343e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	4313      	orrs	r3, r2
 800344a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003450:	2b04      	cmp	r3, #4
 8003452:	d107      	bne.n	8003464 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800345c:	4313      	orrs	r3, r2
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	4313      	orrs	r3, r2
 8003462:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	2b28      	cmp	r3, #40	@ 0x28
 800346a:	d903      	bls.n	8003474 <HAL_DMA_Init+0x26c>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b2e      	cmp	r3, #46	@ 0x2e
 8003472:	d91f      	bls.n	80034b4 <HAL_DMA_Init+0x2ac>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b3e      	cmp	r3, #62	@ 0x3e
 800347a:	d903      	bls.n	8003484 <HAL_DMA_Init+0x27c>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	2b42      	cmp	r3, #66	@ 0x42
 8003482:	d917      	bls.n	80034b4 <HAL_DMA_Init+0x2ac>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2b46      	cmp	r3, #70	@ 0x46
 800348a:	d903      	bls.n	8003494 <HAL_DMA_Init+0x28c>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2b48      	cmp	r3, #72	@ 0x48
 8003492:	d90f      	bls.n	80034b4 <HAL_DMA_Init+0x2ac>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2b4e      	cmp	r3, #78	@ 0x4e
 800349a:	d903      	bls.n	80034a4 <HAL_DMA_Init+0x29c>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2b52      	cmp	r3, #82	@ 0x52
 80034a2:	d907      	bls.n	80034b4 <HAL_DMA_Init+0x2ac>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2b73      	cmp	r3, #115	@ 0x73
 80034aa:	d905      	bls.n	80034b8 <HAL_DMA_Init+0x2b0>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	2b77      	cmp	r3, #119	@ 0x77
 80034b2:	d801      	bhi.n	80034b8 <HAL_DMA_Init+0x2b0>
 80034b4:	2301      	movs	r3, #1
 80034b6:	e000      	b.n	80034ba <HAL_DMA_Init+0x2b2>
 80034b8:	2300      	movs	r3, #0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034c4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f023 0307 	bic.w	r3, r3, #7
 80034dc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d117      	bne.n	8003520 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00e      	beq.n	8003520 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 fea0 	bl	8004248 <DMA_CheckFifoParam>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d008      	beq.n	8003520 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2240      	movs	r2, #64	@ 0x40
 8003512:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e192      	b.n	8003846 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 fddb 	bl	80040e4 <DMA_CalcBaseAndBitshift>
 800352e:	4603      	mov	r3, r0
 8003530:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003536:	f003 031f 	and.w	r3, r3, #31
 800353a:	223f      	movs	r2, #63	@ 0x3f
 800353c:	409a      	lsls	r2, r3
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	609a      	str	r2, [r3, #8]
 8003542:	e0c8      	b.n	80036d6 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a38      	ldr	r2, [pc, #224]	@ (800362c <HAL_DMA_Init+0x424>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d022      	beq.n	8003594 <HAL_DMA_Init+0x38c>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a37      	ldr	r2, [pc, #220]	@ (8003630 <HAL_DMA_Init+0x428>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d01d      	beq.n	8003594 <HAL_DMA_Init+0x38c>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a35      	ldr	r2, [pc, #212]	@ (8003634 <HAL_DMA_Init+0x42c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d018      	beq.n	8003594 <HAL_DMA_Init+0x38c>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a34      	ldr	r2, [pc, #208]	@ (8003638 <HAL_DMA_Init+0x430>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d013      	beq.n	8003594 <HAL_DMA_Init+0x38c>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a32      	ldr	r2, [pc, #200]	@ (800363c <HAL_DMA_Init+0x434>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d00e      	beq.n	8003594 <HAL_DMA_Init+0x38c>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a31      	ldr	r2, [pc, #196]	@ (8003640 <HAL_DMA_Init+0x438>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d009      	beq.n	8003594 <HAL_DMA_Init+0x38c>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a2f      	ldr	r2, [pc, #188]	@ (8003644 <HAL_DMA_Init+0x43c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d004      	beq.n	8003594 <HAL_DMA_Init+0x38c>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a2e      	ldr	r2, [pc, #184]	@ (8003648 <HAL_DMA_Init+0x440>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d101      	bne.n	8003598 <HAL_DMA_Init+0x390>
 8003594:	2301      	movs	r3, #1
 8003596:	e000      	b.n	800359a <HAL_DMA_Init+0x392>
 8003598:	2300      	movs	r3, #0
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 8092 	beq.w	80036c4 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a21      	ldr	r2, [pc, #132]	@ (800362c <HAL_DMA_Init+0x424>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d021      	beq.n	80035ee <HAL_DMA_Init+0x3e6>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a20      	ldr	r2, [pc, #128]	@ (8003630 <HAL_DMA_Init+0x428>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d01c      	beq.n	80035ee <HAL_DMA_Init+0x3e6>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a1e      	ldr	r2, [pc, #120]	@ (8003634 <HAL_DMA_Init+0x42c>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d017      	beq.n	80035ee <HAL_DMA_Init+0x3e6>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a1d      	ldr	r2, [pc, #116]	@ (8003638 <HAL_DMA_Init+0x430>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d012      	beq.n	80035ee <HAL_DMA_Init+0x3e6>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a1b      	ldr	r2, [pc, #108]	@ (800363c <HAL_DMA_Init+0x434>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d00d      	beq.n	80035ee <HAL_DMA_Init+0x3e6>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a1a      	ldr	r2, [pc, #104]	@ (8003640 <HAL_DMA_Init+0x438>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d008      	beq.n	80035ee <HAL_DMA_Init+0x3e6>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a18      	ldr	r2, [pc, #96]	@ (8003644 <HAL_DMA_Init+0x43c>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d003      	beq.n	80035ee <HAL_DMA_Init+0x3e6>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a17      	ldr	r2, [pc, #92]	@ (8003648 <HAL_DMA_Init+0x440>)
 80035ec:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2202      	movs	r2, #2
 80035f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	4b10      	ldr	r3, [pc, #64]	@ (800364c <HAL_DMA_Init+0x444>)
 800360a:	4013      	ands	r3, r2
 800360c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	2b40      	cmp	r3, #64	@ 0x40
 8003614:	d01c      	beq.n	8003650 <HAL_DMA_Init+0x448>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	2b80      	cmp	r3, #128	@ 0x80
 800361c:	d102      	bne.n	8003624 <HAL_DMA_Init+0x41c>
 800361e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003622:	e016      	b.n	8003652 <HAL_DMA_Init+0x44a>
 8003624:	2300      	movs	r3, #0
 8003626:	e014      	b.n	8003652 <HAL_DMA_Init+0x44a>
 8003628:	fe10803f 	.word	0xfe10803f
 800362c:	58025408 	.word	0x58025408
 8003630:	5802541c 	.word	0x5802541c
 8003634:	58025430 	.word	0x58025430
 8003638:	58025444 	.word	0x58025444
 800363c:	58025458 	.word	0x58025458
 8003640:	5802546c 	.word	0x5802546c
 8003644:	58025480 	.word	0x58025480
 8003648:	58025494 	.word	0x58025494
 800364c:	fffe000f 	.word	0xfffe000f
 8003650:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	68d2      	ldr	r2, [r2, #12]
 8003656:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003658:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003660:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003668:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003670:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003678:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003680:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	4313      	orrs	r3, r2
 8003686:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	461a      	mov	r2, r3
 8003696:	4b6e      	ldr	r3, [pc, #440]	@ (8003850 <HAL_DMA_Init+0x648>)
 8003698:	4413      	add	r3, r2
 800369a:	4a6e      	ldr	r2, [pc, #440]	@ (8003854 <HAL_DMA_Init+0x64c>)
 800369c:	fba2 2303 	umull	r2, r3, r2, r3
 80036a0:	091b      	lsrs	r3, r3, #4
 80036a2:	009a      	lsls	r2, r3, #2
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 fd1b 	bl	80040e4 <DMA_CalcBaseAndBitshift>
 80036ae:	4603      	mov	r3, r0
 80036b0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b6:	f003 031f 	and.w	r3, r3, #31
 80036ba:	2201      	movs	r2, #1
 80036bc:	409a      	lsls	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	605a      	str	r2, [r3, #4]
 80036c2:	e008      	b.n	80036d6 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2240      	movs	r2, #64	@ 0x40
 80036c8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2203      	movs	r2, #3
 80036ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e0b7      	b.n	8003846 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a5f      	ldr	r2, [pc, #380]	@ (8003858 <HAL_DMA_Init+0x650>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d072      	beq.n	80037c6 <HAL_DMA_Init+0x5be>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a5d      	ldr	r2, [pc, #372]	@ (800385c <HAL_DMA_Init+0x654>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d06d      	beq.n	80037c6 <HAL_DMA_Init+0x5be>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a5c      	ldr	r2, [pc, #368]	@ (8003860 <HAL_DMA_Init+0x658>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d068      	beq.n	80037c6 <HAL_DMA_Init+0x5be>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a5a      	ldr	r2, [pc, #360]	@ (8003864 <HAL_DMA_Init+0x65c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d063      	beq.n	80037c6 <HAL_DMA_Init+0x5be>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a59      	ldr	r2, [pc, #356]	@ (8003868 <HAL_DMA_Init+0x660>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d05e      	beq.n	80037c6 <HAL_DMA_Init+0x5be>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a57      	ldr	r2, [pc, #348]	@ (800386c <HAL_DMA_Init+0x664>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d059      	beq.n	80037c6 <HAL_DMA_Init+0x5be>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a56      	ldr	r2, [pc, #344]	@ (8003870 <HAL_DMA_Init+0x668>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d054      	beq.n	80037c6 <HAL_DMA_Init+0x5be>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a54      	ldr	r2, [pc, #336]	@ (8003874 <HAL_DMA_Init+0x66c>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d04f      	beq.n	80037c6 <HAL_DMA_Init+0x5be>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a53      	ldr	r2, [pc, #332]	@ (8003878 <HAL_DMA_Init+0x670>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d04a      	beq.n	80037c6 <HAL_DMA_Init+0x5be>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a51      	ldr	r2, [pc, #324]	@ (800387c <HAL_DMA_Init+0x674>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d045      	beq.n	80037c6 <HAL_DMA_Init+0x5be>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a50      	ldr	r2, [pc, #320]	@ (8003880 <HAL_DMA_Init+0x678>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d040      	beq.n	80037c6 <HAL_DMA_Init+0x5be>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a4e      	ldr	r2, [pc, #312]	@ (8003884 <HAL_DMA_Init+0x67c>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d03b      	beq.n	80037c6 <HAL_DMA_Init+0x5be>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a4d      	ldr	r2, [pc, #308]	@ (8003888 <HAL_DMA_Init+0x680>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d036      	beq.n	80037c6 <HAL_DMA_Init+0x5be>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a4b      	ldr	r2, [pc, #300]	@ (800388c <HAL_DMA_Init+0x684>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d031      	beq.n	80037c6 <HAL_DMA_Init+0x5be>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a4a      	ldr	r2, [pc, #296]	@ (8003890 <HAL_DMA_Init+0x688>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d02c      	beq.n	80037c6 <HAL_DMA_Init+0x5be>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a48      	ldr	r2, [pc, #288]	@ (8003894 <HAL_DMA_Init+0x68c>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d027      	beq.n	80037c6 <HAL_DMA_Init+0x5be>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a47      	ldr	r2, [pc, #284]	@ (8003898 <HAL_DMA_Init+0x690>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d022      	beq.n	80037c6 <HAL_DMA_Init+0x5be>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a45      	ldr	r2, [pc, #276]	@ (800389c <HAL_DMA_Init+0x694>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d01d      	beq.n	80037c6 <HAL_DMA_Init+0x5be>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a44      	ldr	r2, [pc, #272]	@ (80038a0 <HAL_DMA_Init+0x698>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d018      	beq.n	80037c6 <HAL_DMA_Init+0x5be>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a42      	ldr	r2, [pc, #264]	@ (80038a4 <HAL_DMA_Init+0x69c>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d013      	beq.n	80037c6 <HAL_DMA_Init+0x5be>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a41      	ldr	r2, [pc, #260]	@ (80038a8 <HAL_DMA_Init+0x6a0>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d00e      	beq.n	80037c6 <HAL_DMA_Init+0x5be>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a3f      	ldr	r2, [pc, #252]	@ (80038ac <HAL_DMA_Init+0x6a4>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d009      	beq.n	80037c6 <HAL_DMA_Init+0x5be>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a3e      	ldr	r2, [pc, #248]	@ (80038b0 <HAL_DMA_Init+0x6a8>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d004      	beq.n	80037c6 <HAL_DMA_Init+0x5be>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a3c      	ldr	r2, [pc, #240]	@ (80038b4 <HAL_DMA_Init+0x6ac>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d101      	bne.n	80037ca <HAL_DMA_Init+0x5c2>
 80037c6:	2301      	movs	r3, #1
 80037c8:	e000      	b.n	80037cc <HAL_DMA_Init+0x5c4>
 80037ca:	2300      	movs	r3, #0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d032      	beq.n	8003836 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 fdb5 	bl	8004340 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	2b80      	cmp	r3, #128	@ 0x80
 80037dc:	d102      	bne.n	80037e4 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ec:	b2d2      	uxtb	r2, r2
 80037ee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80037f8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d010      	beq.n	8003824 <HAL_DMA_Init+0x61c>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2b08      	cmp	r3, #8
 8003808:	d80c      	bhi.n	8003824 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 fe32 	bl	8004474 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003820:	605a      	str	r2, [r3, #4]
 8003822:	e008      	b.n	8003836 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3718      	adds	r7, #24
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	a7fdabf8 	.word	0xa7fdabf8
 8003854:	cccccccd 	.word	0xcccccccd
 8003858:	40020010 	.word	0x40020010
 800385c:	40020028 	.word	0x40020028
 8003860:	40020040 	.word	0x40020040
 8003864:	40020058 	.word	0x40020058
 8003868:	40020070 	.word	0x40020070
 800386c:	40020088 	.word	0x40020088
 8003870:	400200a0 	.word	0x400200a0
 8003874:	400200b8 	.word	0x400200b8
 8003878:	40020410 	.word	0x40020410
 800387c:	40020428 	.word	0x40020428
 8003880:	40020440 	.word	0x40020440
 8003884:	40020458 	.word	0x40020458
 8003888:	40020470 	.word	0x40020470
 800388c:	40020488 	.word	0x40020488
 8003890:	400204a0 	.word	0x400204a0
 8003894:	400204b8 	.word	0x400204b8
 8003898:	58025408 	.word	0x58025408
 800389c:	5802541c 	.word	0x5802541c
 80038a0:	58025430 	.word	0x58025430
 80038a4:	58025444 	.word	0x58025444
 80038a8:	58025458 	.word	0x58025458
 80038ac:	5802546c 	.word	0x5802546c
 80038b0:	58025480 	.word	0x58025480
 80038b4:	58025494 	.word	0x58025494

080038b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	607a      	str	r2, [r7, #4]
 80038c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038c6:	2300      	movs	r3, #0
 80038c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e226      	b.n	8003d22 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d101      	bne.n	80038e2 <HAL_DMA_Start_IT+0x2a>
 80038de:	2302      	movs	r3, #2
 80038e0:	e21f      	b.n	8003d22 <HAL_DMA_Start_IT+0x46a>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	f040 820a 	bne.w	8003d0c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2202      	movs	r2, #2
 80038fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a68      	ldr	r2, [pc, #416]	@ (8003aac <HAL_DMA_Start_IT+0x1f4>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d04a      	beq.n	80039a6 <HAL_DMA_Start_IT+0xee>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a66      	ldr	r2, [pc, #408]	@ (8003ab0 <HAL_DMA_Start_IT+0x1f8>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d045      	beq.n	80039a6 <HAL_DMA_Start_IT+0xee>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a65      	ldr	r2, [pc, #404]	@ (8003ab4 <HAL_DMA_Start_IT+0x1fc>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d040      	beq.n	80039a6 <HAL_DMA_Start_IT+0xee>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a63      	ldr	r2, [pc, #396]	@ (8003ab8 <HAL_DMA_Start_IT+0x200>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d03b      	beq.n	80039a6 <HAL_DMA_Start_IT+0xee>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a62      	ldr	r2, [pc, #392]	@ (8003abc <HAL_DMA_Start_IT+0x204>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d036      	beq.n	80039a6 <HAL_DMA_Start_IT+0xee>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a60      	ldr	r2, [pc, #384]	@ (8003ac0 <HAL_DMA_Start_IT+0x208>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d031      	beq.n	80039a6 <HAL_DMA_Start_IT+0xee>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a5f      	ldr	r2, [pc, #380]	@ (8003ac4 <HAL_DMA_Start_IT+0x20c>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d02c      	beq.n	80039a6 <HAL_DMA_Start_IT+0xee>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a5d      	ldr	r2, [pc, #372]	@ (8003ac8 <HAL_DMA_Start_IT+0x210>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d027      	beq.n	80039a6 <HAL_DMA_Start_IT+0xee>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a5c      	ldr	r2, [pc, #368]	@ (8003acc <HAL_DMA_Start_IT+0x214>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d022      	beq.n	80039a6 <HAL_DMA_Start_IT+0xee>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a5a      	ldr	r2, [pc, #360]	@ (8003ad0 <HAL_DMA_Start_IT+0x218>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d01d      	beq.n	80039a6 <HAL_DMA_Start_IT+0xee>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a59      	ldr	r2, [pc, #356]	@ (8003ad4 <HAL_DMA_Start_IT+0x21c>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d018      	beq.n	80039a6 <HAL_DMA_Start_IT+0xee>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a57      	ldr	r2, [pc, #348]	@ (8003ad8 <HAL_DMA_Start_IT+0x220>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d013      	beq.n	80039a6 <HAL_DMA_Start_IT+0xee>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a56      	ldr	r2, [pc, #344]	@ (8003adc <HAL_DMA_Start_IT+0x224>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d00e      	beq.n	80039a6 <HAL_DMA_Start_IT+0xee>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a54      	ldr	r2, [pc, #336]	@ (8003ae0 <HAL_DMA_Start_IT+0x228>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d009      	beq.n	80039a6 <HAL_DMA_Start_IT+0xee>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a53      	ldr	r2, [pc, #332]	@ (8003ae4 <HAL_DMA_Start_IT+0x22c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d004      	beq.n	80039a6 <HAL_DMA_Start_IT+0xee>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a51      	ldr	r2, [pc, #324]	@ (8003ae8 <HAL_DMA_Start_IT+0x230>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d108      	bne.n	80039b8 <HAL_DMA_Start_IT+0x100>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f022 0201 	bic.w	r2, r2, #1
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	e007      	b.n	80039c8 <HAL_DMA_Start_IT+0x110>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0201 	bic.w	r2, r2, #1
 80039c6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	68b9      	ldr	r1, [r7, #8]
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f000 f9dc 	bl	8003d8c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a34      	ldr	r2, [pc, #208]	@ (8003aac <HAL_DMA_Start_IT+0x1f4>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d04a      	beq.n	8003a74 <HAL_DMA_Start_IT+0x1bc>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a33      	ldr	r2, [pc, #204]	@ (8003ab0 <HAL_DMA_Start_IT+0x1f8>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d045      	beq.n	8003a74 <HAL_DMA_Start_IT+0x1bc>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a31      	ldr	r2, [pc, #196]	@ (8003ab4 <HAL_DMA_Start_IT+0x1fc>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d040      	beq.n	8003a74 <HAL_DMA_Start_IT+0x1bc>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a30      	ldr	r2, [pc, #192]	@ (8003ab8 <HAL_DMA_Start_IT+0x200>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d03b      	beq.n	8003a74 <HAL_DMA_Start_IT+0x1bc>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a2e      	ldr	r2, [pc, #184]	@ (8003abc <HAL_DMA_Start_IT+0x204>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d036      	beq.n	8003a74 <HAL_DMA_Start_IT+0x1bc>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a2d      	ldr	r2, [pc, #180]	@ (8003ac0 <HAL_DMA_Start_IT+0x208>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d031      	beq.n	8003a74 <HAL_DMA_Start_IT+0x1bc>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a2b      	ldr	r2, [pc, #172]	@ (8003ac4 <HAL_DMA_Start_IT+0x20c>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d02c      	beq.n	8003a74 <HAL_DMA_Start_IT+0x1bc>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a2a      	ldr	r2, [pc, #168]	@ (8003ac8 <HAL_DMA_Start_IT+0x210>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d027      	beq.n	8003a74 <HAL_DMA_Start_IT+0x1bc>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a28      	ldr	r2, [pc, #160]	@ (8003acc <HAL_DMA_Start_IT+0x214>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d022      	beq.n	8003a74 <HAL_DMA_Start_IT+0x1bc>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a27      	ldr	r2, [pc, #156]	@ (8003ad0 <HAL_DMA_Start_IT+0x218>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d01d      	beq.n	8003a74 <HAL_DMA_Start_IT+0x1bc>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a25      	ldr	r2, [pc, #148]	@ (8003ad4 <HAL_DMA_Start_IT+0x21c>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d018      	beq.n	8003a74 <HAL_DMA_Start_IT+0x1bc>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a24      	ldr	r2, [pc, #144]	@ (8003ad8 <HAL_DMA_Start_IT+0x220>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d013      	beq.n	8003a74 <HAL_DMA_Start_IT+0x1bc>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a22      	ldr	r2, [pc, #136]	@ (8003adc <HAL_DMA_Start_IT+0x224>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d00e      	beq.n	8003a74 <HAL_DMA_Start_IT+0x1bc>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a21      	ldr	r2, [pc, #132]	@ (8003ae0 <HAL_DMA_Start_IT+0x228>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d009      	beq.n	8003a74 <HAL_DMA_Start_IT+0x1bc>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a1f      	ldr	r2, [pc, #124]	@ (8003ae4 <HAL_DMA_Start_IT+0x22c>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d004      	beq.n	8003a74 <HAL_DMA_Start_IT+0x1bc>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a1e      	ldr	r2, [pc, #120]	@ (8003ae8 <HAL_DMA_Start_IT+0x230>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d101      	bne.n	8003a78 <HAL_DMA_Start_IT+0x1c0>
 8003a74:	2301      	movs	r3, #1
 8003a76:	e000      	b.n	8003a7a <HAL_DMA_Start_IT+0x1c2>
 8003a78:	2300      	movs	r3, #0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d036      	beq.n	8003aec <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f023 021e 	bic.w	r2, r3, #30
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f042 0216 	orr.w	r2, r2, #22
 8003a90:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d03e      	beq.n	8003b18 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f042 0208 	orr.w	r2, r2, #8
 8003aa8:	601a      	str	r2, [r3, #0]
 8003aaa:	e035      	b.n	8003b18 <HAL_DMA_Start_IT+0x260>
 8003aac:	40020010 	.word	0x40020010
 8003ab0:	40020028 	.word	0x40020028
 8003ab4:	40020040 	.word	0x40020040
 8003ab8:	40020058 	.word	0x40020058
 8003abc:	40020070 	.word	0x40020070
 8003ac0:	40020088 	.word	0x40020088
 8003ac4:	400200a0 	.word	0x400200a0
 8003ac8:	400200b8 	.word	0x400200b8
 8003acc:	40020410 	.word	0x40020410
 8003ad0:	40020428 	.word	0x40020428
 8003ad4:	40020440 	.word	0x40020440
 8003ad8:	40020458 	.word	0x40020458
 8003adc:	40020470 	.word	0x40020470
 8003ae0:	40020488 	.word	0x40020488
 8003ae4:	400204a0 	.word	0x400204a0
 8003ae8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f023 020e 	bic.w	r2, r3, #14
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 020a 	orr.w	r2, r2, #10
 8003afe:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d007      	beq.n	8003b18 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 0204 	orr.w	r2, r2, #4
 8003b16:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a83      	ldr	r2, [pc, #524]	@ (8003d2c <HAL_DMA_Start_IT+0x474>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d072      	beq.n	8003c08 <HAL_DMA_Start_IT+0x350>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a82      	ldr	r2, [pc, #520]	@ (8003d30 <HAL_DMA_Start_IT+0x478>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d06d      	beq.n	8003c08 <HAL_DMA_Start_IT+0x350>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a80      	ldr	r2, [pc, #512]	@ (8003d34 <HAL_DMA_Start_IT+0x47c>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d068      	beq.n	8003c08 <HAL_DMA_Start_IT+0x350>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a7f      	ldr	r2, [pc, #508]	@ (8003d38 <HAL_DMA_Start_IT+0x480>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d063      	beq.n	8003c08 <HAL_DMA_Start_IT+0x350>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a7d      	ldr	r2, [pc, #500]	@ (8003d3c <HAL_DMA_Start_IT+0x484>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d05e      	beq.n	8003c08 <HAL_DMA_Start_IT+0x350>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a7c      	ldr	r2, [pc, #496]	@ (8003d40 <HAL_DMA_Start_IT+0x488>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d059      	beq.n	8003c08 <HAL_DMA_Start_IT+0x350>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a7a      	ldr	r2, [pc, #488]	@ (8003d44 <HAL_DMA_Start_IT+0x48c>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d054      	beq.n	8003c08 <HAL_DMA_Start_IT+0x350>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a79      	ldr	r2, [pc, #484]	@ (8003d48 <HAL_DMA_Start_IT+0x490>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d04f      	beq.n	8003c08 <HAL_DMA_Start_IT+0x350>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a77      	ldr	r2, [pc, #476]	@ (8003d4c <HAL_DMA_Start_IT+0x494>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d04a      	beq.n	8003c08 <HAL_DMA_Start_IT+0x350>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a76      	ldr	r2, [pc, #472]	@ (8003d50 <HAL_DMA_Start_IT+0x498>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d045      	beq.n	8003c08 <HAL_DMA_Start_IT+0x350>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a74      	ldr	r2, [pc, #464]	@ (8003d54 <HAL_DMA_Start_IT+0x49c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d040      	beq.n	8003c08 <HAL_DMA_Start_IT+0x350>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a73      	ldr	r2, [pc, #460]	@ (8003d58 <HAL_DMA_Start_IT+0x4a0>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d03b      	beq.n	8003c08 <HAL_DMA_Start_IT+0x350>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a71      	ldr	r2, [pc, #452]	@ (8003d5c <HAL_DMA_Start_IT+0x4a4>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d036      	beq.n	8003c08 <HAL_DMA_Start_IT+0x350>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a70      	ldr	r2, [pc, #448]	@ (8003d60 <HAL_DMA_Start_IT+0x4a8>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d031      	beq.n	8003c08 <HAL_DMA_Start_IT+0x350>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a6e      	ldr	r2, [pc, #440]	@ (8003d64 <HAL_DMA_Start_IT+0x4ac>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d02c      	beq.n	8003c08 <HAL_DMA_Start_IT+0x350>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a6d      	ldr	r2, [pc, #436]	@ (8003d68 <HAL_DMA_Start_IT+0x4b0>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d027      	beq.n	8003c08 <HAL_DMA_Start_IT+0x350>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a6b      	ldr	r2, [pc, #428]	@ (8003d6c <HAL_DMA_Start_IT+0x4b4>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d022      	beq.n	8003c08 <HAL_DMA_Start_IT+0x350>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a6a      	ldr	r2, [pc, #424]	@ (8003d70 <HAL_DMA_Start_IT+0x4b8>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d01d      	beq.n	8003c08 <HAL_DMA_Start_IT+0x350>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a68      	ldr	r2, [pc, #416]	@ (8003d74 <HAL_DMA_Start_IT+0x4bc>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d018      	beq.n	8003c08 <HAL_DMA_Start_IT+0x350>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a67      	ldr	r2, [pc, #412]	@ (8003d78 <HAL_DMA_Start_IT+0x4c0>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d013      	beq.n	8003c08 <HAL_DMA_Start_IT+0x350>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a65      	ldr	r2, [pc, #404]	@ (8003d7c <HAL_DMA_Start_IT+0x4c4>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d00e      	beq.n	8003c08 <HAL_DMA_Start_IT+0x350>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a64      	ldr	r2, [pc, #400]	@ (8003d80 <HAL_DMA_Start_IT+0x4c8>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d009      	beq.n	8003c08 <HAL_DMA_Start_IT+0x350>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a62      	ldr	r2, [pc, #392]	@ (8003d84 <HAL_DMA_Start_IT+0x4cc>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d004      	beq.n	8003c08 <HAL_DMA_Start_IT+0x350>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a61      	ldr	r2, [pc, #388]	@ (8003d88 <HAL_DMA_Start_IT+0x4d0>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d101      	bne.n	8003c0c <HAL_DMA_Start_IT+0x354>
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e000      	b.n	8003c0e <HAL_DMA_Start_IT+0x356>
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d01a      	beq.n	8003c48 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d007      	beq.n	8003c30 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c2e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d007      	beq.n	8003c48 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c46:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a37      	ldr	r2, [pc, #220]	@ (8003d2c <HAL_DMA_Start_IT+0x474>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d04a      	beq.n	8003ce8 <HAL_DMA_Start_IT+0x430>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a36      	ldr	r2, [pc, #216]	@ (8003d30 <HAL_DMA_Start_IT+0x478>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d045      	beq.n	8003ce8 <HAL_DMA_Start_IT+0x430>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a34      	ldr	r2, [pc, #208]	@ (8003d34 <HAL_DMA_Start_IT+0x47c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d040      	beq.n	8003ce8 <HAL_DMA_Start_IT+0x430>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a33      	ldr	r2, [pc, #204]	@ (8003d38 <HAL_DMA_Start_IT+0x480>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d03b      	beq.n	8003ce8 <HAL_DMA_Start_IT+0x430>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a31      	ldr	r2, [pc, #196]	@ (8003d3c <HAL_DMA_Start_IT+0x484>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d036      	beq.n	8003ce8 <HAL_DMA_Start_IT+0x430>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a30      	ldr	r2, [pc, #192]	@ (8003d40 <HAL_DMA_Start_IT+0x488>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d031      	beq.n	8003ce8 <HAL_DMA_Start_IT+0x430>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a2e      	ldr	r2, [pc, #184]	@ (8003d44 <HAL_DMA_Start_IT+0x48c>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d02c      	beq.n	8003ce8 <HAL_DMA_Start_IT+0x430>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a2d      	ldr	r2, [pc, #180]	@ (8003d48 <HAL_DMA_Start_IT+0x490>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d027      	beq.n	8003ce8 <HAL_DMA_Start_IT+0x430>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a2b      	ldr	r2, [pc, #172]	@ (8003d4c <HAL_DMA_Start_IT+0x494>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d022      	beq.n	8003ce8 <HAL_DMA_Start_IT+0x430>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a2a      	ldr	r2, [pc, #168]	@ (8003d50 <HAL_DMA_Start_IT+0x498>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d01d      	beq.n	8003ce8 <HAL_DMA_Start_IT+0x430>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a28      	ldr	r2, [pc, #160]	@ (8003d54 <HAL_DMA_Start_IT+0x49c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d018      	beq.n	8003ce8 <HAL_DMA_Start_IT+0x430>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a27      	ldr	r2, [pc, #156]	@ (8003d58 <HAL_DMA_Start_IT+0x4a0>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d013      	beq.n	8003ce8 <HAL_DMA_Start_IT+0x430>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a25      	ldr	r2, [pc, #148]	@ (8003d5c <HAL_DMA_Start_IT+0x4a4>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d00e      	beq.n	8003ce8 <HAL_DMA_Start_IT+0x430>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a24      	ldr	r2, [pc, #144]	@ (8003d60 <HAL_DMA_Start_IT+0x4a8>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d009      	beq.n	8003ce8 <HAL_DMA_Start_IT+0x430>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a22      	ldr	r2, [pc, #136]	@ (8003d64 <HAL_DMA_Start_IT+0x4ac>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d004      	beq.n	8003ce8 <HAL_DMA_Start_IT+0x430>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a21      	ldr	r2, [pc, #132]	@ (8003d68 <HAL_DMA_Start_IT+0x4b0>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d108      	bne.n	8003cfa <HAL_DMA_Start_IT+0x442>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 0201 	orr.w	r2, r2, #1
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	e012      	b.n	8003d20 <HAL_DMA_Start_IT+0x468>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f042 0201 	orr.w	r2, r2, #1
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	e009      	b.n	8003d20 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d12:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3718      	adds	r7, #24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40020010 	.word	0x40020010
 8003d30:	40020028 	.word	0x40020028
 8003d34:	40020040 	.word	0x40020040
 8003d38:	40020058 	.word	0x40020058
 8003d3c:	40020070 	.word	0x40020070
 8003d40:	40020088 	.word	0x40020088
 8003d44:	400200a0 	.word	0x400200a0
 8003d48:	400200b8 	.word	0x400200b8
 8003d4c:	40020410 	.word	0x40020410
 8003d50:	40020428 	.word	0x40020428
 8003d54:	40020440 	.word	0x40020440
 8003d58:	40020458 	.word	0x40020458
 8003d5c:	40020470 	.word	0x40020470
 8003d60:	40020488 	.word	0x40020488
 8003d64:	400204a0 	.word	0x400204a0
 8003d68:	400204b8 	.word	0x400204b8
 8003d6c:	58025408 	.word	0x58025408
 8003d70:	5802541c 	.word	0x5802541c
 8003d74:	58025430 	.word	0x58025430
 8003d78:	58025444 	.word	0x58025444
 8003d7c:	58025458 	.word	0x58025458
 8003d80:	5802546c 	.word	0x5802546c
 8003d84:	58025480 	.word	0x58025480
 8003d88:	58025494 	.word	0x58025494

08003d8c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b087      	sub	sp, #28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
 8003d98:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d9e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003da4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a7f      	ldr	r2, [pc, #508]	@ (8003fa8 <DMA_SetConfig+0x21c>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d072      	beq.n	8003e96 <DMA_SetConfig+0x10a>
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a7d      	ldr	r2, [pc, #500]	@ (8003fac <DMA_SetConfig+0x220>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d06d      	beq.n	8003e96 <DMA_SetConfig+0x10a>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a7c      	ldr	r2, [pc, #496]	@ (8003fb0 <DMA_SetConfig+0x224>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d068      	beq.n	8003e96 <DMA_SetConfig+0x10a>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a7a      	ldr	r2, [pc, #488]	@ (8003fb4 <DMA_SetConfig+0x228>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d063      	beq.n	8003e96 <DMA_SetConfig+0x10a>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a79      	ldr	r2, [pc, #484]	@ (8003fb8 <DMA_SetConfig+0x22c>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d05e      	beq.n	8003e96 <DMA_SetConfig+0x10a>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a77      	ldr	r2, [pc, #476]	@ (8003fbc <DMA_SetConfig+0x230>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d059      	beq.n	8003e96 <DMA_SetConfig+0x10a>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a76      	ldr	r2, [pc, #472]	@ (8003fc0 <DMA_SetConfig+0x234>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d054      	beq.n	8003e96 <DMA_SetConfig+0x10a>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a74      	ldr	r2, [pc, #464]	@ (8003fc4 <DMA_SetConfig+0x238>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d04f      	beq.n	8003e96 <DMA_SetConfig+0x10a>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a73      	ldr	r2, [pc, #460]	@ (8003fc8 <DMA_SetConfig+0x23c>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d04a      	beq.n	8003e96 <DMA_SetConfig+0x10a>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a71      	ldr	r2, [pc, #452]	@ (8003fcc <DMA_SetConfig+0x240>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d045      	beq.n	8003e96 <DMA_SetConfig+0x10a>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a70      	ldr	r2, [pc, #448]	@ (8003fd0 <DMA_SetConfig+0x244>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d040      	beq.n	8003e96 <DMA_SetConfig+0x10a>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a6e      	ldr	r2, [pc, #440]	@ (8003fd4 <DMA_SetConfig+0x248>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d03b      	beq.n	8003e96 <DMA_SetConfig+0x10a>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a6d      	ldr	r2, [pc, #436]	@ (8003fd8 <DMA_SetConfig+0x24c>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d036      	beq.n	8003e96 <DMA_SetConfig+0x10a>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a6b      	ldr	r2, [pc, #428]	@ (8003fdc <DMA_SetConfig+0x250>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d031      	beq.n	8003e96 <DMA_SetConfig+0x10a>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a6a      	ldr	r2, [pc, #424]	@ (8003fe0 <DMA_SetConfig+0x254>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d02c      	beq.n	8003e96 <DMA_SetConfig+0x10a>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a68      	ldr	r2, [pc, #416]	@ (8003fe4 <DMA_SetConfig+0x258>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d027      	beq.n	8003e96 <DMA_SetConfig+0x10a>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a67      	ldr	r2, [pc, #412]	@ (8003fe8 <DMA_SetConfig+0x25c>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d022      	beq.n	8003e96 <DMA_SetConfig+0x10a>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a65      	ldr	r2, [pc, #404]	@ (8003fec <DMA_SetConfig+0x260>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d01d      	beq.n	8003e96 <DMA_SetConfig+0x10a>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a64      	ldr	r2, [pc, #400]	@ (8003ff0 <DMA_SetConfig+0x264>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d018      	beq.n	8003e96 <DMA_SetConfig+0x10a>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a62      	ldr	r2, [pc, #392]	@ (8003ff4 <DMA_SetConfig+0x268>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d013      	beq.n	8003e96 <DMA_SetConfig+0x10a>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a61      	ldr	r2, [pc, #388]	@ (8003ff8 <DMA_SetConfig+0x26c>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d00e      	beq.n	8003e96 <DMA_SetConfig+0x10a>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a5f      	ldr	r2, [pc, #380]	@ (8003ffc <DMA_SetConfig+0x270>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d009      	beq.n	8003e96 <DMA_SetConfig+0x10a>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a5e      	ldr	r2, [pc, #376]	@ (8004000 <DMA_SetConfig+0x274>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d004      	beq.n	8003e96 <DMA_SetConfig+0x10a>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a5c      	ldr	r2, [pc, #368]	@ (8004004 <DMA_SetConfig+0x278>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d101      	bne.n	8003e9a <DMA_SetConfig+0x10e>
 8003e96:	2301      	movs	r3, #1
 8003e98:	e000      	b.n	8003e9c <DMA_SetConfig+0x110>
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00d      	beq.n	8003ebc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003ea8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d004      	beq.n	8003ebc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003eba:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a39      	ldr	r2, [pc, #228]	@ (8003fa8 <DMA_SetConfig+0x21c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d04a      	beq.n	8003f5c <DMA_SetConfig+0x1d0>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a38      	ldr	r2, [pc, #224]	@ (8003fac <DMA_SetConfig+0x220>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d045      	beq.n	8003f5c <DMA_SetConfig+0x1d0>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a36      	ldr	r2, [pc, #216]	@ (8003fb0 <DMA_SetConfig+0x224>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d040      	beq.n	8003f5c <DMA_SetConfig+0x1d0>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a35      	ldr	r2, [pc, #212]	@ (8003fb4 <DMA_SetConfig+0x228>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d03b      	beq.n	8003f5c <DMA_SetConfig+0x1d0>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a33      	ldr	r2, [pc, #204]	@ (8003fb8 <DMA_SetConfig+0x22c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d036      	beq.n	8003f5c <DMA_SetConfig+0x1d0>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a32      	ldr	r2, [pc, #200]	@ (8003fbc <DMA_SetConfig+0x230>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d031      	beq.n	8003f5c <DMA_SetConfig+0x1d0>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a30      	ldr	r2, [pc, #192]	@ (8003fc0 <DMA_SetConfig+0x234>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d02c      	beq.n	8003f5c <DMA_SetConfig+0x1d0>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a2f      	ldr	r2, [pc, #188]	@ (8003fc4 <DMA_SetConfig+0x238>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d027      	beq.n	8003f5c <DMA_SetConfig+0x1d0>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a2d      	ldr	r2, [pc, #180]	@ (8003fc8 <DMA_SetConfig+0x23c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d022      	beq.n	8003f5c <DMA_SetConfig+0x1d0>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a2c      	ldr	r2, [pc, #176]	@ (8003fcc <DMA_SetConfig+0x240>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d01d      	beq.n	8003f5c <DMA_SetConfig+0x1d0>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a2a      	ldr	r2, [pc, #168]	@ (8003fd0 <DMA_SetConfig+0x244>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d018      	beq.n	8003f5c <DMA_SetConfig+0x1d0>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a29      	ldr	r2, [pc, #164]	@ (8003fd4 <DMA_SetConfig+0x248>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d013      	beq.n	8003f5c <DMA_SetConfig+0x1d0>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a27      	ldr	r2, [pc, #156]	@ (8003fd8 <DMA_SetConfig+0x24c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d00e      	beq.n	8003f5c <DMA_SetConfig+0x1d0>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a26      	ldr	r2, [pc, #152]	@ (8003fdc <DMA_SetConfig+0x250>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d009      	beq.n	8003f5c <DMA_SetConfig+0x1d0>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a24      	ldr	r2, [pc, #144]	@ (8003fe0 <DMA_SetConfig+0x254>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d004      	beq.n	8003f5c <DMA_SetConfig+0x1d0>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a23      	ldr	r2, [pc, #140]	@ (8003fe4 <DMA_SetConfig+0x258>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d101      	bne.n	8003f60 <DMA_SetConfig+0x1d4>
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e000      	b.n	8003f62 <DMA_SetConfig+0x1d6>
 8003f60:	2300      	movs	r3, #0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d059      	beq.n	800401a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f6a:	f003 031f 	and.w	r3, r3, #31
 8003f6e:	223f      	movs	r2, #63	@ 0x3f
 8003f70:	409a      	lsls	r2, r3
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003f84:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	2b40      	cmp	r3, #64	@ 0x40
 8003f94:	d138      	bne.n	8004008 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003fa6:	e086      	b.n	80040b6 <DMA_SetConfig+0x32a>
 8003fa8:	40020010 	.word	0x40020010
 8003fac:	40020028 	.word	0x40020028
 8003fb0:	40020040 	.word	0x40020040
 8003fb4:	40020058 	.word	0x40020058
 8003fb8:	40020070 	.word	0x40020070
 8003fbc:	40020088 	.word	0x40020088
 8003fc0:	400200a0 	.word	0x400200a0
 8003fc4:	400200b8 	.word	0x400200b8
 8003fc8:	40020410 	.word	0x40020410
 8003fcc:	40020428 	.word	0x40020428
 8003fd0:	40020440 	.word	0x40020440
 8003fd4:	40020458 	.word	0x40020458
 8003fd8:	40020470 	.word	0x40020470
 8003fdc:	40020488 	.word	0x40020488
 8003fe0:	400204a0 	.word	0x400204a0
 8003fe4:	400204b8 	.word	0x400204b8
 8003fe8:	58025408 	.word	0x58025408
 8003fec:	5802541c 	.word	0x5802541c
 8003ff0:	58025430 	.word	0x58025430
 8003ff4:	58025444 	.word	0x58025444
 8003ff8:	58025458 	.word	0x58025458
 8003ffc:	5802546c 	.word	0x5802546c
 8004000:	58025480 	.word	0x58025480
 8004004:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	60da      	str	r2, [r3, #12]
}
 8004018:	e04d      	b.n	80040b6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a29      	ldr	r2, [pc, #164]	@ (80040c4 <DMA_SetConfig+0x338>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d022      	beq.n	800406a <DMA_SetConfig+0x2de>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a27      	ldr	r2, [pc, #156]	@ (80040c8 <DMA_SetConfig+0x33c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d01d      	beq.n	800406a <DMA_SetConfig+0x2de>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a26      	ldr	r2, [pc, #152]	@ (80040cc <DMA_SetConfig+0x340>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d018      	beq.n	800406a <DMA_SetConfig+0x2de>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a24      	ldr	r2, [pc, #144]	@ (80040d0 <DMA_SetConfig+0x344>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d013      	beq.n	800406a <DMA_SetConfig+0x2de>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a23      	ldr	r2, [pc, #140]	@ (80040d4 <DMA_SetConfig+0x348>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d00e      	beq.n	800406a <DMA_SetConfig+0x2de>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a21      	ldr	r2, [pc, #132]	@ (80040d8 <DMA_SetConfig+0x34c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d009      	beq.n	800406a <DMA_SetConfig+0x2de>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a20      	ldr	r2, [pc, #128]	@ (80040dc <DMA_SetConfig+0x350>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d004      	beq.n	800406a <DMA_SetConfig+0x2de>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a1e      	ldr	r2, [pc, #120]	@ (80040e0 <DMA_SetConfig+0x354>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d101      	bne.n	800406e <DMA_SetConfig+0x2e2>
 800406a:	2301      	movs	r3, #1
 800406c:	e000      	b.n	8004070 <DMA_SetConfig+0x2e4>
 800406e:	2300      	movs	r3, #0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d020      	beq.n	80040b6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004078:	f003 031f 	and.w	r3, r3, #31
 800407c:	2201      	movs	r2, #1
 800407e:	409a      	lsls	r2, r3
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	2b40      	cmp	r3, #64	@ 0x40
 8004092:	d108      	bne.n	80040a6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	60da      	str	r2, [r3, #12]
}
 80040a4:	e007      	b.n	80040b6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	60da      	str	r2, [r3, #12]
}
 80040b6:	bf00      	nop
 80040b8:	371c      	adds	r7, #28
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	58025408 	.word	0x58025408
 80040c8:	5802541c 	.word	0x5802541c
 80040cc:	58025430 	.word	0x58025430
 80040d0:	58025444 	.word	0x58025444
 80040d4:	58025458 	.word	0x58025458
 80040d8:	5802546c 	.word	0x5802546c
 80040dc:	58025480 	.word	0x58025480
 80040e0:	58025494 	.word	0x58025494

080040e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a42      	ldr	r2, [pc, #264]	@ (80041fc <DMA_CalcBaseAndBitshift+0x118>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d04a      	beq.n	800418c <DMA_CalcBaseAndBitshift+0xa8>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a41      	ldr	r2, [pc, #260]	@ (8004200 <DMA_CalcBaseAndBitshift+0x11c>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d045      	beq.n	800418c <DMA_CalcBaseAndBitshift+0xa8>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a3f      	ldr	r2, [pc, #252]	@ (8004204 <DMA_CalcBaseAndBitshift+0x120>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d040      	beq.n	800418c <DMA_CalcBaseAndBitshift+0xa8>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a3e      	ldr	r2, [pc, #248]	@ (8004208 <DMA_CalcBaseAndBitshift+0x124>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d03b      	beq.n	800418c <DMA_CalcBaseAndBitshift+0xa8>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a3c      	ldr	r2, [pc, #240]	@ (800420c <DMA_CalcBaseAndBitshift+0x128>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d036      	beq.n	800418c <DMA_CalcBaseAndBitshift+0xa8>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a3b      	ldr	r2, [pc, #236]	@ (8004210 <DMA_CalcBaseAndBitshift+0x12c>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d031      	beq.n	800418c <DMA_CalcBaseAndBitshift+0xa8>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a39      	ldr	r2, [pc, #228]	@ (8004214 <DMA_CalcBaseAndBitshift+0x130>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d02c      	beq.n	800418c <DMA_CalcBaseAndBitshift+0xa8>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a38      	ldr	r2, [pc, #224]	@ (8004218 <DMA_CalcBaseAndBitshift+0x134>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d027      	beq.n	800418c <DMA_CalcBaseAndBitshift+0xa8>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a36      	ldr	r2, [pc, #216]	@ (800421c <DMA_CalcBaseAndBitshift+0x138>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d022      	beq.n	800418c <DMA_CalcBaseAndBitshift+0xa8>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a35      	ldr	r2, [pc, #212]	@ (8004220 <DMA_CalcBaseAndBitshift+0x13c>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d01d      	beq.n	800418c <DMA_CalcBaseAndBitshift+0xa8>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a33      	ldr	r2, [pc, #204]	@ (8004224 <DMA_CalcBaseAndBitshift+0x140>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d018      	beq.n	800418c <DMA_CalcBaseAndBitshift+0xa8>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a32      	ldr	r2, [pc, #200]	@ (8004228 <DMA_CalcBaseAndBitshift+0x144>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d013      	beq.n	800418c <DMA_CalcBaseAndBitshift+0xa8>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a30      	ldr	r2, [pc, #192]	@ (800422c <DMA_CalcBaseAndBitshift+0x148>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d00e      	beq.n	800418c <DMA_CalcBaseAndBitshift+0xa8>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a2f      	ldr	r2, [pc, #188]	@ (8004230 <DMA_CalcBaseAndBitshift+0x14c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d009      	beq.n	800418c <DMA_CalcBaseAndBitshift+0xa8>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a2d      	ldr	r2, [pc, #180]	@ (8004234 <DMA_CalcBaseAndBitshift+0x150>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d004      	beq.n	800418c <DMA_CalcBaseAndBitshift+0xa8>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a2c      	ldr	r2, [pc, #176]	@ (8004238 <DMA_CalcBaseAndBitshift+0x154>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d101      	bne.n	8004190 <DMA_CalcBaseAndBitshift+0xac>
 800418c:	2301      	movs	r3, #1
 800418e:	e000      	b.n	8004192 <DMA_CalcBaseAndBitshift+0xae>
 8004190:	2300      	movs	r3, #0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d024      	beq.n	80041e0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	b2db      	uxtb	r3, r3
 800419c:	3b10      	subs	r3, #16
 800419e:	4a27      	ldr	r2, [pc, #156]	@ (800423c <DMA_CalcBaseAndBitshift+0x158>)
 80041a0:	fba2 2303 	umull	r2, r3, r2, r3
 80041a4:	091b      	lsrs	r3, r3, #4
 80041a6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f003 0307 	and.w	r3, r3, #7
 80041ae:	4a24      	ldr	r2, [pc, #144]	@ (8004240 <DMA_CalcBaseAndBitshift+0x15c>)
 80041b0:	5cd3      	ldrb	r3, [r2, r3]
 80041b2:	461a      	mov	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2b03      	cmp	r3, #3
 80041bc:	d908      	bls.n	80041d0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	4b1f      	ldr	r3, [pc, #124]	@ (8004244 <DMA_CalcBaseAndBitshift+0x160>)
 80041c6:	4013      	ands	r3, r2
 80041c8:	1d1a      	adds	r2, r3, #4
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	659a      	str	r2, [r3, #88]	@ 0x58
 80041ce:	e00d      	b.n	80041ec <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	461a      	mov	r2, r3
 80041d6:	4b1b      	ldr	r3, [pc, #108]	@ (8004244 <DMA_CalcBaseAndBitshift+0x160>)
 80041d8:	4013      	ands	r3, r2
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80041de:	e005      	b.n	80041ec <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3714      	adds	r7, #20
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr
 80041fc:	40020010 	.word	0x40020010
 8004200:	40020028 	.word	0x40020028
 8004204:	40020040 	.word	0x40020040
 8004208:	40020058 	.word	0x40020058
 800420c:	40020070 	.word	0x40020070
 8004210:	40020088 	.word	0x40020088
 8004214:	400200a0 	.word	0x400200a0
 8004218:	400200b8 	.word	0x400200b8
 800421c:	40020410 	.word	0x40020410
 8004220:	40020428 	.word	0x40020428
 8004224:	40020440 	.word	0x40020440
 8004228:	40020458 	.word	0x40020458
 800422c:	40020470 	.word	0x40020470
 8004230:	40020488 	.word	0x40020488
 8004234:	400204a0 	.word	0x400204a0
 8004238:	400204b8 	.word	0x400204b8
 800423c:	aaaaaaab 	.word	0xaaaaaaab
 8004240:	0800a1d8 	.word	0x0800a1d8
 8004244:	fffffc00 	.word	0xfffffc00

08004248 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004250:	2300      	movs	r3, #0
 8004252:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d120      	bne.n	800429e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004260:	2b03      	cmp	r3, #3
 8004262:	d858      	bhi.n	8004316 <DMA_CheckFifoParam+0xce>
 8004264:	a201      	add	r2, pc, #4	@ (adr r2, 800426c <DMA_CheckFifoParam+0x24>)
 8004266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426a:	bf00      	nop
 800426c:	0800427d 	.word	0x0800427d
 8004270:	0800428f 	.word	0x0800428f
 8004274:	0800427d 	.word	0x0800427d
 8004278:	08004317 	.word	0x08004317
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004280:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d048      	beq.n	800431a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800428c:	e045      	b.n	800431a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004292:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004296:	d142      	bne.n	800431e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800429c:	e03f      	b.n	800431e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042a6:	d123      	bne.n	80042f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ac:	2b03      	cmp	r3, #3
 80042ae:	d838      	bhi.n	8004322 <DMA_CheckFifoParam+0xda>
 80042b0:	a201      	add	r2, pc, #4	@ (adr r2, 80042b8 <DMA_CheckFifoParam+0x70>)
 80042b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b6:	bf00      	nop
 80042b8:	080042c9 	.word	0x080042c9
 80042bc:	080042cf 	.word	0x080042cf
 80042c0:	080042c9 	.word	0x080042c9
 80042c4:	080042e1 	.word	0x080042e1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	73fb      	strb	r3, [r7, #15]
        break;
 80042cc:	e030      	b.n	8004330 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d025      	beq.n	8004326 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80042de:	e022      	b.n	8004326 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80042e8:	d11f      	bne.n	800432a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80042ee:	e01c      	b.n	800432a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d902      	bls.n	80042fe <DMA_CheckFifoParam+0xb6>
 80042f8:	2b03      	cmp	r3, #3
 80042fa:	d003      	beq.n	8004304 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80042fc:	e018      	b.n	8004330 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	73fb      	strb	r3, [r7, #15]
        break;
 8004302:	e015      	b.n	8004330 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004308:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00e      	beq.n	800432e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	73fb      	strb	r3, [r7, #15]
    break;
 8004314:	e00b      	b.n	800432e <DMA_CheckFifoParam+0xe6>
        break;
 8004316:	bf00      	nop
 8004318:	e00a      	b.n	8004330 <DMA_CheckFifoParam+0xe8>
        break;
 800431a:	bf00      	nop
 800431c:	e008      	b.n	8004330 <DMA_CheckFifoParam+0xe8>
        break;
 800431e:	bf00      	nop
 8004320:	e006      	b.n	8004330 <DMA_CheckFifoParam+0xe8>
        break;
 8004322:	bf00      	nop
 8004324:	e004      	b.n	8004330 <DMA_CheckFifoParam+0xe8>
        break;
 8004326:	bf00      	nop
 8004328:	e002      	b.n	8004330 <DMA_CheckFifoParam+0xe8>
        break;
 800432a:	bf00      	nop
 800432c:	e000      	b.n	8004330 <DMA_CheckFifoParam+0xe8>
    break;
 800432e:	bf00      	nop
    }
  }

  return status;
 8004330:	7bfb      	ldrb	r3, [r7, #15]
}
 8004332:	4618      	mov	r0, r3
 8004334:	3714      	adds	r7, #20
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop

08004340 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a38      	ldr	r2, [pc, #224]	@ (8004434 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d022      	beq.n	800439e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a36      	ldr	r2, [pc, #216]	@ (8004438 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d01d      	beq.n	800439e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a35      	ldr	r2, [pc, #212]	@ (800443c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d018      	beq.n	800439e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a33      	ldr	r2, [pc, #204]	@ (8004440 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d013      	beq.n	800439e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a32      	ldr	r2, [pc, #200]	@ (8004444 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d00e      	beq.n	800439e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a30      	ldr	r2, [pc, #192]	@ (8004448 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d009      	beq.n	800439e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a2f      	ldr	r2, [pc, #188]	@ (800444c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d004      	beq.n	800439e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a2d      	ldr	r2, [pc, #180]	@ (8004450 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d101      	bne.n	80043a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800439e:	2301      	movs	r3, #1
 80043a0:	e000      	b.n	80043a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80043a2:	2300      	movs	r3, #0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d01a      	beq.n	80043de <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	3b08      	subs	r3, #8
 80043b0:	4a28      	ldr	r2, [pc, #160]	@ (8004454 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80043b2:	fba2 2303 	umull	r2, r3, r2, r3
 80043b6:	091b      	lsrs	r3, r3, #4
 80043b8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	4b26      	ldr	r3, [pc, #152]	@ (8004458 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80043be:	4413      	add	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	461a      	mov	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a24      	ldr	r2, [pc, #144]	@ (800445c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80043cc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f003 031f 	and.w	r3, r3, #31
 80043d4:	2201      	movs	r2, #1
 80043d6:	409a      	lsls	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80043dc:	e024      	b.n	8004428 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	3b10      	subs	r3, #16
 80043e6:	4a1e      	ldr	r2, [pc, #120]	@ (8004460 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80043e8:	fba2 2303 	umull	r2, r3, r2, r3
 80043ec:	091b      	lsrs	r3, r3, #4
 80043ee:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	4a1c      	ldr	r2, [pc, #112]	@ (8004464 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d806      	bhi.n	8004406 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4a1b      	ldr	r2, [pc, #108]	@ (8004468 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d902      	bls.n	8004406 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	3308      	adds	r3, #8
 8004404:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	4b18      	ldr	r3, [pc, #96]	@ (800446c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800440a:	4413      	add	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	461a      	mov	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a16      	ldr	r2, [pc, #88]	@ (8004470 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004418:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f003 031f 	and.w	r3, r3, #31
 8004420:	2201      	movs	r2, #1
 8004422:	409a      	lsls	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004428:	bf00      	nop
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	58025408 	.word	0x58025408
 8004438:	5802541c 	.word	0x5802541c
 800443c:	58025430 	.word	0x58025430
 8004440:	58025444 	.word	0x58025444
 8004444:	58025458 	.word	0x58025458
 8004448:	5802546c 	.word	0x5802546c
 800444c:	58025480 	.word	0x58025480
 8004450:	58025494 	.word	0x58025494
 8004454:	cccccccd 	.word	0xcccccccd
 8004458:	16009600 	.word	0x16009600
 800445c:	58025880 	.word	0x58025880
 8004460:	aaaaaaab 	.word	0xaaaaaaab
 8004464:	400204b8 	.word	0x400204b8
 8004468:	4002040f 	.word	0x4002040f
 800446c:	10008200 	.word	0x10008200
 8004470:	40020880 	.word	0x40020880

08004474 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	b2db      	uxtb	r3, r3
 8004482:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d04a      	beq.n	8004520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2b08      	cmp	r3, #8
 800448e:	d847      	bhi.n	8004520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a25      	ldr	r2, [pc, #148]	@ (800452c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d022      	beq.n	80044e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a24      	ldr	r2, [pc, #144]	@ (8004530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d01d      	beq.n	80044e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a22      	ldr	r2, [pc, #136]	@ (8004534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d018      	beq.n	80044e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a21      	ldr	r2, [pc, #132]	@ (8004538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d013      	beq.n	80044e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a1f      	ldr	r2, [pc, #124]	@ (800453c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d00e      	beq.n	80044e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a1e      	ldr	r2, [pc, #120]	@ (8004540 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d009      	beq.n	80044e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a1c      	ldr	r2, [pc, #112]	@ (8004544 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d004      	beq.n	80044e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a1b      	ldr	r2, [pc, #108]	@ (8004548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d101      	bne.n	80044e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80044e0:	2301      	movs	r3, #1
 80044e2:	e000      	b.n	80044e6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80044e4:	2300      	movs	r3, #0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00a      	beq.n	8004500 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	4b17      	ldr	r3, [pc, #92]	@ (800454c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80044ee:	4413      	add	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	461a      	mov	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a15      	ldr	r2, [pc, #84]	@ (8004550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80044fc:	671a      	str	r2, [r3, #112]	@ 0x70
 80044fe:	e009      	b.n	8004514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	4b14      	ldr	r3, [pc, #80]	@ (8004554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004504:	4413      	add	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	461a      	mov	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a11      	ldr	r2, [pc, #68]	@ (8004558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004512:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	3b01      	subs	r3, #1
 8004518:	2201      	movs	r2, #1
 800451a:	409a      	lsls	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004520:	bf00      	nop
 8004522:	3714      	adds	r7, #20
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr
 800452c:	58025408 	.word	0x58025408
 8004530:	5802541c 	.word	0x5802541c
 8004534:	58025430 	.word	0x58025430
 8004538:	58025444 	.word	0x58025444
 800453c:	58025458 	.word	0x58025458
 8004540:	5802546c 	.word	0x5802546c
 8004544:	58025480 	.word	0x58025480
 8004548:	58025494 	.word	0x58025494
 800454c:	1600963f 	.word	0x1600963f
 8004550:	58025940 	.word	0x58025940
 8004554:	1000823f 	.word	0x1000823f
 8004558:	40020940 	.word	0x40020940

0800455c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800455c:	b480      	push	{r7}
 800455e:	b089      	sub	sp, #36	@ 0x24
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004566:	2300      	movs	r3, #0
 8004568:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800456a:	4b86      	ldr	r3, [pc, #536]	@ (8004784 <HAL_GPIO_Init+0x228>)
 800456c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800456e:	e18c      	b.n	800488a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	2101      	movs	r1, #1
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	fa01 f303 	lsl.w	r3, r1, r3
 800457c:	4013      	ands	r3, r2
 800457e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 817e 	beq.w	8004884 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f003 0303 	and.w	r3, r3, #3
 8004590:	2b01      	cmp	r3, #1
 8004592:	d005      	beq.n	80045a0 <HAL_GPIO_Init+0x44>
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f003 0303 	and.w	r3, r3, #3
 800459c:	2b02      	cmp	r3, #2
 800459e:	d130      	bne.n	8004602 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	005b      	lsls	r3, r3, #1
 80045aa:	2203      	movs	r2, #3
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	43db      	mvns	r3, r3
 80045b2:	69ba      	ldr	r2, [r7, #24]
 80045b4:	4013      	ands	r3, r2
 80045b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	68da      	ldr	r2, [r3, #12]
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	fa02 f303 	lsl.w	r3, r2, r3
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045d6:	2201      	movs	r2, #1
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	fa02 f303 	lsl.w	r3, r2, r3
 80045de:	43db      	mvns	r3, r3
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	4013      	ands	r3, r2
 80045e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	091b      	lsrs	r3, r3, #4
 80045ec:	f003 0201 	and.w	r2, r3, #1
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	69ba      	ldr	r2, [r7, #24]
 8004600:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f003 0303 	and.w	r3, r3, #3
 800460a:	2b03      	cmp	r3, #3
 800460c:	d017      	beq.n	800463e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	005b      	lsls	r3, r3, #1
 8004618:	2203      	movs	r2, #3
 800461a:	fa02 f303 	lsl.w	r3, r2, r3
 800461e:	43db      	mvns	r3, r3
 8004620:	69ba      	ldr	r2, [r7, #24]
 8004622:	4013      	ands	r3, r2
 8004624:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	689a      	ldr	r2, [r3, #8]
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	fa02 f303 	lsl.w	r3, r2, r3
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	4313      	orrs	r3, r2
 8004636:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f003 0303 	and.w	r3, r3, #3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d123      	bne.n	8004692 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	08da      	lsrs	r2, r3, #3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	3208      	adds	r2, #8
 8004652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004656:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	220f      	movs	r2, #15
 8004662:	fa02 f303 	lsl.w	r3, r2, r3
 8004666:	43db      	mvns	r3, r3
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	4013      	ands	r3, r2
 800466c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	691a      	ldr	r2, [r3, #16]
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	f003 0307 	and.w	r3, r3, #7
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	fa02 f303 	lsl.w	r3, r2, r3
 800467e:	69ba      	ldr	r2, [r7, #24]
 8004680:	4313      	orrs	r3, r2
 8004682:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	08da      	lsrs	r2, r3, #3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	3208      	adds	r2, #8
 800468c:	69b9      	ldr	r1, [r7, #24]
 800468e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	2203      	movs	r2, #3
 800469e:	fa02 f303 	lsl.w	r3, r2, r3
 80046a2:	43db      	mvns	r3, r3
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	4013      	ands	r3, r2
 80046a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f003 0203 	and.w	r2, r3, #3
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	005b      	lsls	r3, r3, #1
 80046b6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	4313      	orrs	r3, r2
 80046be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 80d8 	beq.w	8004884 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046d4:	4b2c      	ldr	r3, [pc, #176]	@ (8004788 <HAL_GPIO_Init+0x22c>)
 80046d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80046da:	4a2b      	ldr	r2, [pc, #172]	@ (8004788 <HAL_GPIO_Init+0x22c>)
 80046dc:	f043 0302 	orr.w	r3, r3, #2
 80046e0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80046e4:	4b28      	ldr	r3, [pc, #160]	@ (8004788 <HAL_GPIO_Init+0x22c>)
 80046e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046f2:	4a26      	ldr	r2, [pc, #152]	@ (800478c <HAL_GPIO_Init+0x230>)
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	089b      	lsrs	r3, r3, #2
 80046f8:	3302      	adds	r3, #2
 80046fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	f003 0303 	and.w	r3, r3, #3
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	220f      	movs	r2, #15
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	43db      	mvns	r3, r3
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	4013      	ands	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a1d      	ldr	r2, [pc, #116]	@ (8004790 <HAL_GPIO_Init+0x234>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d04a      	beq.n	80047b4 <HAL_GPIO_Init+0x258>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a1c      	ldr	r2, [pc, #112]	@ (8004794 <HAL_GPIO_Init+0x238>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d02b      	beq.n	800477e <HAL_GPIO_Init+0x222>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a1b      	ldr	r2, [pc, #108]	@ (8004798 <HAL_GPIO_Init+0x23c>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d025      	beq.n	800477a <HAL_GPIO_Init+0x21e>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a1a      	ldr	r2, [pc, #104]	@ (800479c <HAL_GPIO_Init+0x240>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d01f      	beq.n	8004776 <HAL_GPIO_Init+0x21a>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a19      	ldr	r2, [pc, #100]	@ (80047a0 <HAL_GPIO_Init+0x244>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d019      	beq.n	8004772 <HAL_GPIO_Init+0x216>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a18      	ldr	r2, [pc, #96]	@ (80047a4 <HAL_GPIO_Init+0x248>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d013      	beq.n	800476e <HAL_GPIO_Init+0x212>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a17      	ldr	r2, [pc, #92]	@ (80047a8 <HAL_GPIO_Init+0x24c>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d00d      	beq.n	800476a <HAL_GPIO_Init+0x20e>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a16      	ldr	r2, [pc, #88]	@ (80047ac <HAL_GPIO_Init+0x250>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d007      	beq.n	8004766 <HAL_GPIO_Init+0x20a>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a15      	ldr	r2, [pc, #84]	@ (80047b0 <HAL_GPIO_Init+0x254>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d101      	bne.n	8004762 <HAL_GPIO_Init+0x206>
 800475e:	2309      	movs	r3, #9
 8004760:	e029      	b.n	80047b6 <HAL_GPIO_Init+0x25a>
 8004762:	230a      	movs	r3, #10
 8004764:	e027      	b.n	80047b6 <HAL_GPIO_Init+0x25a>
 8004766:	2307      	movs	r3, #7
 8004768:	e025      	b.n	80047b6 <HAL_GPIO_Init+0x25a>
 800476a:	2306      	movs	r3, #6
 800476c:	e023      	b.n	80047b6 <HAL_GPIO_Init+0x25a>
 800476e:	2305      	movs	r3, #5
 8004770:	e021      	b.n	80047b6 <HAL_GPIO_Init+0x25a>
 8004772:	2304      	movs	r3, #4
 8004774:	e01f      	b.n	80047b6 <HAL_GPIO_Init+0x25a>
 8004776:	2303      	movs	r3, #3
 8004778:	e01d      	b.n	80047b6 <HAL_GPIO_Init+0x25a>
 800477a:	2302      	movs	r3, #2
 800477c:	e01b      	b.n	80047b6 <HAL_GPIO_Init+0x25a>
 800477e:	2301      	movs	r3, #1
 8004780:	e019      	b.n	80047b6 <HAL_GPIO_Init+0x25a>
 8004782:	bf00      	nop
 8004784:	58000080 	.word	0x58000080
 8004788:	58024400 	.word	0x58024400
 800478c:	58000400 	.word	0x58000400
 8004790:	58020000 	.word	0x58020000
 8004794:	58020400 	.word	0x58020400
 8004798:	58020800 	.word	0x58020800
 800479c:	58020c00 	.word	0x58020c00
 80047a0:	58021000 	.word	0x58021000
 80047a4:	58021400 	.word	0x58021400
 80047a8:	58021800 	.word	0x58021800
 80047ac:	58021c00 	.word	0x58021c00
 80047b0:	58022400 	.word	0x58022400
 80047b4:	2300      	movs	r3, #0
 80047b6:	69fa      	ldr	r2, [r7, #28]
 80047b8:	f002 0203 	and.w	r2, r2, #3
 80047bc:	0092      	lsls	r2, r2, #2
 80047be:	4093      	lsls	r3, r2
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047c6:	4938      	ldr	r1, [pc, #224]	@ (80048a8 <HAL_GPIO_Init+0x34c>)
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	089b      	lsrs	r3, r3, #2
 80047cc:	3302      	adds	r3, #2
 80047ce:	69ba      	ldr	r2, [r7, #24]
 80047d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	43db      	mvns	r3, r3
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	4013      	ands	r3, r2
 80047e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80047fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004802:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	43db      	mvns	r3, r3
 800480e:	69ba      	ldr	r2, [r7, #24]
 8004810:	4013      	ands	r3, r2
 8004812:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d003      	beq.n	8004828 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	4313      	orrs	r3, r2
 8004826:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004828:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	43db      	mvns	r3, r3
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	4013      	ands	r3, r2
 800483e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d003      	beq.n	8004854 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	4313      	orrs	r3, r2
 8004852:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	43db      	mvns	r3, r3
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	4013      	ands	r3, r2
 8004868:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	4313      	orrs	r3, r2
 800487c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	3301      	adds	r3, #1
 8004888:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	fa22 f303 	lsr.w	r3, r2, r3
 8004894:	2b00      	cmp	r3, #0
 8004896:	f47f ae6b 	bne.w	8004570 <HAL_GPIO_Init+0x14>
  }
}
 800489a:	bf00      	nop
 800489c:	bf00      	nop
 800489e:	3724      	adds	r7, #36	@ 0x24
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr
 80048a8:	58000400 	.word	0x58000400

080048ac <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80048b4:	4b19      	ldr	r3, [pc, #100]	@ (800491c <HAL_PWREx_ConfigSupply+0x70>)
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b04      	cmp	r3, #4
 80048be:	d00a      	beq.n	80048d6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80048c0:	4b16      	ldr	r3, [pc, #88]	@ (800491c <HAL_PWREx_ConfigSupply+0x70>)
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f003 0307 	and.w	r3, r3, #7
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d001      	beq.n	80048d2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e01f      	b.n	8004912 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80048d2:	2300      	movs	r3, #0
 80048d4:	e01d      	b.n	8004912 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80048d6:	4b11      	ldr	r3, [pc, #68]	@ (800491c <HAL_PWREx_ConfigSupply+0x70>)
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	f023 0207 	bic.w	r2, r3, #7
 80048de:	490f      	ldr	r1, [pc, #60]	@ (800491c <HAL_PWREx_ConfigSupply+0x70>)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80048e6:	f7fc fbdf 	bl	80010a8 <HAL_GetTick>
 80048ea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80048ec:	e009      	b.n	8004902 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80048ee:	f7fc fbdb 	bl	80010a8 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80048fc:	d901      	bls.n	8004902 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e007      	b.n	8004912 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004902:	4b06      	ldr	r3, [pc, #24]	@ (800491c <HAL_PWREx_ConfigSupply+0x70>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800490a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800490e:	d1ee      	bne.n	80048ee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	58024800 	.word	0x58024800

08004920 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b08c      	sub	sp, #48	@ 0x30
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e3c8      	b.n	80050c4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 8087 	beq.w	8004a4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004940:	4b88      	ldr	r3, [pc, #544]	@ (8004b64 <HAL_RCC_OscConfig+0x244>)
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004948:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800494a:	4b86      	ldr	r3, [pc, #536]	@ (8004b64 <HAL_RCC_OscConfig+0x244>)
 800494c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800494e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004952:	2b10      	cmp	r3, #16
 8004954:	d007      	beq.n	8004966 <HAL_RCC_OscConfig+0x46>
 8004956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004958:	2b18      	cmp	r3, #24
 800495a:	d110      	bne.n	800497e <HAL_RCC_OscConfig+0x5e>
 800495c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800495e:	f003 0303 	and.w	r3, r3, #3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d10b      	bne.n	800497e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004966:	4b7f      	ldr	r3, [pc, #508]	@ (8004b64 <HAL_RCC_OscConfig+0x244>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d06c      	beq.n	8004a4c <HAL_RCC_OscConfig+0x12c>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d168      	bne.n	8004a4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e3a2      	b.n	80050c4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004986:	d106      	bne.n	8004996 <HAL_RCC_OscConfig+0x76>
 8004988:	4b76      	ldr	r3, [pc, #472]	@ (8004b64 <HAL_RCC_OscConfig+0x244>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a75      	ldr	r2, [pc, #468]	@ (8004b64 <HAL_RCC_OscConfig+0x244>)
 800498e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004992:	6013      	str	r3, [r2, #0]
 8004994:	e02e      	b.n	80049f4 <HAL_RCC_OscConfig+0xd4>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10c      	bne.n	80049b8 <HAL_RCC_OscConfig+0x98>
 800499e:	4b71      	ldr	r3, [pc, #452]	@ (8004b64 <HAL_RCC_OscConfig+0x244>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a70      	ldr	r2, [pc, #448]	@ (8004b64 <HAL_RCC_OscConfig+0x244>)
 80049a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049a8:	6013      	str	r3, [r2, #0]
 80049aa:	4b6e      	ldr	r3, [pc, #440]	@ (8004b64 <HAL_RCC_OscConfig+0x244>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a6d      	ldr	r2, [pc, #436]	@ (8004b64 <HAL_RCC_OscConfig+0x244>)
 80049b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049b4:	6013      	str	r3, [r2, #0]
 80049b6:	e01d      	b.n	80049f4 <HAL_RCC_OscConfig+0xd4>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049c0:	d10c      	bne.n	80049dc <HAL_RCC_OscConfig+0xbc>
 80049c2:	4b68      	ldr	r3, [pc, #416]	@ (8004b64 <HAL_RCC_OscConfig+0x244>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a67      	ldr	r2, [pc, #412]	@ (8004b64 <HAL_RCC_OscConfig+0x244>)
 80049c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049cc:	6013      	str	r3, [r2, #0]
 80049ce:	4b65      	ldr	r3, [pc, #404]	@ (8004b64 <HAL_RCC_OscConfig+0x244>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a64      	ldr	r2, [pc, #400]	@ (8004b64 <HAL_RCC_OscConfig+0x244>)
 80049d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049d8:	6013      	str	r3, [r2, #0]
 80049da:	e00b      	b.n	80049f4 <HAL_RCC_OscConfig+0xd4>
 80049dc:	4b61      	ldr	r3, [pc, #388]	@ (8004b64 <HAL_RCC_OscConfig+0x244>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a60      	ldr	r2, [pc, #384]	@ (8004b64 <HAL_RCC_OscConfig+0x244>)
 80049e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049e6:	6013      	str	r3, [r2, #0]
 80049e8:	4b5e      	ldr	r3, [pc, #376]	@ (8004b64 <HAL_RCC_OscConfig+0x244>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a5d      	ldr	r2, [pc, #372]	@ (8004b64 <HAL_RCC_OscConfig+0x244>)
 80049ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d013      	beq.n	8004a24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049fc:	f7fc fb54 	bl	80010a8 <HAL_GetTick>
 8004a00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a02:	e008      	b.n	8004a16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a04:	f7fc fb50 	bl	80010a8 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b64      	cmp	r3, #100	@ 0x64
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e356      	b.n	80050c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a16:	4b53      	ldr	r3, [pc, #332]	@ (8004b64 <HAL_RCC_OscConfig+0x244>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d0f0      	beq.n	8004a04 <HAL_RCC_OscConfig+0xe4>
 8004a22:	e014      	b.n	8004a4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a24:	f7fc fb40 	bl	80010a8 <HAL_GetTick>
 8004a28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a2c:	f7fc fb3c 	bl	80010a8 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b64      	cmp	r3, #100	@ 0x64
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e342      	b.n	80050c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a3e:	4b49      	ldr	r3, [pc, #292]	@ (8004b64 <HAL_RCC_OscConfig+0x244>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1f0      	bne.n	8004a2c <HAL_RCC_OscConfig+0x10c>
 8004a4a:	e000      	b.n	8004a4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	f000 808c 	beq.w	8004b74 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a5c:	4b41      	ldr	r3, [pc, #260]	@ (8004b64 <HAL_RCC_OscConfig+0x244>)
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a64:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a66:	4b3f      	ldr	r3, [pc, #252]	@ (8004b64 <HAL_RCC_OscConfig+0x244>)
 8004a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a6a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004a6c:	6a3b      	ldr	r3, [r7, #32]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d007      	beq.n	8004a82 <HAL_RCC_OscConfig+0x162>
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	2b18      	cmp	r3, #24
 8004a76:	d137      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x1c8>
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	f003 0303 	and.w	r3, r3, #3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d132      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a82:	4b38      	ldr	r3, [pc, #224]	@ (8004b64 <HAL_RCC_OscConfig+0x244>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0304 	and.w	r3, r3, #4
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d005      	beq.n	8004a9a <HAL_RCC_OscConfig+0x17a>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e314      	b.n	80050c4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004a9a:	4b32      	ldr	r3, [pc, #200]	@ (8004b64 <HAL_RCC_OscConfig+0x244>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f023 0219 	bic.w	r2, r3, #25
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	492f      	ldr	r1, [pc, #188]	@ (8004b64 <HAL_RCC_OscConfig+0x244>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aac:	f7fc fafc 	bl	80010a8 <HAL_GetTick>
 8004ab0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ab4:	f7fc faf8 	bl	80010a8 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e2fe      	b.n	80050c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ac6:	4b27      	ldr	r3, [pc, #156]	@ (8004b64 <HAL_RCC_OscConfig+0x244>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0304 	and.w	r3, r3, #4
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d0f0      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ad2:	4b24      	ldr	r3, [pc, #144]	@ (8004b64 <HAL_RCC_OscConfig+0x244>)
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	061b      	lsls	r3, r3, #24
 8004ae0:	4920      	ldr	r1, [pc, #128]	@ (8004b64 <HAL_RCC_OscConfig+0x244>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ae6:	e045      	b.n	8004b74 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d026      	beq.n	8004b3e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004af0:	4b1c      	ldr	r3, [pc, #112]	@ (8004b64 <HAL_RCC_OscConfig+0x244>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f023 0219 	bic.w	r2, r3, #25
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	4919      	ldr	r1, [pc, #100]	@ (8004b64 <HAL_RCC_OscConfig+0x244>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b02:	f7fc fad1 	bl	80010a8 <HAL_GetTick>
 8004b06:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b08:	e008      	b.n	8004b1c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b0a:	f7fc facd 	bl	80010a8 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e2d3      	b.n	80050c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b1c:	4b11      	ldr	r3, [pc, #68]	@ (8004b64 <HAL_RCC_OscConfig+0x244>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d0f0      	beq.n	8004b0a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b28:	4b0e      	ldr	r3, [pc, #56]	@ (8004b64 <HAL_RCC_OscConfig+0x244>)
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	061b      	lsls	r3, r3, #24
 8004b36:	490b      	ldr	r1, [pc, #44]	@ (8004b64 <HAL_RCC_OscConfig+0x244>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	604b      	str	r3, [r1, #4]
 8004b3c:	e01a      	b.n	8004b74 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b3e:	4b09      	ldr	r3, [pc, #36]	@ (8004b64 <HAL_RCC_OscConfig+0x244>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a08      	ldr	r2, [pc, #32]	@ (8004b64 <HAL_RCC_OscConfig+0x244>)
 8004b44:	f023 0301 	bic.w	r3, r3, #1
 8004b48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b4a:	f7fc faad 	bl	80010a8 <HAL_GetTick>
 8004b4e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b50:	e00a      	b.n	8004b68 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b52:	f7fc faa9 	bl	80010a8 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d903      	bls.n	8004b68 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e2af      	b.n	80050c4 <HAL_RCC_OscConfig+0x7a4>
 8004b64:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b68:	4b96      	ldr	r3, [pc, #600]	@ (8004dc4 <HAL_RCC_OscConfig+0x4a4>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0304 	and.w	r3, r3, #4
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1ee      	bne.n	8004b52 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0310 	and.w	r3, r3, #16
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d06a      	beq.n	8004c56 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b80:	4b90      	ldr	r3, [pc, #576]	@ (8004dc4 <HAL_RCC_OscConfig+0x4a4>)
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b88:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b8a:	4b8e      	ldr	r3, [pc, #568]	@ (8004dc4 <HAL_RCC_OscConfig+0x4a4>)
 8004b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b8e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	2b08      	cmp	r3, #8
 8004b94:	d007      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x286>
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	2b18      	cmp	r3, #24
 8004b9a:	d11b      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x2b4>
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	f003 0303 	and.w	r3, r3, #3
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d116      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ba6:	4b87      	ldr	r3, [pc, #540]	@ (8004dc4 <HAL_RCC_OscConfig+0x4a4>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d005      	beq.n	8004bbe <HAL_RCC_OscConfig+0x29e>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	2b80      	cmp	r3, #128	@ 0x80
 8004bb8:	d001      	beq.n	8004bbe <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e282      	b.n	80050c4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004bbe:	4b81      	ldr	r3, [pc, #516]	@ (8004dc4 <HAL_RCC_OscConfig+0x4a4>)
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	061b      	lsls	r3, r3, #24
 8004bcc:	497d      	ldr	r1, [pc, #500]	@ (8004dc4 <HAL_RCC_OscConfig+0x4a4>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004bd2:	e040      	b.n	8004c56 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d023      	beq.n	8004c24 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004bdc:	4b79      	ldr	r3, [pc, #484]	@ (8004dc4 <HAL_RCC_OscConfig+0x4a4>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a78      	ldr	r2, [pc, #480]	@ (8004dc4 <HAL_RCC_OscConfig+0x4a4>)
 8004be2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004be6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be8:	f7fc fa5e 	bl	80010a8 <HAL_GetTick>
 8004bec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004bee:	e008      	b.n	8004c02 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004bf0:	f7fc fa5a 	bl	80010a8 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e260      	b.n	80050c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c02:	4b70      	ldr	r3, [pc, #448]	@ (8004dc4 <HAL_RCC_OscConfig+0x4a4>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d0f0      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c0e:	4b6d      	ldr	r3, [pc, #436]	@ (8004dc4 <HAL_RCC_OscConfig+0x4a4>)
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	061b      	lsls	r3, r3, #24
 8004c1c:	4969      	ldr	r1, [pc, #420]	@ (8004dc4 <HAL_RCC_OscConfig+0x4a4>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	60cb      	str	r3, [r1, #12]
 8004c22:	e018      	b.n	8004c56 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004c24:	4b67      	ldr	r3, [pc, #412]	@ (8004dc4 <HAL_RCC_OscConfig+0x4a4>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a66      	ldr	r2, [pc, #408]	@ (8004dc4 <HAL_RCC_OscConfig+0x4a4>)
 8004c2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c30:	f7fc fa3a 	bl	80010a8 <HAL_GetTick>
 8004c34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004c36:	e008      	b.n	8004c4a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004c38:	f7fc fa36 	bl	80010a8 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e23c      	b.n	80050c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004c4a:	4b5e      	ldr	r3, [pc, #376]	@ (8004dc4 <HAL_RCC_OscConfig+0x4a4>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1f0      	bne.n	8004c38 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0308 	and.w	r3, r3, #8
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d036      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d019      	beq.n	8004c9e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c6a:	4b56      	ldr	r3, [pc, #344]	@ (8004dc4 <HAL_RCC_OscConfig+0x4a4>)
 8004c6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c6e:	4a55      	ldr	r2, [pc, #340]	@ (8004dc4 <HAL_RCC_OscConfig+0x4a4>)
 8004c70:	f043 0301 	orr.w	r3, r3, #1
 8004c74:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c76:	f7fc fa17 	bl	80010a8 <HAL_GetTick>
 8004c7a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c7c:	e008      	b.n	8004c90 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c7e:	f7fc fa13 	bl	80010a8 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e219      	b.n	80050c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004c90:	4b4c      	ldr	r3, [pc, #304]	@ (8004dc4 <HAL_RCC_OscConfig+0x4a4>)
 8004c92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0f0      	beq.n	8004c7e <HAL_RCC_OscConfig+0x35e>
 8004c9c:	e018      	b.n	8004cd0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c9e:	4b49      	ldr	r3, [pc, #292]	@ (8004dc4 <HAL_RCC_OscConfig+0x4a4>)
 8004ca0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ca2:	4a48      	ldr	r2, [pc, #288]	@ (8004dc4 <HAL_RCC_OscConfig+0x4a4>)
 8004ca4:	f023 0301 	bic.w	r3, r3, #1
 8004ca8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004caa:	f7fc f9fd 	bl	80010a8 <HAL_GetTick>
 8004cae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004cb0:	e008      	b.n	8004cc4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cb2:	f7fc f9f9 	bl	80010a8 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d901      	bls.n	8004cc4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e1ff      	b.n	80050c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004cc4:	4b3f      	ldr	r3, [pc, #252]	@ (8004dc4 <HAL_RCC_OscConfig+0x4a4>)
 8004cc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1f0      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0320 	and.w	r3, r3, #32
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d036      	beq.n	8004d4a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d019      	beq.n	8004d18 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ce4:	4b37      	ldr	r3, [pc, #220]	@ (8004dc4 <HAL_RCC_OscConfig+0x4a4>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a36      	ldr	r2, [pc, #216]	@ (8004dc4 <HAL_RCC_OscConfig+0x4a4>)
 8004cea:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004cee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004cf0:	f7fc f9da 	bl	80010a8 <HAL_GetTick>
 8004cf4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004cf6:	e008      	b.n	8004d0a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004cf8:	f7fc f9d6 	bl	80010a8 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e1dc      	b.n	80050c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d0a:	4b2e      	ldr	r3, [pc, #184]	@ (8004dc4 <HAL_RCC_OscConfig+0x4a4>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d0f0      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x3d8>
 8004d16:	e018      	b.n	8004d4a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d18:	4b2a      	ldr	r3, [pc, #168]	@ (8004dc4 <HAL_RCC_OscConfig+0x4a4>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a29      	ldr	r2, [pc, #164]	@ (8004dc4 <HAL_RCC_OscConfig+0x4a4>)
 8004d1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d22:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004d24:	f7fc f9c0 	bl	80010a8 <HAL_GetTick>
 8004d28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d2c:	f7fc f9bc 	bl	80010a8 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e1c2      	b.n	80050c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004d3e:	4b21      	ldr	r3, [pc, #132]	@ (8004dc4 <HAL_RCC_OscConfig+0x4a4>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1f0      	bne.n	8004d2c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0304 	and.w	r3, r3, #4
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f000 8086 	beq.w	8004e64 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004d58:	4b1b      	ldr	r3, [pc, #108]	@ (8004dc8 <HAL_RCC_OscConfig+0x4a8>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a1a      	ldr	r2, [pc, #104]	@ (8004dc8 <HAL_RCC_OscConfig+0x4a8>)
 8004d5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d64:	f7fc f9a0 	bl	80010a8 <HAL_GetTick>
 8004d68:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d6c:	f7fc f99c 	bl	80010a8 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b64      	cmp	r3, #100	@ 0x64
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e1a2      	b.n	80050c4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004d7e:	4b12      	ldr	r3, [pc, #72]	@ (8004dc8 <HAL_RCC_OscConfig+0x4a8>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d0f0      	beq.n	8004d6c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d106      	bne.n	8004da0 <HAL_RCC_OscConfig+0x480>
 8004d92:	4b0c      	ldr	r3, [pc, #48]	@ (8004dc4 <HAL_RCC_OscConfig+0x4a4>)
 8004d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d96:	4a0b      	ldr	r2, [pc, #44]	@ (8004dc4 <HAL_RCC_OscConfig+0x4a4>)
 8004d98:	f043 0301 	orr.w	r3, r3, #1
 8004d9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d9e:	e032      	b.n	8004e06 <HAL_RCC_OscConfig+0x4e6>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d111      	bne.n	8004dcc <HAL_RCC_OscConfig+0x4ac>
 8004da8:	4b06      	ldr	r3, [pc, #24]	@ (8004dc4 <HAL_RCC_OscConfig+0x4a4>)
 8004daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dac:	4a05      	ldr	r2, [pc, #20]	@ (8004dc4 <HAL_RCC_OscConfig+0x4a4>)
 8004dae:	f023 0301 	bic.w	r3, r3, #1
 8004db2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004db4:	4b03      	ldr	r3, [pc, #12]	@ (8004dc4 <HAL_RCC_OscConfig+0x4a4>)
 8004db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004db8:	4a02      	ldr	r2, [pc, #8]	@ (8004dc4 <HAL_RCC_OscConfig+0x4a4>)
 8004dba:	f023 0304 	bic.w	r3, r3, #4
 8004dbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dc0:	e021      	b.n	8004e06 <HAL_RCC_OscConfig+0x4e6>
 8004dc2:	bf00      	nop
 8004dc4:	58024400 	.word	0x58024400
 8004dc8:	58024800 	.word	0x58024800
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	2b05      	cmp	r3, #5
 8004dd2:	d10c      	bne.n	8004dee <HAL_RCC_OscConfig+0x4ce>
 8004dd4:	4b83      	ldr	r3, [pc, #524]	@ (8004fe4 <HAL_RCC_OscConfig+0x6c4>)
 8004dd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dd8:	4a82      	ldr	r2, [pc, #520]	@ (8004fe4 <HAL_RCC_OscConfig+0x6c4>)
 8004dda:	f043 0304 	orr.w	r3, r3, #4
 8004dde:	6713      	str	r3, [r2, #112]	@ 0x70
 8004de0:	4b80      	ldr	r3, [pc, #512]	@ (8004fe4 <HAL_RCC_OscConfig+0x6c4>)
 8004de2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004de4:	4a7f      	ldr	r2, [pc, #508]	@ (8004fe4 <HAL_RCC_OscConfig+0x6c4>)
 8004de6:	f043 0301 	orr.w	r3, r3, #1
 8004dea:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dec:	e00b      	b.n	8004e06 <HAL_RCC_OscConfig+0x4e6>
 8004dee:	4b7d      	ldr	r3, [pc, #500]	@ (8004fe4 <HAL_RCC_OscConfig+0x6c4>)
 8004df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004df2:	4a7c      	ldr	r2, [pc, #496]	@ (8004fe4 <HAL_RCC_OscConfig+0x6c4>)
 8004df4:	f023 0301 	bic.w	r3, r3, #1
 8004df8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dfa:	4b7a      	ldr	r3, [pc, #488]	@ (8004fe4 <HAL_RCC_OscConfig+0x6c4>)
 8004dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dfe:	4a79      	ldr	r2, [pc, #484]	@ (8004fe4 <HAL_RCC_OscConfig+0x6c4>)
 8004e00:	f023 0304 	bic.w	r3, r3, #4
 8004e04:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d015      	beq.n	8004e3a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e0e:	f7fc f94b 	bl	80010a8 <HAL_GetTick>
 8004e12:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e14:	e00a      	b.n	8004e2c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e16:	f7fc f947 	bl	80010a8 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e14b      	b.n	80050c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e2c:	4b6d      	ldr	r3, [pc, #436]	@ (8004fe4 <HAL_RCC_OscConfig+0x6c4>)
 8004e2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e30:	f003 0302 	and.w	r3, r3, #2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d0ee      	beq.n	8004e16 <HAL_RCC_OscConfig+0x4f6>
 8004e38:	e014      	b.n	8004e64 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e3a:	f7fc f935 	bl	80010a8 <HAL_GetTick>
 8004e3e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e40:	e00a      	b.n	8004e58 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e42:	f7fc f931 	bl	80010a8 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d901      	bls.n	8004e58 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e135      	b.n	80050c4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e58:	4b62      	ldr	r3, [pc, #392]	@ (8004fe4 <HAL_RCC_OscConfig+0x6c4>)
 8004e5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1ee      	bne.n	8004e42 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f000 812a 	beq.w	80050c2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004e6e:	4b5d      	ldr	r3, [pc, #372]	@ (8004fe4 <HAL_RCC_OscConfig+0x6c4>)
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e76:	2b18      	cmp	r3, #24
 8004e78:	f000 80ba 	beq.w	8004ff0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	f040 8095 	bne.w	8004fb0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e86:	4b57      	ldr	r3, [pc, #348]	@ (8004fe4 <HAL_RCC_OscConfig+0x6c4>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a56      	ldr	r2, [pc, #344]	@ (8004fe4 <HAL_RCC_OscConfig+0x6c4>)
 8004e8c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e92:	f7fc f909 	bl	80010a8 <HAL_GetTick>
 8004e96:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e98:	e008      	b.n	8004eac <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e9a:	f7fc f905 	bl	80010a8 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d901      	bls.n	8004eac <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e10b      	b.n	80050c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004eac:	4b4d      	ldr	r3, [pc, #308]	@ (8004fe4 <HAL_RCC_OscConfig+0x6c4>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1f0      	bne.n	8004e9a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004eb8:	4b4a      	ldr	r3, [pc, #296]	@ (8004fe4 <HAL_RCC_OscConfig+0x6c4>)
 8004eba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ebc:	4b4a      	ldr	r3, [pc, #296]	@ (8004fe8 <HAL_RCC_OscConfig+0x6c8>)
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004ec8:	0112      	lsls	r2, r2, #4
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	4945      	ldr	r1, [pc, #276]	@ (8004fe4 <HAL_RCC_OscConfig+0x6c4>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	628b      	str	r3, [r1, #40]	@ 0x28
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	025b      	lsls	r3, r3, #9
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eec:	3b01      	subs	r3, #1
 8004eee:	041b      	lsls	r3, r3, #16
 8004ef0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004efa:	3b01      	subs	r3, #1
 8004efc:	061b      	lsls	r3, r3, #24
 8004efe:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004f02:	4938      	ldr	r1, [pc, #224]	@ (8004fe4 <HAL_RCC_OscConfig+0x6c4>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004f08:	4b36      	ldr	r3, [pc, #216]	@ (8004fe4 <HAL_RCC_OscConfig+0x6c4>)
 8004f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f0c:	4a35      	ldr	r2, [pc, #212]	@ (8004fe4 <HAL_RCC_OscConfig+0x6c4>)
 8004f0e:	f023 0301 	bic.w	r3, r3, #1
 8004f12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004f14:	4b33      	ldr	r3, [pc, #204]	@ (8004fe4 <HAL_RCC_OscConfig+0x6c4>)
 8004f16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f18:	4b34      	ldr	r3, [pc, #208]	@ (8004fec <HAL_RCC_OscConfig+0x6cc>)
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004f20:	00d2      	lsls	r2, r2, #3
 8004f22:	4930      	ldr	r1, [pc, #192]	@ (8004fe4 <HAL_RCC_OscConfig+0x6c4>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004f28:	4b2e      	ldr	r3, [pc, #184]	@ (8004fe4 <HAL_RCC_OscConfig+0x6c4>)
 8004f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f2c:	f023 020c 	bic.w	r2, r3, #12
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f34:	492b      	ldr	r1, [pc, #172]	@ (8004fe4 <HAL_RCC_OscConfig+0x6c4>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004f3a:	4b2a      	ldr	r3, [pc, #168]	@ (8004fe4 <HAL_RCC_OscConfig+0x6c4>)
 8004f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f3e:	f023 0202 	bic.w	r2, r3, #2
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f46:	4927      	ldr	r1, [pc, #156]	@ (8004fe4 <HAL_RCC_OscConfig+0x6c4>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004f4c:	4b25      	ldr	r3, [pc, #148]	@ (8004fe4 <HAL_RCC_OscConfig+0x6c4>)
 8004f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f50:	4a24      	ldr	r2, [pc, #144]	@ (8004fe4 <HAL_RCC_OscConfig+0x6c4>)
 8004f52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f58:	4b22      	ldr	r3, [pc, #136]	@ (8004fe4 <HAL_RCC_OscConfig+0x6c4>)
 8004f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f5c:	4a21      	ldr	r2, [pc, #132]	@ (8004fe4 <HAL_RCC_OscConfig+0x6c4>)
 8004f5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004f64:	4b1f      	ldr	r3, [pc, #124]	@ (8004fe4 <HAL_RCC_OscConfig+0x6c4>)
 8004f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f68:	4a1e      	ldr	r2, [pc, #120]	@ (8004fe4 <HAL_RCC_OscConfig+0x6c4>)
 8004f6a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004f70:	4b1c      	ldr	r3, [pc, #112]	@ (8004fe4 <HAL_RCC_OscConfig+0x6c4>)
 8004f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f74:	4a1b      	ldr	r2, [pc, #108]	@ (8004fe4 <HAL_RCC_OscConfig+0x6c4>)
 8004f76:	f043 0301 	orr.w	r3, r3, #1
 8004f7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f7c:	4b19      	ldr	r3, [pc, #100]	@ (8004fe4 <HAL_RCC_OscConfig+0x6c4>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a18      	ldr	r2, [pc, #96]	@ (8004fe4 <HAL_RCC_OscConfig+0x6c4>)
 8004f82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f88:	f7fc f88e 	bl	80010a8 <HAL_GetTick>
 8004f8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f90:	f7fc f88a 	bl	80010a8 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e090      	b.n	80050c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004fa2:	4b10      	ldr	r3, [pc, #64]	@ (8004fe4 <HAL_RCC_OscConfig+0x6c4>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d0f0      	beq.n	8004f90 <HAL_RCC_OscConfig+0x670>
 8004fae:	e088      	b.n	80050c2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8004fe4 <HAL_RCC_OscConfig+0x6c4>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a0b      	ldr	r2, [pc, #44]	@ (8004fe4 <HAL_RCC_OscConfig+0x6c4>)
 8004fb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fbc:	f7fc f874 	bl	80010a8 <HAL_GetTick>
 8004fc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004fc2:	e008      	b.n	8004fd6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fc4:	f7fc f870 	bl	80010a8 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e076      	b.n	80050c4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004fd6:	4b03      	ldr	r3, [pc, #12]	@ (8004fe4 <HAL_RCC_OscConfig+0x6c4>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1f0      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x6a4>
 8004fe2:	e06e      	b.n	80050c2 <HAL_RCC_OscConfig+0x7a2>
 8004fe4:	58024400 	.word	0x58024400
 8004fe8:	fffffc0c 	.word	0xfffffc0c
 8004fec:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004ff0:	4b36      	ldr	r3, [pc, #216]	@ (80050cc <HAL_RCC_OscConfig+0x7ac>)
 8004ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004ff6:	4b35      	ldr	r3, [pc, #212]	@ (80050cc <HAL_RCC_OscConfig+0x7ac>)
 8004ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ffa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005000:	2b01      	cmp	r3, #1
 8005002:	d031      	beq.n	8005068 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	f003 0203 	and.w	r2, r3, #3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800500e:	429a      	cmp	r2, r3
 8005010:	d12a      	bne.n	8005068 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	091b      	lsrs	r3, r3, #4
 8005016:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800501e:	429a      	cmp	r2, r3
 8005020:	d122      	bne.n	8005068 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800502c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800502e:	429a      	cmp	r2, r3
 8005030:	d11a      	bne.n	8005068 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	0a5b      	lsrs	r3, r3, #9
 8005036:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800503e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005040:	429a      	cmp	r2, r3
 8005042:	d111      	bne.n	8005068 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	0c1b      	lsrs	r3, r3, #16
 8005048:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005050:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005052:	429a      	cmp	r2, r3
 8005054:	d108      	bne.n	8005068 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	0e1b      	lsrs	r3, r3, #24
 800505a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005062:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005064:	429a      	cmp	r2, r3
 8005066:	d001      	beq.n	800506c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e02b      	b.n	80050c4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800506c:	4b17      	ldr	r3, [pc, #92]	@ (80050cc <HAL_RCC_OscConfig+0x7ac>)
 800506e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005070:	08db      	lsrs	r3, r3, #3
 8005072:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005076:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	429a      	cmp	r2, r3
 8005080:	d01f      	beq.n	80050c2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005082:	4b12      	ldr	r3, [pc, #72]	@ (80050cc <HAL_RCC_OscConfig+0x7ac>)
 8005084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005086:	4a11      	ldr	r2, [pc, #68]	@ (80050cc <HAL_RCC_OscConfig+0x7ac>)
 8005088:	f023 0301 	bic.w	r3, r3, #1
 800508c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800508e:	f7fc f80b 	bl	80010a8 <HAL_GetTick>
 8005092:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005094:	bf00      	nop
 8005096:	f7fc f807 	bl	80010a8 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509e:	4293      	cmp	r3, r2
 80050a0:	d0f9      	beq.n	8005096 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80050a2:	4b0a      	ldr	r3, [pc, #40]	@ (80050cc <HAL_RCC_OscConfig+0x7ac>)
 80050a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050a6:	4b0a      	ldr	r3, [pc, #40]	@ (80050d0 <HAL_RCC_OscConfig+0x7b0>)
 80050a8:	4013      	ands	r3, r2
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80050ae:	00d2      	lsls	r2, r2, #3
 80050b0:	4906      	ldr	r1, [pc, #24]	@ (80050cc <HAL_RCC_OscConfig+0x7ac>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80050b6:	4b05      	ldr	r3, [pc, #20]	@ (80050cc <HAL_RCC_OscConfig+0x7ac>)
 80050b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ba:	4a04      	ldr	r2, [pc, #16]	@ (80050cc <HAL_RCC_OscConfig+0x7ac>)
 80050bc:	f043 0301 	orr.w	r3, r3, #1
 80050c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3730      	adds	r7, #48	@ 0x30
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	58024400 	.word	0x58024400
 80050d0:	ffff0007 	.word	0xffff0007

080050d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d101      	bne.n	80050e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e19c      	b.n	8005422 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050e8:	4b8a      	ldr	r3, [pc, #552]	@ (8005314 <HAL_RCC_ClockConfig+0x240>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 030f 	and.w	r3, r3, #15
 80050f0:	683a      	ldr	r2, [r7, #0]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d910      	bls.n	8005118 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050f6:	4b87      	ldr	r3, [pc, #540]	@ (8005314 <HAL_RCC_ClockConfig+0x240>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f023 020f 	bic.w	r2, r3, #15
 80050fe:	4985      	ldr	r1, [pc, #532]	@ (8005314 <HAL_RCC_ClockConfig+0x240>)
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	4313      	orrs	r3, r2
 8005104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005106:	4b83      	ldr	r3, [pc, #524]	@ (8005314 <HAL_RCC_ClockConfig+0x240>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 030f 	and.w	r3, r3, #15
 800510e:	683a      	ldr	r2, [r7, #0]
 8005110:	429a      	cmp	r2, r3
 8005112:	d001      	beq.n	8005118 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e184      	b.n	8005422 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0304 	and.w	r3, r3, #4
 8005120:	2b00      	cmp	r3, #0
 8005122:	d010      	beq.n	8005146 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	691a      	ldr	r2, [r3, #16]
 8005128:	4b7b      	ldr	r3, [pc, #492]	@ (8005318 <HAL_RCC_ClockConfig+0x244>)
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005130:	429a      	cmp	r2, r3
 8005132:	d908      	bls.n	8005146 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005134:	4b78      	ldr	r3, [pc, #480]	@ (8005318 <HAL_RCC_ClockConfig+0x244>)
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	4975      	ldr	r1, [pc, #468]	@ (8005318 <HAL_RCC_ClockConfig+0x244>)
 8005142:	4313      	orrs	r3, r2
 8005144:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0308 	and.w	r3, r3, #8
 800514e:	2b00      	cmp	r3, #0
 8005150:	d010      	beq.n	8005174 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	695a      	ldr	r2, [r3, #20]
 8005156:	4b70      	ldr	r3, [pc, #448]	@ (8005318 <HAL_RCC_ClockConfig+0x244>)
 8005158:	69db      	ldr	r3, [r3, #28]
 800515a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800515e:	429a      	cmp	r2, r3
 8005160:	d908      	bls.n	8005174 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005162:	4b6d      	ldr	r3, [pc, #436]	@ (8005318 <HAL_RCC_ClockConfig+0x244>)
 8005164:	69db      	ldr	r3, [r3, #28]
 8005166:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	496a      	ldr	r1, [pc, #424]	@ (8005318 <HAL_RCC_ClockConfig+0x244>)
 8005170:	4313      	orrs	r3, r2
 8005172:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0310 	and.w	r3, r3, #16
 800517c:	2b00      	cmp	r3, #0
 800517e:	d010      	beq.n	80051a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	699a      	ldr	r2, [r3, #24]
 8005184:	4b64      	ldr	r3, [pc, #400]	@ (8005318 <HAL_RCC_ClockConfig+0x244>)
 8005186:	69db      	ldr	r3, [r3, #28]
 8005188:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800518c:	429a      	cmp	r2, r3
 800518e:	d908      	bls.n	80051a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005190:	4b61      	ldr	r3, [pc, #388]	@ (8005318 <HAL_RCC_ClockConfig+0x244>)
 8005192:	69db      	ldr	r3, [r3, #28]
 8005194:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	495e      	ldr	r1, [pc, #376]	@ (8005318 <HAL_RCC_ClockConfig+0x244>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0320 	and.w	r3, r3, #32
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d010      	beq.n	80051d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	69da      	ldr	r2, [r3, #28]
 80051b2:	4b59      	ldr	r3, [pc, #356]	@ (8005318 <HAL_RCC_ClockConfig+0x244>)
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d908      	bls.n	80051d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80051be:	4b56      	ldr	r3, [pc, #344]	@ (8005318 <HAL_RCC_ClockConfig+0x244>)
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	4953      	ldr	r1, [pc, #332]	@ (8005318 <HAL_RCC_ClockConfig+0x244>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d010      	beq.n	80051fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68da      	ldr	r2, [r3, #12]
 80051e0:	4b4d      	ldr	r3, [pc, #308]	@ (8005318 <HAL_RCC_ClockConfig+0x244>)
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	f003 030f 	and.w	r3, r3, #15
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d908      	bls.n	80051fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051ec:	4b4a      	ldr	r3, [pc, #296]	@ (8005318 <HAL_RCC_ClockConfig+0x244>)
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	f023 020f 	bic.w	r2, r3, #15
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	4947      	ldr	r1, [pc, #284]	@ (8005318 <HAL_RCC_ClockConfig+0x244>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	d055      	beq.n	80052b6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800520a:	4b43      	ldr	r3, [pc, #268]	@ (8005318 <HAL_RCC_ClockConfig+0x244>)
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	4940      	ldr	r1, [pc, #256]	@ (8005318 <HAL_RCC_ClockConfig+0x244>)
 8005218:	4313      	orrs	r3, r2
 800521a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	2b02      	cmp	r3, #2
 8005222:	d107      	bne.n	8005234 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005224:	4b3c      	ldr	r3, [pc, #240]	@ (8005318 <HAL_RCC_ClockConfig+0x244>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d121      	bne.n	8005274 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e0f6      	b.n	8005422 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	2b03      	cmp	r3, #3
 800523a:	d107      	bne.n	800524c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800523c:	4b36      	ldr	r3, [pc, #216]	@ (8005318 <HAL_RCC_ClockConfig+0x244>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d115      	bne.n	8005274 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e0ea      	b.n	8005422 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d107      	bne.n	8005264 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005254:	4b30      	ldr	r3, [pc, #192]	@ (8005318 <HAL_RCC_ClockConfig+0x244>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800525c:	2b00      	cmp	r3, #0
 800525e:	d109      	bne.n	8005274 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e0de      	b.n	8005422 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005264:	4b2c      	ldr	r3, [pc, #176]	@ (8005318 <HAL_RCC_ClockConfig+0x244>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0304 	and.w	r3, r3, #4
 800526c:	2b00      	cmp	r3, #0
 800526e:	d101      	bne.n	8005274 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e0d6      	b.n	8005422 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005274:	4b28      	ldr	r3, [pc, #160]	@ (8005318 <HAL_RCC_ClockConfig+0x244>)
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	f023 0207 	bic.w	r2, r3, #7
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	4925      	ldr	r1, [pc, #148]	@ (8005318 <HAL_RCC_ClockConfig+0x244>)
 8005282:	4313      	orrs	r3, r2
 8005284:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005286:	f7fb ff0f 	bl	80010a8 <HAL_GetTick>
 800528a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800528c:	e00a      	b.n	80052a4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800528e:	f7fb ff0b 	bl	80010a8 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	f241 3288 	movw	r2, #5000	@ 0x1388
 800529c:	4293      	cmp	r3, r2
 800529e:	d901      	bls.n	80052a4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e0be      	b.n	8005422 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052a4:	4b1c      	ldr	r3, [pc, #112]	@ (8005318 <HAL_RCC_ClockConfig+0x244>)
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	00db      	lsls	r3, r3, #3
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d1eb      	bne.n	800528e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d010      	beq.n	80052e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68da      	ldr	r2, [r3, #12]
 80052c6:	4b14      	ldr	r3, [pc, #80]	@ (8005318 <HAL_RCC_ClockConfig+0x244>)
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	f003 030f 	and.w	r3, r3, #15
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d208      	bcs.n	80052e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052d2:	4b11      	ldr	r3, [pc, #68]	@ (8005318 <HAL_RCC_ClockConfig+0x244>)
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	f023 020f 	bic.w	r2, r3, #15
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	490e      	ldr	r1, [pc, #56]	@ (8005318 <HAL_RCC_ClockConfig+0x244>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005314 <HAL_RCC_ClockConfig+0x240>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 030f 	and.w	r3, r3, #15
 80052ec:	683a      	ldr	r2, [r7, #0]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d214      	bcs.n	800531c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052f2:	4b08      	ldr	r3, [pc, #32]	@ (8005314 <HAL_RCC_ClockConfig+0x240>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f023 020f 	bic.w	r2, r3, #15
 80052fa:	4906      	ldr	r1, [pc, #24]	@ (8005314 <HAL_RCC_ClockConfig+0x240>)
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	4313      	orrs	r3, r2
 8005300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005302:	4b04      	ldr	r3, [pc, #16]	@ (8005314 <HAL_RCC_ClockConfig+0x240>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 030f 	and.w	r3, r3, #15
 800530a:	683a      	ldr	r2, [r7, #0]
 800530c:	429a      	cmp	r2, r3
 800530e:	d005      	beq.n	800531c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e086      	b.n	8005422 <HAL_RCC_ClockConfig+0x34e>
 8005314:	52002000 	.word	0x52002000
 8005318:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0304 	and.w	r3, r3, #4
 8005324:	2b00      	cmp	r3, #0
 8005326:	d010      	beq.n	800534a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	691a      	ldr	r2, [r3, #16]
 800532c:	4b3f      	ldr	r3, [pc, #252]	@ (800542c <HAL_RCC_ClockConfig+0x358>)
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005334:	429a      	cmp	r2, r3
 8005336:	d208      	bcs.n	800534a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005338:	4b3c      	ldr	r3, [pc, #240]	@ (800542c <HAL_RCC_ClockConfig+0x358>)
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	4939      	ldr	r1, [pc, #228]	@ (800542c <HAL_RCC_ClockConfig+0x358>)
 8005346:	4313      	orrs	r3, r2
 8005348:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0308 	and.w	r3, r3, #8
 8005352:	2b00      	cmp	r3, #0
 8005354:	d010      	beq.n	8005378 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	695a      	ldr	r2, [r3, #20]
 800535a:	4b34      	ldr	r3, [pc, #208]	@ (800542c <HAL_RCC_ClockConfig+0x358>)
 800535c:	69db      	ldr	r3, [r3, #28]
 800535e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005362:	429a      	cmp	r2, r3
 8005364:	d208      	bcs.n	8005378 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005366:	4b31      	ldr	r3, [pc, #196]	@ (800542c <HAL_RCC_ClockConfig+0x358>)
 8005368:	69db      	ldr	r3, [r3, #28]
 800536a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	492e      	ldr	r1, [pc, #184]	@ (800542c <HAL_RCC_ClockConfig+0x358>)
 8005374:	4313      	orrs	r3, r2
 8005376:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0310 	and.w	r3, r3, #16
 8005380:	2b00      	cmp	r3, #0
 8005382:	d010      	beq.n	80053a6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	699a      	ldr	r2, [r3, #24]
 8005388:	4b28      	ldr	r3, [pc, #160]	@ (800542c <HAL_RCC_ClockConfig+0x358>)
 800538a:	69db      	ldr	r3, [r3, #28]
 800538c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005390:	429a      	cmp	r2, r3
 8005392:	d208      	bcs.n	80053a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005394:	4b25      	ldr	r3, [pc, #148]	@ (800542c <HAL_RCC_ClockConfig+0x358>)
 8005396:	69db      	ldr	r3, [r3, #28]
 8005398:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	4922      	ldr	r1, [pc, #136]	@ (800542c <HAL_RCC_ClockConfig+0x358>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0320 	and.w	r3, r3, #32
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d010      	beq.n	80053d4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	69da      	ldr	r2, [r3, #28]
 80053b6:	4b1d      	ldr	r3, [pc, #116]	@ (800542c <HAL_RCC_ClockConfig+0x358>)
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053be:	429a      	cmp	r2, r3
 80053c0:	d208      	bcs.n	80053d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80053c2:	4b1a      	ldr	r3, [pc, #104]	@ (800542c <HAL_RCC_ClockConfig+0x358>)
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	4917      	ldr	r1, [pc, #92]	@ (800542c <HAL_RCC_ClockConfig+0x358>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80053d4:	f000 f834 	bl	8005440 <HAL_RCC_GetSysClockFreq>
 80053d8:	4602      	mov	r2, r0
 80053da:	4b14      	ldr	r3, [pc, #80]	@ (800542c <HAL_RCC_ClockConfig+0x358>)
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	0a1b      	lsrs	r3, r3, #8
 80053e0:	f003 030f 	and.w	r3, r3, #15
 80053e4:	4912      	ldr	r1, [pc, #72]	@ (8005430 <HAL_RCC_ClockConfig+0x35c>)
 80053e6:	5ccb      	ldrb	r3, [r1, r3]
 80053e8:	f003 031f 	and.w	r3, r3, #31
 80053ec:	fa22 f303 	lsr.w	r3, r2, r3
 80053f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80053f2:	4b0e      	ldr	r3, [pc, #56]	@ (800542c <HAL_RCC_ClockConfig+0x358>)
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	f003 030f 	and.w	r3, r3, #15
 80053fa:	4a0d      	ldr	r2, [pc, #52]	@ (8005430 <HAL_RCC_ClockConfig+0x35c>)
 80053fc:	5cd3      	ldrb	r3, [r2, r3]
 80053fe:	f003 031f 	and.w	r3, r3, #31
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	fa22 f303 	lsr.w	r3, r2, r3
 8005408:	4a0a      	ldr	r2, [pc, #40]	@ (8005434 <HAL_RCC_ClockConfig+0x360>)
 800540a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800540c:	4a0a      	ldr	r2, [pc, #40]	@ (8005438 <HAL_RCC_ClockConfig+0x364>)
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005412:	4b0a      	ldr	r3, [pc, #40]	@ (800543c <HAL_RCC_ClockConfig+0x368>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4618      	mov	r0, r3
 8005418:	f7fb fdfc 	bl	8001014 <HAL_InitTick>
 800541c:	4603      	mov	r3, r0
 800541e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005420:	7bfb      	ldrb	r3, [r7, #15]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3718      	adds	r7, #24
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	58024400 	.word	0x58024400
 8005430:	0800a1c8 	.word	0x0800a1c8
 8005434:	24000004 	.word	0x24000004
 8005438:	24000000 	.word	0x24000000
 800543c:	24000008 	.word	0x24000008

08005440 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005440:	b480      	push	{r7}
 8005442:	b089      	sub	sp, #36	@ 0x24
 8005444:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005446:	4bb3      	ldr	r3, [pc, #716]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800544e:	2b18      	cmp	r3, #24
 8005450:	f200 8155 	bhi.w	80056fe <HAL_RCC_GetSysClockFreq+0x2be>
 8005454:	a201      	add	r2, pc, #4	@ (adr r2, 800545c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545a:	bf00      	nop
 800545c:	080054c1 	.word	0x080054c1
 8005460:	080056ff 	.word	0x080056ff
 8005464:	080056ff 	.word	0x080056ff
 8005468:	080056ff 	.word	0x080056ff
 800546c:	080056ff 	.word	0x080056ff
 8005470:	080056ff 	.word	0x080056ff
 8005474:	080056ff 	.word	0x080056ff
 8005478:	080056ff 	.word	0x080056ff
 800547c:	080054e7 	.word	0x080054e7
 8005480:	080056ff 	.word	0x080056ff
 8005484:	080056ff 	.word	0x080056ff
 8005488:	080056ff 	.word	0x080056ff
 800548c:	080056ff 	.word	0x080056ff
 8005490:	080056ff 	.word	0x080056ff
 8005494:	080056ff 	.word	0x080056ff
 8005498:	080056ff 	.word	0x080056ff
 800549c:	080054ed 	.word	0x080054ed
 80054a0:	080056ff 	.word	0x080056ff
 80054a4:	080056ff 	.word	0x080056ff
 80054a8:	080056ff 	.word	0x080056ff
 80054ac:	080056ff 	.word	0x080056ff
 80054b0:	080056ff 	.word	0x080056ff
 80054b4:	080056ff 	.word	0x080056ff
 80054b8:	080056ff 	.word	0x080056ff
 80054bc:	080054f3 	.word	0x080054f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054c0:	4b94      	ldr	r3, [pc, #592]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0320 	and.w	r3, r3, #32
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d009      	beq.n	80054e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80054cc:	4b91      	ldr	r3, [pc, #580]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	08db      	lsrs	r3, r3, #3
 80054d2:	f003 0303 	and.w	r3, r3, #3
 80054d6:	4a90      	ldr	r2, [pc, #576]	@ (8005718 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80054d8:	fa22 f303 	lsr.w	r3, r2, r3
 80054dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80054de:	e111      	b.n	8005704 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80054e0:	4b8d      	ldr	r3, [pc, #564]	@ (8005718 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80054e2:	61bb      	str	r3, [r7, #24]
      break;
 80054e4:	e10e      	b.n	8005704 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80054e6:	4b8d      	ldr	r3, [pc, #564]	@ (800571c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80054e8:	61bb      	str	r3, [r7, #24]
      break;
 80054ea:	e10b      	b.n	8005704 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80054ec:	4b8c      	ldr	r3, [pc, #560]	@ (8005720 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80054ee:	61bb      	str	r3, [r7, #24]
      break;
 80054f0:	e108      	b.n	8005704 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80054f2:	4b88      	ldr	r3, [pc, #544]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f6:	f003 0303 	and.w	r3, r3, #3
 80054fa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80054fc:	4b85      	ldr	r3, [pc, #532]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005500:	091b      	lsrs	r3, r3, #4
 8005502:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005506:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005508:	4b82      	ldr	r3, [pc, #520]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800550a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800550c:	f003 0301 	and.w	r3, r3, #1
 8005510:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005512:	4b80      	ldr	r3, [pc, #512]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005516:	08db      	lsrs	r3, r3, #3
 8005518:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	fb02 f303 	mul.w	r3, r2, r3
 8005522:	ee07 3a90 	vmov	s15, r3
 8005526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800552a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	2b00      	cmp	r3, #0
 8005532:	f000 80e1 	beq.w	80056f8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	2b02      	cmp	r3, #2
 800553a:	f000 8083 	beq.w	8005644 <HAL_RCC_GetSysClockFreq+0x204>
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	2b02      	cmp	r3, #2
 8005542:	f200 80a1 	bhi.w	8005688 <HAL_RCC_GetSysClockFreq+0x248>
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d003      	beq.n	8005554 <HAL_RCC_GetSysClockFreq+0x114>
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	2b01      	cmp	r3, #1
 8005550:	d056      	beq.n	8005600 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005552:	e099      	b.n	8005688 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005554:	4b6f      	ldr	r3, [pc, #444]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0320 	and.w	r3, r3, #32
 800555c:	2b00      	cmp	r3, #0
 800555e:	d02d      	beq.n	80055bc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005560:	4b6c      	ldr	r3, [pc, #432]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	08db      	lsrs	r3, r3, #3
 8005566:	f003 0303 	and.w	r3, r3, #3
 800556a:	4a6b      	ldr	r2, [pc, #428]	@ (8005718 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800556c:	fa22 f303 	lsr.w	r3, r2, r3
 8005570:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	ee07 3a90 	vmov	s15, r3
 8005578:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	ee07 3a90 	vmov	s15, r3
 8005582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800558a:	4b62      	ldr	r3, [pc, #392]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800558c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800558e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005592:	ee07 3a90 	vmov	s15, r3
 8005596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800559a:	ed97 6a02 	vldr	s12, [r7, #8]
 800559e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005724 <HAL_RCC_GetSysClockFreq+0x2e4>
 80055a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055b6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80055ba:	e087      	b.n	80056cc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	ee07 3a90 	vmov	s15, r3
 80055c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055c6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005728 <HAL_RCC_GetSysClockFreq+0x2e8>
 80055ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055ce:	4b51      	ldr	r3, [pc, #324]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055d6:	ee07 3a90 	vmov	s15, r3
 80055da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055de:	ed97 6a02 	vldr	s12, [r7, #8]
 80055e2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005724 <HAL_RCC_GetSysClockFreq+0x2e4>
 80055e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80055fe:	e065      	b.n	80056cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	ee07 3a90 	vmov	s15, r3
 8005606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800560a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800572c <HAL_RCC_GetSysClockFreq+0x2ec>
 800560e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005612:	4b40      	ldr	r3, [pc, #256]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800561a:	ee07 3a90 	vmov	s15, r3
 800561e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005622:	ed97 6a02 	vldr	s12, [r7, #8]
 8005626:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005724 <HAL_RCC_GetSysClockFreq+0x2e4>
 800562a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800562e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005632:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800563a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800563e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005642:	e043      	b.n	80056cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	ee07 3a90 	vmov	s15, r3
 800564a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800564e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005730 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005656:	4b2f      	ldr	r3, [pc, #188]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800565a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800565e:	ee07 3a90 	vmov	s15, r3
 8005662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005666:	ed97 6a02 	vldr	s12, [r7, #8]
 800566a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005724 <HAL_RCC_GetSysClockFreq+0x2e4>
 800566e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005676:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800567a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800567e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005682:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005686:	e021      	b.n	80056cc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	ee07 3a90 	vmov	s15, r3
 800568e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005692:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800572c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800569a:	4b1e      	ldr	r3, [pc, #120]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800569c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800569e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056a2:	ee07 3a90 	vmov	s15, r3
 80056a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80056ae:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005724 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80056ca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80056cc:	4b11      	ldr	r3, [pc, #68]	@ (8005714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056d0:	0a5b      	lsrs	r3, r3, #9
 80056d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056d6:	3301      	adds	r3, #1
 80056d8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	ee07 3a90 	vmov	s15, r3
 80056e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80056e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80056e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056f0:	ee17 3a90 	vmov	r3, s15
 80056f4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80056f6:	e005      	b.n	8005704 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80056f8:	2300      	movs	r3, #0
 80056fa:	61bb      	str	r3, [r7, #24]
      break;
 80056fc:	e002      	b.n	8005704 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80056fe:	4b07      	ldr	r3, [pc, #28]	@ (800571c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005700:	61bb      	str	r3, [r7, #24]
      break;
 8005702:	bf00      	nop
  }

  return sysclockfreq;
 8005704:	69bb      	ldr	r3, [r7, #24]
}
 8005706:	4618      	mov	r0, r3
 8005708:	3724      	adds	r7, #36	@ 0x24
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	58024400 	.word	0x58024400
 8005718:	03d09000 	.word	0x03d09000
 800571c:	003d0900 	.word	0x003d0900
 8005720:	017d7840 	.word	0x017d7840
 8005724:	46000000 	.word	0x46000000
 8005728:	4c742400 	.word	0x4c742400
 800572c:	4a742400 	.word	0x4a742400
 8005730:	4bbebc20 	.word	0x4bbebc20

08005734 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800573a:	f7ff fe81 	bl	8005440 <HAL_RCC_GetSysClockFreq>
 800573e:	4602      	mov	r2, r0
 8005740:	4b10      	ldr	r3, [pc, #64]	@ (8005784 <HAL_RCC_GetHCLKFreq+0x50>)
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	0a1b      	lsrs	r3, r3, #8
 8005746:	f003 030f 	and.w	r3, r3, #15
 800574a:	490f      	ldr	r1, [pc, #60]	@ (8005788 <HAL_RCC_GetHCLKFreq+0x54>)
 800574c:	5ccb      	ldrb	r3, [r1, r3]
 800574e:	f003 031f 	and.w	r3, r3, #31
 8005752:	fa22 f303 	lsr.w	r3, r2, r3
 8005756:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005758:	4b0a      	ldr	r3, [pc, #40]	@ (8005784 <HAL_RCC_GetHCLKFreq+0x50>)
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	f003 030f 	and.w	r3, r3, #15
 8005760:	4a09      	ldr	r2, [pc, #36]	@ (8005788 <HAL_RCC_GetHCLKFreq+0x54>)
 8005762:	5cd3      	ldrb	r3, [r2, r3]
 8005764:	f003 031f 	and.w	r3, r3, #31
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	fa22 f303 	lsr.w	r3, r2, r3
 800576e:	4a07      	ldr	r2, [pc, #28]	@ (800578c <HAL_RCC_GetHCLKFreq+0x58>)
 8005770:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005772:	4a07      	ldr	r2, [pc, #28]	@ (8005790 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005778:	4b04      	ldr	r3, [pc, #16]	@ (800578c <HAL_RCC_GetHCLKFreq+0x58>)
 800577a:	681b      	ldr	r3, [r3, #0]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3708      	adds	r7, #8
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	58024400 	.word	0x58024400
 8005788:	0800a1c8 	.word	0x0800a1c8
 800578c:	24000004 	.word	0x24000004
 8005790:	24000000 	.word	0x24000000

08005794 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005798:	f7ff ffcc 	bl	8005734 <HAL_RCC_GetHCLKFreq>
 800579c:	4602      	mov	r2, r0
 800579e:	4b06      	ldr	r3, [pc, #24]	@ (80057b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	091b      	lsrs	r3, r3, #4
 80057a4:	f003 0307 	and.w	r3, r3, #7
 80057a8:	4904      	ldr	r1, [pc, #16]	@ (80057bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80057aa:	5ccb      	ldrb	r3, [r1, r3]
 80057ac:	f003 031f 	and.w	r3, r3, #31
 80057b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	58024400 	.word	0x58024400
 80057bc:	0800a1c8 	.word	0x0800a1c8

080057c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057c4:	b0c6      	sub	sp, #280	@ 0x118
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057cc:	2300      	movs	r3, #0
 80057ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057d2:	2300      	movs	r3, #0
 80057d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80057d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80057e4:	2500      	movs	r5, #0
 80057e6:	ea54 0305 	orrs.w	r3, r4, r5
 80057ea:	d049      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80057ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80057f6:	d02f      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80057f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80057fc:	d828      	bhi.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80057fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005802:	d01a      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005804:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005808:	d822      	bhi.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800580a:	2b00      	cmp	r3, #0
 800580c:	d003      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800580e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005812:	d007      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005814:	e01c      	b.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005816:	4bab      	ldr	r3, [pc, #684]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800581a:	4aaa      	ldr	r2, [pc, #680]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800581c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005820:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005822:	e01a      	b.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005824:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005828:	3308      	adds	r3, #8
 800582a:	2102      	movs	r1, #2
 800582c:	4618      	mov	r0, r3
 800582e:	f002 fa49 	bl	8007cc4 <RCCEx_PLL2_Config>
 8005832:	4603      	mov	r3, r0
 8005834:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005838:	e00f      	b.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800583a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800583e:	3328      	adds	r3, #40	@ 0x28
 8005840:	2102      	movs	r1, #2
 8005842:	4618      	mov	r0, r3
 8005844:	f002 faf0 	bl	8007e28 <RCCEx_PLL3_Config>
 8005848:	4603      	mov	r3, r0
 800584a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800584e:	e004      	b.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005856:	e000      	b.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005858:	bf00      	nop
    }

    if (ret == HAL_OK)
 800585a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10a      	bne.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005862:	4b98      	ldr	r3, [pc, #608]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005864:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005866:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800586a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800586e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005870:	4a94      	ldr	r2, [pc, #592]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005872:	430b      	orrs	r3, r1
 8005874:	6513      	str	r3, [r2, #80]	@ 0x50
 8005876:	e003      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005878:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800587c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005880:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005888:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800588c:	f04f 0900 	mov.w	r9, #0
 8005890:	ea58 0309 	orrs.w	r3, r8, r9
 8005894:	d047      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005896:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800589a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800589c:	2b04      	cmp	r3, #4
 800589e:	d82a      	bhi.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80058a0:	a201      	add	r2, pc, #4	@ (adr r2, 80058a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80058a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a6:	bf00      	nop
 80058a8:	080058bd 	.word	0x080058bd
 80058ac:	080058cb 	.word	0x080058cb
 80058b0:	080058e1 	.word	0x080058e1
 80058b4:	080058ff 	.word	0x080058ff
 80058b8:	080058ff 	.word	0x080058ff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058bc:	4b81      	ldr	r3, [pc, #516]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80058be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c0:	4a80      	ldr	r2, [pc, #512]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80058c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058c8:	e01a      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058ce:	3308      	adds	r3, #8
 80058d0:	2100      	movs	r1, #0
 80058d2:	4618      	mov	r0, r3
 80058d4:	f002 f9f6 	bl	8007cc4 <RCCEx_PLL2_Config>
 80058d8:	4603      	mov	r3, r0
 80058da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058de:	e00f      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058e4:	3328      	adds	r3, #40	@ 0x28
 80058e6:	2100      	movs	r1, #0
 80058e8:	4618      	mov	r0, r3
 80058ea:	f002 fa9d 	bl	8007e28 <RCCEx_PLL3_Config>
 80058ee:	4603      	mov	r3, r0
 80058f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058f4:	e004      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80058fc:	e000      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80058fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005900:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005904:	2b00      	cmp	r3, #0
 8005906:	d10a      	bne.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005908:	4b6e      	ldr	r3, [pc, #440]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800590a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800590c:	f023 0107 	bic.w	r1, r3, #7
 8005910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005916:	4a6b      	ldr	r2, [pc, #428]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005918:	430b      	orrs	r3, r1
 800591a:	6513      	str	r3, [r2, #80]	@ 0x50
 800591c:	e003      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800591e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005922:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005926:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800592a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8005932:	f04f 0b00 	mov.w	fp, #0
 8005936:	ea5a 030b 	orrs.w	r3, sl, fp
 800593a:	d05b      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800593c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005940:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005944:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005948:	d03b      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800594a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800594e:	d834      	bhi.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005950:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005954:	d037      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005956:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800595a:	d82e      	bhi.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800595c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005960:	d033      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005962:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005966:	d828      	bhi.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005968:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800596c:	d01a      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800596e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005972:	d822      	bhi.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005974:	2b00      	cmp	r3, #0
 8005976:	d003      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005978:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800597c:	d007      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800597e:	e01c      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005980:	4b50      	ldr	r3, [pc, #320]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005984:	4a4f      	ldr	r2, [pc, #316]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005986:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800598a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800598c:	e01e      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800598e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005992:	3308      	adds	r3, #8
 8005994:	2100      	movs	r1, #0
 8005996:	4618      	mov	r0, r3
 8005998:	f002 f994 	bl	8007cc4 <RCCEx_PLL2_Config>
 800599c:	4603      	mov	r3, r0
 800599e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80059a2:	e013      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059a8:	3328      	adds	r3, #40	@ 0x28
 80059aa:	2100      	movs	r1, #0
 80059ac:	4618      	mov	r0, r3
 80059ae:	f002 fa3b 	bl	8007e28 <RCCEx_PLL3_Config>
 80059b2:	4603      	mov	r3, r0
 80059b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059b8:	e008      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80059c0:	e004      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80059c2:	bf00      	nop
 80059c4:	e002      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80059c6:	bf00      	nop
 80059c8:	e000      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80059ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10b      	bne.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80059d4:	4b3b      	ldr	r3, [pc, #236]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80059d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059d8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80059dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80059e4:	4a37      	ldr	r2, [pc, #220]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80059e6:	430b      	orrs	r3, r1
 80059e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80059ea:	e003      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80059f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80059f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005a00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005a04:	2300      	movs	r3, #0
 8005a06:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005a0a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005a0e:	460b      	mov	r3, r1
 8005a10:	4313      	orrs	r3, r2
 8005a12:	d05d      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a18:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005a1c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005a20:	d03b      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005a22:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005a26:	d834      	bhi.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005a28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a2c:	d037      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005a2e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a32:	d82e      	bhi.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005a34:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005a38:	d033      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005a3a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005a3e:	d828      	bhi.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005a40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a44:	d01a      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005a46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a4a:	d822      	bhi.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d003      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005a50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a54:	d007      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005a56:	e01c      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a58:	4b1a      	ldr	r3, [pc, #104]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5c:	4a19      	ldr	r2, [pc, #100]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005a5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a64:	e01e      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a6a:	3308      	adds	r3, #8
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f002 f928 	bl	8007cc4 <RCCEx_PLL2_Config>
 8005a74:	4603      	mov	r3, r0
 8005a76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005a7a:	e013      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a80:	3328      	adds	r3, #40	@ 0x28
 8005a82:	2100      	movs	r1, #0
 8005a84:	4618      	mov	r0, r3
 8005a86:	f002 f9cf 	bl	8007e28 <RCCEx_PLL3_Config>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a90:	e008      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005a98:	e004      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005a9a:	bf00      	nop
 8005a9c:	e002      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005a9e:	bf00      	nop
 8005aa0:	e000      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005aa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aa4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d10d      	bne.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005aac:	4b05      	ldr	r3, [pc, #20]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ab0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ab8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005abc:	4a01      	ldr	r2, [pc, #4]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005abe:	430b      	orrs	r3, r1
 8005ac0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ac2:	e005      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005ac4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005acc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005adc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005ae6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005aea:	460b      	mov	r3, r1
 8005aec:	4313      	orrs	r3, r2
 8005aee:	d03a      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005af6:	2b30      	cmp	r3, #48	@ 0x30
 8005af8:	d01f      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005afa:	2b30      	cmp	r3, #48	@ 0x30
 8005afc:	d819      	bhi.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005afe:	2b20      	cmp	r3, #32
 8005b00:	d00c      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005b02:	2b20      	cmp	r3, #32
 8005b04:	d815      	bhi.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d019      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005b0a:	2b10      	cmp	r3, #16
 8005b0c:	d111      	bne.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b0e:	4baa      	ldr	r3, [pc, #680]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b12:	4aa9      	ldr	r2, [pc, #676]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005b14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005b1a:	e011      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b20:	3308      	adds	r3, #8
 8005b22:	2102      	movs	r1, #2
 8005b24:	4618      	mov	r0, r3
 8005b26:	f002 f8cd 	bl	8007cc4 <RCCEx_PLL2_Config>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005b30:	e006      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005b38:	e002      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005b3a:	bf00      	nop
 8005b3c:	e000      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005b3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10a      	bne.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005b48:	4b9b      	ldr	r3, [pc, #620]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b4c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b56:	4a98      	ldr	r2, [pc, #608]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005b58:	430b      	orrs	r3, r1
 8005b5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005b5c:	e003      	b.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b62:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005b72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b76:	2300      	movs	r3, #0
 8005b78:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005b7c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005b80:	460b      	mov	r3, r1
 8005b82:	4313      	orrs	r3, r2
 8005b84:	d051      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b90:	d035      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005b92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b96:	d82e      	bhi.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005b98:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b9c:	d031      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005b9e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ba2:	d828      	bhi.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005ba4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ba8:	d01a      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005baa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bae:	d822      	bhi.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d003      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005bb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bb8:	d007      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005bba:	e01c      	b.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bbc:	4b7e      	ldr	r3, [pc, #504]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc0:	4a7d      	ldr	r2, [pc, #500]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005bc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005bc8:	e01c      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bce:	3308      	adds	r3, #8
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f002 f876 	bl	8007cc4 <RCCEx_PLL2_Config>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005bde:	e011      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005be4:	3328      	adds	r3, #40	@ 0x28
 8005be6:	2100      	movs	r1, #0
 8005be8:	4618      	mov	r0, r3
 8005bea:	f002 f91d 	bl	8007e28 <RCCEx_PLL3_Config>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005bf4:	e006      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005bfc:	e002      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005bfe:	bf00      	nop
 8005c00:	e000      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005c02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10a      	bne.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005c0c:	4b6a      	ldr	r3, [pc, #424]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005c0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c10:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c1a:	4a67      	ldr	r2, [pc, #412]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005c1c:	430b      	orrs	r3, r1
 8005c1e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c20:	e003      	b.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c26:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c32:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005c36:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c40:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005c44:	460b      	mov	r3, r1
 8005c46:	4313      	orrs	r3, r2
 8005c48:	d053      	beq.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c54:	d033      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005c56:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c5a:	d82c      	bhi.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005c5c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c60:	d02f      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8005c62:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c66:	d826      	bhi.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005c68:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c6c:	d02b      	beq.n	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005c6e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c72:	d820      	bhi.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005c74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c78:	d012      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005c7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c7e:	d81a      	bhi.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d022      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005c84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c88:	d115      	bne.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c8e:	3308      	adds	r3, #8
 8005c90:	2101      	movs	r1, #1
 8005c92:	4618      	mov	r0, r3
 8005c94:	f002 f816 	bl	8007cc4 <RCCEx_PLL2_Config>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005c9e:	e015      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ca4:	3328      	adds	r3, #40	@ 0x28
 8005ca6:	2101      	movs	r1, #1
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f002 f8bd 	bl	8007e28 <RCCEx_PLL3_Config>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005cb4:	e00a      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005cbc:	e006      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005cbe:	bf00      	nop
 8005cc0:	e004      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005cc2:	bf00      	nop
 8005cc4:	e002      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005cc6:	bf00      	nop
 8005cc8:	e000      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005cca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ccc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10a      	bne.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005cd4:	4b38      	ldr	r3, [pc, #224]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005cd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cd8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ce0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ce2:	4a35      	ldr	r2, [pc, #212]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ce4:	430b      	orrs	r3, r1
 8005ce6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ce8:	e003      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005cee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfa:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005cfe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005d02:	2300      	movs	r3, #0
 8005d04:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005d08:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	d058      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005d1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d1e:	d033      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005d20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d24:	d82c      	bhi.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005d26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d2a:	d02f      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d30:	d826      	bhi.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005d32:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d36:	d02b      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005d38:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d3c:	d820      	bhi.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005d3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d42:	d012      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8005d44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d48:	d81a      	bhi.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d022      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005d4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d52:	d115      	bne.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d58:	3308      	adds	r3, #8
 8005d5a:	2101      	movs	r1, #1
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f001 ffb1 	bl	8007cc4 <RCCEx_PLL2_Config>
 8005d62:	4603      	mov	r3, r0
 8005d64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005d68:	e015      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d6e:	3328      	adds	r3, #40	@ 0x28
 8005d70:	2101      	movs	r1, #1
 8005d72:	4618      	mov	r0, r3
 8005d74:	f002 f858 	bl	8007e28 <RCCEx_PLL3_Config>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005d7e:	e00a      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005d86:	e006      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005d88:	bf00      	nop
 8005d8a:	e004      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005d8c:	bf00      	nop
 8005d8e:	e002      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005d90:	bf00      	nop
 8005d92:	e000      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005d94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10e      	bne.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005d9e:	4b06      	ldr	r3, [pc, #24]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005da2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005daa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005dae:	4a02      	ldr	r2, [pc, #8]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005db0:	430b      	orrs	r3, r1
 8005db2:	6593      	str	r3, [r2, #88]	@ 0x58
 8005db4:	e006      	b.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005db6:	bf00      	nop
 8005db8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005dc0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dcc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005dd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005dda:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005dde:	460b      	mov	r3, r1
 8005de0:	4313      	orrs	r3, r2
 8005de2:	d037      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005de8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005dee:	d00e      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005df0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005df4:	d816      	bhi.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d018      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005dfa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005dfe:	d111      	bne.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e00:	4bc4      	ldr	r3, [pc, #784]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e04:	4ac3      	ldr	r2, [pc, #780]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005e0c:	e00f      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e12:	3308      	adds	r3, #8
 8005e14:	2101      	movs	r1, #1
 8005e16:	4618      	mov	r0, r3
 8005e18:	f001 ff54 	bl	8007cc4 <RCCEx_PLL2_Config>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005e22:	e004      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e2a:	e000      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005e2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e2e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10a      	bne.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005e36:	4bb7      	ldr	r3, [pc, #732]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e3a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e44:	4ab3      	ldr	r2, [pc, #716]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e46:	430b      	orrs	r3, r1
 8005e48:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e4a:	e003      	b.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005e60:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e64:	2300      	movs	r3, #0
 8005e66:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005e6a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005e6e:	460b      	mov	r3, r1
 8005e70:	4313      	orrs	r3, r2
 8005e72:	d039      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e7a:	2b03      	cmp	r3, #3
 8005e7c:	d81c      	bhi.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8005e84 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e84:	08005ec1 	.word	0x08005ec1
 8005e88:	08005e95 	.word	0x08005e95
 8005e8c:	08005ea3 	.word	0x08005ea3
 8005e90:	08005ec1 	.word	0x08005ec1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e94:	4b9f      	ldr	r3, [pc, #636]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e98:	4a9e      	ldr	r2, [pc, #632]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005ea0:	e00f      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ea6:	3308      	adds	r3, #8
 8005ea8:	2102      	movs	r1, #2
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f001 ff0a 	bl	8007cc4 <RCCEx_PLL2_Config>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005eb6:	e004      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005ebe:	e000      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005ec0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ec2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10a      	bne.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005eca:	4b92      	ldr	r3, [pc, #584]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ece:	f023 0103 	bic.w	r1, r3, #3
 8005ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ed6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ed8:	4a8e      	ldr	r2, [pc, #568]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005eda:	430b      	orrs	r3, r1
 8005edc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005ede:	e003      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ee0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ee4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005ef4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ef8:	2300      	movs	r3, #0
 8005efa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005efe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005f02:	460b      	mov	r3, r1
 8005f04:	4313      	orrs	r3, r2
 8005f06:	f000 8099 	beq.w	800603c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f0a:	4b83      	ldr	r3, [pc, #524]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a82      	ldr	r2, [pc, #520]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005f10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f14:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f16:	f7fb f8c7 	bl	80010a8 <HAL_GetTick>
 8005f1a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f1e:	e00b      	b.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f20:	f7fb f8c2 	bl	80010a8 <HAL_GetTick>
 8005f24:	4602      	mov	r2, r0
 8005f26:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	2b64      	cmp	r3, #100	@ 0x64
 8005f2e:	d903      	bls.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f36:	e005      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f38:	4b77      	ldr	r3, [pc, #476]	@ (8006118 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d0ed      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005f44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d173      	bne.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005f4c:	4b71      	ldr	r3, [pc, #452]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f4e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005f58:	4053      	eors	r3, r2
 8005f5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d015      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f62:	4b6c      	ldr	r3, [pc, #432]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f6a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f6e:	4b69      	ldr	r3, [pc, #420]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f72:	4a68      	ldr	r2, [pc, #416]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f78:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f7a:	4b66      	ldr	r3, [pc, #408]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f7e:	4a65      	ldr	r2, [pc, #404]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f84:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005f86:	4a63      	ldr	r2, [pc, #396]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005f8c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f92:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005f96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f9a:	d118      	bne.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f9c:	f7fb f884 	bl	80010a8 <HAL_GetTick>
 8005fa0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005fa4:	e00d      	b.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fa6:	f7fb f87f 	bl	80010a8 <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005fb0:	1ad2      	subs	r2, r2, r3
 8005fb2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d903      	bls.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8005fc0:	e005      	b.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005fc2:	4b54      	ldr	r3, [pc, #336]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fc6:	f003 0302 	and.w	r3, r3, #2
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d0eb      	beq.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005fce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d129      	bne.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005fde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fe2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fe6:	d10e      	bne.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005fe8:	4b4a      	ldr	r3, [pc, #296]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ff4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005ff8:	091a      	lsrs	r2, r3, #4
 8005ffa:	4b48      	ldr	r3, [pc, #288]	@ (800611c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	4a45      	ldr	r2, [pc, #276]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006000:	430b      	orrs	r3, r1
 8006002:	6113      	str	r3, [r2, #16]
 8006004:	e005      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006006:	4b43      	ldr	r3, [pc, #268]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	4a42      	ldr	r2, [pc, #264]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800600c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006010:	6113      	str	r3, [r2, #16]
 8006012:	4b40      	ldr	r3, [pc, #256]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006014:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800601a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800601e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006022:	4a3c      	ldr	r2, [pc, #240]	@ (8006114 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006024:	430b      	orrs	r3, r1
 8006026:	6713      	str	r3, [r2, #112]	@ 0x70
 8006028:	e008      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800602a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800602e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8006032:	e003      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006034:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006038:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800603c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006044:	f002 0301 	and.w	r3, r2, #1
 8006048:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800604c:	2300      	movs	r3, #0
 800604e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006052:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006056:	460b      	mov	r3, r1
 8006058:	4313      	orrs	r3, r2
 800605a:	f000 808f 	beq.w	800617c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800605e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006062:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006064:	2b28      	cmp	r3, #40	@ 0x28
 8006066:	d871      	bhi.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006068:	a201      	add	r2, pc, #4	@ (adr r2, 8006070 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800606a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606e:	bf00      	nop
 8006070:	08006155 	.word	0x08006155
 8006074:	0800614d 	.word	0x0800614d
 8006078:	0800614d 	.word	0x0800614d
 800607c:	0800614d 	.word	0x0800614d
 8006080:	0800614d 	.word	0x0800614d
 8006084:	0800614d 	.word	0x0800614d
 8006088:	0800614d 	.word	0x0800614d
 800608c:	0800614d 	.word	0x0800614d
 8006090:	08006121 	.word	0x08006121
 8006094:	0800614d 	.word	0x0800614d
 8006098:	0800614d 	.word	0x0800614d
 800609c:	0800614d 	.word	0x0800614d
 80060a0:	0800614d 	.word	0x0800614d
 80060a4:	0800614d 	.word	0x0800614d
 80060a8:	0800614d 	.word	0x0800614d
 80060ac:	0800614d 	.word	0x0800614d
 80060b0:	08006137 	.word	0x08006137
 80060b4:	0800614d 	.word	0x0800614d
 80060b8:	0800614d 	.word	0x0800614d
 80060bc:	0800614d 	.word	0x0800614d
 80060c0:	0800614d 	.word	0x0800614d
 80060c4:	0800614d 	.word	0x0800614d
 80060c8:	0800614d 	.word	0x0800614d
 80060cc:	0800614d 	.word	0x0800614d
 80060d0:	08006155 	.word	0x08006155
 80060d4:	0800614d 	.word	0x0800614d
 80060d8:	0800614d 	.word	0x0800614d
 80060dc:	0800614d 	.word	0x0800614d
 80060e0:	0800614d 	.word	0x0800614d
 80060e4:	0800614d 	.word	0x0800614d
 80060e8:	0800614d 	.word	0x0800614d
 80060ec:	0800614d 	.word	0x0800614d
 80060f0:	08006155 	.word	0x08006155
 80060f4:	0800614d 	.word	0x0800614d
 80060f8:	0800614d 	.word	0x0800614d
 80060fc:	0800614d 	.word	0x0800614d
 8006100:	0800614d 	.word	0x0800614d
 8006104:	0800614d 	.word	0x0800614d
 8006108:	0800614d 	.word	0x0800614d
 800610c:	0800614d 	.word	0x0800614d
 8006110:	08006155 	.word	0x08006155
 8006114:	58024400 	.word	0x58024400
 8006118:	58024800 	.word	0x58024800
 800611c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006124:	3308      	adds	r3, #8
 8006126:	2101      	movs	r1, #1
 8006128:	4618      	mov	r0, r3
 800612a:	f001 fdcb 	bl	8007cc4 <RCCEx_PLL2_Config>
 800612e:	4603      	mov	r3, r0
 8006130:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006134:	e00f      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006136:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800613a:	3328      	adds	r3, #40	@ 0x28
 800613c:	2101      	movs	r1, #1
 800613e:	4618      	mov	r0, r3
 8006140:	f001 fe72 	bl	8007e28 <RCCEx_PLL3_Config>
 8006144:	4603      	mov	r3, r0
 8006146:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800614a:	e004      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006152:	e000      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006154:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006156:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800615a:	2b00      	cmp	r3, #0
 800615c:	d10a      	bne.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800615e:	4bbf      	ldr	r3, [pc, #764]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006162:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800616a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800616c:	4abb      	ldr	r2, [pc, #748]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800616e:	430b      	orrs	r3, r1
 8006170:	6553      	str	r3, [r2, #84]	@ 0x54
 8006172:	e003      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006174:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006178:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800617c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006184:	f002 0302 	and.w	r3, r2, #2
 8006188:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800618c:	2300      	movs	r3, #0
 800618e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006192:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006196:	460b      	mov	r3, r1
 8006198:	4313      	orrs	r3, r2
 800619a:	d041      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800619c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061a2:	2b05      	cmp	r3, #5
 80061a4:	d824      	bhi.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80061a6:	a201      	add	r2, pc, #4	@ (adr r2, 80061ac <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80061a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ac:	080061f9 	.word	0x080061f9
 80061b0:	080061c5 	.word	0x080061c5
 80061b4:	080061db 	.word	0x080061db
 80061b8:	080061f9 	.word	0x080061f9
 80061bc:	080061f9 	.word	0x080061f9
 80061c0:	080061f9 	.word	0x080061f9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80061c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061c8:	3308      	adds	r3, #8
 80061ca:	2101      	movs	r1, #1
 80061cc:	4618      	mov	r0, r3
 80061ce:	f001 fd79 	bl	8007cc4 <RCCEx_PLL2_Config>
 80061d2:	4603      	mov	r3, r0
 80061d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80061d8:	e00f      	b.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061de:	3328      	adds	r3, #40	@ 0x28
 80061e0:	2101      	movs	r1, #1
 80061e2:	4618      	mov	r0, r3
 80061e4:	f001 fe20 	bl	8007e28 <RCCEx_PLL3_Config>
 80061e8:	4603      	mov	r3, r0
 80061ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80061ee:	e004      	b.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80061f6:	e000      	b.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80061f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10a      	bne.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006202:	4b96      	ldr	r3, [pc, #600]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006206:	f023 0107 	bic.w	r1, r3, #7
 800620a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800620e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006210:	4a92      	ldr	r2, [pc, #584]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006212:	430b      	orrs	r3, r1
 8006214:	6553      	str	r3, [r2, #84]	@ 0x54
 8006216:	e003      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006218:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800621c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006220:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006228:	f002 0304 	and.w	r3, r2, #4
 800622c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006230:	2300      	movs	r3, #0
 8006232:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006236:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800623a:	460b      	mov	r3, r1
 800623c:	4313      	orrs	r3, r2
 800623e:	d044      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006240:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006244:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006248:	2b05      	cmp	r3, #5
 800624a:	d825      	bhi.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800624c:	a201      	add	r2, pc, #4	@ (adr r2, 8006254 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800624e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006252:	bf00      	nop
 8006254:	080062a1 	.word	0x080062a1
 8006258:	0800626d 	.word	0x0800626d
 800625c:	08006283 	.word	0x08006283
 8006260:	080062a1 	.word	0x080062a1
 8006264:	080062a1 	.word	0x080062a1
 8006268:	080062a1 	.word	0x080062a1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800626c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006270:	3308      	adds	r3, #8
 8006272:	2101      	movs	r1, #1
 8006274:	4618      	mov	r0, r3
 8006276:	f001 fd25 	bl	8007cc4 <RCCEx_PLL2_Config>
 800627a:	4603      	mov	r3, r0
 800627c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006280:	e00f      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006286:	3328      	adds	r3, #40	@ 0x28
 8006288:	2101      	movs	r1, #1
 800628a:	4618      	mov	r0, r3
 800628c:	f001 fdcc 	bl	8007e28 <RCCEx_PLL3_Config>
 8006290:	4603      	mov	r3, r0
 8006292:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006296:	e004      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800629e:	e000      	b.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80062a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d10b      	bne.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80062aa:	4b6c      	ldr	r3, [pc, #432]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80062ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062ae:	f023 0107 	bic.w	r1, r3, #7
 80062b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062ba:	4a68      	ldr	r2, [pc, #416]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80062bc:	430b      	orrs	r3, r1
 80062be:	6593      	str	r3, [r2, #88]	@ 0x58
 80062c0:	e003      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062c6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80062ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d2:	f002 0320 	and.w	r3, r2, #32
 80062d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80062da:	2300      	movs	r3, #0
 80062dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80062e0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80062e4:	460b      	mov	r3, r1
 80062e6:	4313      	orrs	r3, r2
 80062e8:	d055      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80062ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062f6:	d033      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80062f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062fc:	d82c      	bhi.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80062fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006302:	d02f      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006304:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006308:	d826      	bhi.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800630a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800630e:	d02b      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006310:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006314:	d820      	bhi.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006316:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800631a:	d012      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800631c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006320:	d81a      	bhi.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006322:	2b00      	cmp	r3, #0
 8006324:	d022      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006326:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800632a:	d115      	bne.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800632c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006330:	3308      	adds	r3, #8
 8006332:	2100      	movs	r1, #0
 8006334:	4618      	mov	r0, r3
 8006336:	f001 fcc5 	bl	8007cc4 <RCCEx_PLL2_Config>
 800633a:	4603      	mov	r3, r0
 800633c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006340:	e015      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006346:	3328      	adds	r3, #40	@ 0x28
 8006348:	2102      	movs	r1, #2
 800634a:	4618      	mov	r0, r3
 800634c:	f001 fd6c 	bl	8007e28 <RCCEx_PLL3_Config>
 8006350:	4603      	mov	r3, r0
 8006352:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006356:	e00a      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800635e:	e006      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006360:	bf00      	nop
 8006362:	e004      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006364:	bf00      	nop
 8006366:	e002      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006368:	bf00      	nop
 800636a:	e000      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800636c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800636e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10b      	bne.n	800638e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006376:	4b39      	ldr	r3, [pc, #228]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800637a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800637e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006382:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006386:	4a35      	ldr	r2, [pc, #212]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006388:	430b      	orrs	r3, r1
 800638a:	6553      	str	r3, [r2, #84]	@ 0x54
 800638c:	e003      	b.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800638e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006392:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006396:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800639a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80063a2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80063a6:	2300      	movs	r3, #0
 80063a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80063ac:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80063b0:	460b      	mov	r3, r1
 80063b2:	4313      	orrs	r3, r2
 80063b4:	d058      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80063b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80063be:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80063c2:	d033      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80063c4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80063c8:	d82c      	bhi.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80063ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063ce:	d02f      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80063d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063d4:	d826      	bhi.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80063d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80063da:	d02b      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80063dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80063e0:	d820      	bhi.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80063e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063e6:	d012      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80063e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063ec:	d81a      	bhi.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d022      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80063f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063f6:	d115      	bne.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063fc:	3308      	adds	r3, #8
 80063fe:	2100      	movs	r1, #0
 8006400:	4618      	mov	r0, r3
 8006402:	f001 fc5f 	bl	8007cc4 <RCCEx_PLL2_Config>
 8006406:	4603      	mov	r3, r0
 8006408:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800640c:	e015      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800640e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006412:	3328      	adds	r3, #40	@ 0x28
 8006414:	2102      	movs	r1, #2
 8006416:	4618      	mov	r0, r3
 8006418:	f001 fd06 	bl	8007e28 <RCCEx_PLL3_Config>
 800641c:	4603      	mov	r3, r0
 800641e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006422:	e00a      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800642a:	e006      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800642c:	bf00      	nop
 800642e:	e004      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006430:	bf00      	nop
 8006432:	e002      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006434:	bf00      	nop
 8006436:	e000      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006438:	bf00      	nop
    }

    if (ret == HAL_OK)
 800643a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10e      	bne.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006442:	4b06      	ldr	r3, [pc, #24]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006446:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800644a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800644e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006452:	4a02      	ldr	r2, [pc, #8]	@ (800645c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006454:	430b      	orrs	r3, r1
 8006456:	6593      	str	r3, [r2, #88]	@ 0x58
 8006458:	e006      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800645a:	bf00      	nop
 800645c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006460:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006464:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006468:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800646c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006470:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006474:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006478:	2300      	movs	r3, #0
 800647a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800647e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006482:	460b      	mov	r3, r1
 8006484:	4313      	orrs	r3, r2
 8006486:	d055      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006488:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800648c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006490:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006494:	d033      	beq.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006496:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800649a:	d82c      	bhi.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800649c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064a0:	d02f      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80064a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064a6:	d826      	bhi.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80064a8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80064ac:	d02b      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80064ae:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80064b2:	d820      	bhi.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80064b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064b8:	d012      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80064ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064be:	d81a      	bhi.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d022      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80064c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064c8:	d115      	bne.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ce:	3308      	adds	r3, #8
 80064d0:	2100      	movs	r1, #0
 80064d2:	4618      	mov	r0, r3
 80064d4:	f001 fbf6 	bl	8007cc4 <RCCEx_PLL2_Config>
 80064d8:	4603      	mov	r3, r0
 80064da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80064de:	e015      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80064e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064e4:	3328      	adds	r3, #40	@ 0x28
 80064e6:	2102      	movs	r1, #2
 80064e8:	4618      	mov	r0, r3
 80064ea:	f001 fc9d 	bl	8007e28 <RCCEx_PLL3_Config>
 80064ee:	4603      	mov	r3, r0
 80064f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80064f4:	e00a      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80064fc:	e006      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80064fe:	bf00      	nop
 8006500:	e004      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006502:	bf00      	nop
 8006504:	e002      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006506:	bf00      	nop
 8006508:	e000      	b.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800650a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800650c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006510:	2b00      	cmp	r3, #0
 8006512:	d10b      	bne.n	800652c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006514:	4ba0      	ldr	r3, [pc, #640]	@ (8006798 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006518:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800651c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006520:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006524:	4a9c      	ldr	r2, [pc, #624]	@ (8006798 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006526:	430b      	orrs	r3, r1
 8006528:	6593      	str	r3, [r2, #88]	@ 0x58
 800652a:	e003      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800652c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006530:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653c:	f002 0308 	and.w	r3, r2, #8
 8006540:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006544:	2300      	movs	r3, #0
 8006546:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800654a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800654e:	460b      	mov	r3, r1
 8006550:	4313      	orrs	r3, r2
 8006552:	d01e      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006554:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006558:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800655c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006560:	d10c      	bne.n	800657c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006566:	3328      	adds	r3, #40	@ 0x28
 8006568:	2102      	movs	r1, #2
 800656a:	4618      	mov	r0, r3
 800656c:	f001 fc5c 	bl	8007e28 <RCCEx_PLL3_Config>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d002      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800657c:	4b86      	ldr	r3, [pc, #536]	@ (8006798 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800657e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006580:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006584:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006588:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800658c:	4a82      	ldr	r2, [pc, #520]	@ (8006798 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800658e:	430b      	orrs	r3, r1
 8006590:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006592:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659a:	f002 0310 	and.w	r3, r2, #16
 800659e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80065a2:	2300      	movs	r3, #0
 80065a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80065a8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80065ac:	460b      	mov	r3, r1
 80065ae:	4313      	orrs	r3, r2
 80065b0:	d01e      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80065b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065be:	d10c      	bne.n	80065da <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80065c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065c4:	3328      	adds	r3, #40	@ 0x28
 80065c6:	2102      	movs	r1, #2
 80065c8:	4618      	mov	r0, r3
 80065ca:	f001 fc2d 	bl	8007e28 <RCCEx_PLL3_Config>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d002      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80065da:	4b6f      	ldr	r3, [pc, #444]	@ (8006798 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80065dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80065e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065ea:	4a6b      	ldr	r2, [pc, #428]	@ (8006798 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80065ec:	430b      	orrs	r3, r1
 80065ee:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80065f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80065fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80065fe:	2300      	movs	r3, #0
 8006600:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006602:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006606:	460b      	mov	r3, r1
 8006608:	4313      	orrs	r3, r2
 800660a:	d03e      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800660c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006610:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006614:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006618:	d022      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800661a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800661e:	d81b      	bhi.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006620:	2b00      	cmp	r3, #0
 8006622:	d003      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006624:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006628:	d00b      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800662a:	e015      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800662c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006630:	3308      	adds	r3, #8
 8006632:	2100      	movs	r1, #0
 8006634:	4618      	mov	r0, r3
 8006636:	f001 fb45 	bl	8007cc4 <RCCEx_PLL2_Config>
 800663a:	4603      	mov	r3, r0
 800663c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006640:	e00f      	b.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006646:	3328      	adds	r3, #40	@ 0x28
 8006648:	2102      	movs	r1, #2
 800664a:	4618      	mov	r0, r3
 800664c:	f001 fbec 	bl	8007e28 <RCCEx_PLL3_Config>
 8006650:	4603      	mov	r3, r0
 8006652:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006656:	e004      	b.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800665e:	e000      	b.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006660:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006662:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10b      	bne.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800666a:	4b4b      	ldr	r3, [pc, #300]	@ (8006798 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800666c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800666e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006676:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800667a:	4a47      	ldr	r2, [pc, #284]	@ (8006798 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800667c:	430b      	orrs	r3, r1
 800667e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006680:	e003      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006682:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006686:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800668a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800668e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006692:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006696:	673b      	str	r3, [r7, #112]	@ 0x70
 8006698:	2300      	movs	r3, #0
 800669a:	677b      	str	r3, [r7, #116]	@ 0x74
 800669c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80066a0:	460b      	mov	r3, r1
 80066a2:	4313      	orrs	r3, r2
 80066a4:	d03b      	beq.n	800671e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80066a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80066ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80066b2:	d01f      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80066b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80066b8:	d818      	bhi.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80066ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066be:	d003      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80066c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80066c4:	d007      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80066c6:	e011      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066c8:	4b33      	ldr	r3, [pc, #204]	@ (8006798 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80066ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066cc:	4a32      	ldr	r2, [pc, #200]	@ (8006798 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80066ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80066d4:	e00f      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066da:	3328      	adds	r3, #40	@ 0x28
 80066dc:	2101      	movs	r1, #1
 80066de:	4618      	mov	r0, r3
 80066e0:	f001 fba2 	bl	8007e28 <RCCEx_PLL3_Config>
 80066e4:	4603      	mov	r3, r0
 80066e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80066ea:	e004      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80066f2:	e000      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80066f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10b      	bne.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066fe:	4b26      	ldr	r3, [pc, #152]	@ (8006798 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006702:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006706:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800670a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800670e:	4a22      	ldr	r2, [pc, #136]	@ (8006798 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006710:	430b      	orrs	r3, r1
 8006712:	6553      	str	r3, [r2, #84]	@ 0x54
 8006714:	e003      	b.n	800671e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006716:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800671a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800671e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006726:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800672a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800672c:	2300      	movs	r3, #0
 800672e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006730:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006734:	460b      	mov	r3, r1
 8006736:	4313      	orrs	r3, r2
 8006738:	d034      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800673a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800673e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006740:	2b00      	cmp	r3, #0
 8006742:	d003      	beq.n	800674c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006744:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006748:	d007      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800674a:	e011      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800674c:	4b12      	ldr	r3, [pc, #72]	@ (8006798 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800674e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006750:	4a11      	ldr	r2, [pc, #68]	@ (8006798 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006752:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006756:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006758:	e00e      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800675a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800675e:	3308      	adds	r3, #8
 8006760:	2102      	movs	r1, #2
 8006762:	4618      	mov	r0, r3
 8006764:	f001 faae 	bl	8007cc4 <RCCEx_PLL2_Config>
 8006768:	4603      	mov	r3, r0
 800676a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800676e:	e003      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006776:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006778:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10d      	bne.n	800679c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006780:	4b05      	ldr	r3, [pc, #20]	@ (8006798 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006784:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800678c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800678e:	4a02      	ldr	r2, [pc, #8]	@ (8006798 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006790:	430b      	orrs	r3, r1
 8006792:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006794:	e006      	b.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006796:	bf00      	nop
 8006798:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800679c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80067a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ac:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80067b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80067b2:	2300      	movs	r3, #0
 80067b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80067b6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80067ba:	460b      	mov	r3, r1
 80067bc:	4313      	orrs	r3, r2
 80067be:	d00c      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80067c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067c4:	3328      	adds	r3, #40	@ 0x28
 80067c6:	2102      	movs	r1, #2
 80067c8:	4618      	mov	r0, r3
 80067ca:	f001 fb2d 	bl	8007e28 <RCCEx_PLL3_Config>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d002      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80067da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80067e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80067e8:	2300      	movs	r3, #0
 80067ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80067ec:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80067f0:	460b      	mov	r3, r1
 80067f2:	4313      	orrs	r3, r2
 80067f4:	d036      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80067f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80067fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006800:	d018      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006802:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006806:	d811      	bhi.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006808:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800680c:	d014      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800680e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006812:	d80b      	bhi.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006814:	2b00      	cmp	r3, #0
 8006816:	d011      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006818:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800681c:	d106      	bne.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800681e:	4bb7      	ldr	r3, [pc, #732]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006822:	4ab6      	ldr	r2, [pc, #728]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006824:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006828:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800682a:	e008      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006832:	e004      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006834:	bf00      	nop
 8006836:	e002      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006838:	bf00      	nop
 800683a:	e000      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800683c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800683e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006842:	2b00      	cmp	r3, #0
 8006844:	d10a      	bne.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006846:	4bad      	ldr	r3, [pc, #692]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800684a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800684e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006852:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006854:	4aa9      	ldr	r2, [pc, #676]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006856:	430b      	orrs	r3, r1
 8006858:	6553      	str	r3, [r2, #84]	@ 0x54
 800685a:	e003      	b.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800685c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006860:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006864:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006870:	653b      	str	r3, [r7, #80]	@ 0x50
 8006872:	2300      	movs	r3, #0
 8006874:	657b      	str	r3, [r7, #84]	@ 0x54
 8006876:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800687a:	460b      	mov	r3, r1
 800687c:	4313      	orrs	r3, r2
 800687e:	d009      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006880:	4b9e      	ldr	r3, [pc, #632]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006884:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006888:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800688c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800688e:	4a9b      	ldr	r2, [pc, #620]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006890:	430b      	orrs	r3, r1
 8006892:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80068a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068a2:	2300      	movs	r3, #0
 80068a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068a6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80068aa:	460b      	mov	r3, r1
 80068ac:	4313      	orrs	r3, r2
 80068ae:	d009      	beq.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80068b0:	4b92      	ldr	r3, [pc, #584]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80068b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068b4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80068b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80068be:	4a8f      	ldr	r2, [pc, #572]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80068c0:	430b      	orrs	r3, r1
 80068c2:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80068c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068cc:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80068d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80068d2:	2300      	movs	r3, #0
 80068d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80068d6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80068da:	460b      	mov	r3, r1
 80068dc:	4313      	orrs	r3, r2
 80068de:	d00e      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80068e0:	4b86      	ldr	r3, [pc, #536]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	4a85      	ldr	r2, [pc, #532]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80068e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80068ea:	6113      	str	r3, [r2, #16]
 80068ec:	4b83      	ldr	r3, [pc, #524]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80068ee:	6919      	ldr	r1, [r3, #16]
 80068f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80068f8:	4a80      	ldr	r2, [pc, #512]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80068fa:	430b      	orrs	r3, r1
 80068fc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80068fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006906:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800690a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800690c:	2300      	movs	r3, #0
 800690e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006910:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006914:	460b      	mov	r3, r1
 8006916:	4313      	orrs	r3, r2
 8006918:	d009      	beq.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800691a:	4b78      	ldr	r3, [pc, #480]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800691c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800691e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006922:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006928:	4a74      	ldr	r2, [pc, #464]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800692a:	430b      	orrs	r3, r1
 800692c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800692e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006936:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800693a:	633b      	str	r3, [r7, #48]	@ 0x30
 800693c:	2300      	movs	r3, #0
 800693e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006940:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006944:	460b      	mov	r3, r1
 8006946:	4313      	orrs	r3, r2
 8006948:	d00a      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800694a:	4b6c      	ldr	r3, [pc, #432]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800694c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800694e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006952:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800695a:	4a68      	ldr	r2, [pc, #416]	@ (8006afc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800695c:	430b      	orrs	r3, r1
 800695e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006968:	2100      	movs	r1, #0
 800696a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800696c:	f003 0301 	and.w	r3, r3, #1
 8006970:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006972:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006976:	460b      	mov	r3, r1
 8006978:	4313      	orrs	r3, r2
 800697a:	d011      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800697c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006980:	3308      	adds	r3, #8
 8006982:	2100      	movs	r1, #0
 8006984:	4618      	mov	r0, r3
 8006986:	f001 f99d 	bl	8007cc4 <RCCEx_PLL2_Config>
 800698a:	4603      	mov	r3, r0
 800698c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006990:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006994:	2b00      	cmp	r3, #0
 8006996:	d003      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006998:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800699c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80069a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a8:	2100      	movs	r1, #0
 80069aa:	6239      	str	r1, [r7, #32]
 80069ac:	f003 0302 	and.w	r3, r3, #2
 80069b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80069b2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80069b6:	460b      	mov	r3, r1
 80069b8:	4313      	orrs	r3, r2
 80069ba:	d011      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069c0:	3308      	adds	r3, #8
 80069c2:	2101      	movs	r1, #1
 80069c4:	4618      	mov	r0, r3
 80069c6:	f001 f97d 	bl	8007cc4 <RCCEx_PLL2_Config>
 80069ca:	4603      	mov	r3, r0
 80069cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80069d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d003      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80069e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e8:	2100      	movs	r1, #0
 80069ea:	61b9      	str	r1, [r7, #24]
 80069ec:	f003 0304 	and.w	r3, r3, #4
 80069f0:	61fb      	str	r3, [r7, #28]
 80069f2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80069f6:	460b      	mov	r3, r1
 80069f8:	4313      	orrs	r3, r2
 80069fa:	d011      	beq.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80069fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a00:	3308      	adds	r3, #8
 8006a02:	2102      	movs	r1, #2
 8006a04:	4618      	mov	r0, r3
 8006a06:	f001 f95d 	bl	8007cc4 <RCCEx_PLL2_Config>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006a10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d003      	beq.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a28:	2100      	movs	r1, #0
 8006a2a:	6139      	str	r1, [r7, #16]
 8006a2c:	f003 0308 	and.w	r3, r3, #8
 8006a30:	617b      	str	r3, [r7, #20]
 8006a32:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006a36:	460b      	mov	r3, r1
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	d011      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a40:	3328      	adds	r3, #40	@ 0x28
 8006a42:	2100      	movs	r1, #0
 8006a44:	4618      	mov	r0, r3
 8006a46:	f001 f9ef 	bl	8007e28 <RCCEx_PLL3_Config>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8006a50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d003      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a68:	2100      	movs	r1, #0
 8006a6a:	60b9      	str	r1, [r7, #8]
 8006a6c:	f003 0310 	and.w	r3, r3, #16
 8006a70:	60fb      	str	r3, [r7, #12]
 8006a72:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006a76:	460b      	mov	r3, r1
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	d011      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a80:	3328      	adds	r3, #40	@ 0x28
 8006a82:	2101      	movs	r1, #1
 8006a84:	4618      	mov	r0, r3
 8006a86:	f001 f9cf 	bl	8007e28 <RCCEx_PLL3_Config>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006a90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d003      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa8:	2100      	movs	r1, #0
 8006aaa:	6039      	str	r1, [r7, #0]
 8006aac:	f003 0320 	and.w	r3, r3, #32
 8006ab0:	607b      	str	r3, [r7, #4]
 8006ab2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	d011      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ac0:	3328      	adds	r3, #40	@ 0x28
 8006ac2:	2102      	movs	r1, #2
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f001 f9af 	bl	8007e28 <RCCEx_PLL3_Config>
 8006aca:	4603      	mov	r3, r0
 8006acc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006ad0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d003      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ad8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006adc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8006ae0:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d101      	bne.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	e000      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8006af4:	46bd      	mov	sp, r7
 8006af6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006afa:	bf00      	nop
 8006afc:	58024400 	.word	0x58024400

08006b00 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b090      	sub	sp, #64	@ 0x40
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006b0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b0e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006b12:	430b      	orrs	r3, r1
 8006b14:	f040 8094 	bne.w	8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006b18:	4b9b      	ldr	r3, [pc, #620]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006b1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b1c:	f003 0307 	and.w	r3, r3, #7
 8006b20:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b24:	2b04      	cmp	r3, #4
 8006b26:	f200 8087 	bhi.w	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b30:	08006b45 	.word	0x08006b45
 8006b34:	08006b6d 	.word	0x08006b6d
 8006b38:	08006b95 	.word	0x08006b95
 8006b3c:	08006c31 	.word	0x08006c31
 8006b40:	08006bbd 	.word	0x08006bbd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b44:	4b90      	ldr	r3, [pc, #576]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b50:	d108      	bne.n	8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b56:	4618      	mov	r0, r3
 8006b58:	f000 ff62 	bl	8007a20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b60:	f000 bc93 	b.w	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006b64:	2300      	movs	r3, #0
 8006b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b68:	f000 bc8f 	b.w	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b6c:	4b86      	ldr	r3, [pc, #536]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b78:	d108      	bne.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b7a:	f107 0318 	add.w	r3, r7, #24
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f000 fca6 	bl	80074d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b88:	f000 bc7f 	b.w	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b90:	f000 bc7b 	b.w	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b94:	4b7c      	ldr	r3, [pc, #496]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ba0:	d108      	bne.n	8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ba2:	f107 030c 	add.w	r3, r7, #12
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f000 fde6 	bl	8007778 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bb0:	f000 bc6b 	b.w	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bb8:	f000 bc67 	b.w	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006bbc:	4b72      	ldr	r3, [pc, #456]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006bbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bc0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006bc4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006bc6:	4b70      	ldr	r3, [pc, #448]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0304 	and.w	r3, r3, #4
 8006bce:	2b04      	cmp	r3, #4
 8006bd0:	d10c      	bne.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d109      	bne.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bd8:	4b6b      	ldr	r3, [pc, #428]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	08db      	lsrs	r3, r3, #3
 8006bde:	f003 0303 	and.w	r3, r3, #3
 8006be2:	4a6a      	ldr	r2, [pc, #424]	@ (8006d8c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8006be4:	fa22 f303 	lsr.w	r3, r2, r3
 8006be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bea:	e01f      	b.n	8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006bec:	4b66      	ldr	r3, [pc, #408]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bf4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bf8:	d106      	bne.n	8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c00:	d102      	bne.n	8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006c02:	4b63      	ldr	r3, [pc, #396]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c06:	e011      	b.n	8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c08:	4b5f      	ldr	r3, [pc, #380]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c14:	d106      	bne.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c1c:	d102      	bne.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006c1e:	4b5d      	ldr	r3, [pc, #372]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c22:	e003      	b.n	8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006c24:	2300      	movs	r3, #0
 8006c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006c28:	f000 bc2f 	b.w	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006c2c:	f000 bc2d 	b.w	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006c30:	4b59      	ldr	r3, [pc, #356]	@ (8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c34:	f000 bc29 	b.w	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c3c:	f000 bc25 	b.w	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006c40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c44:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006c48:	430b      	orrs	r3, r1
 8006c4a:	f040 80a7 	bne.w	8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006c4e:	4b4e      	ldr	r3, [pc, #312]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c52:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8006c56:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c5a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006c5e:	d054      	beq.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8006c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006c66:	f200 808b 	bhi.w	8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8006c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c6c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006c70:	f000 8083 	beq.w	8006d7a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8006c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c76:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006c7a:	f200 8081 	bhi.w	8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8006c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c84:	d02f      	beq.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c8c:	d878      	bhi.n	8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8006c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d004      	beq.n	8006c9e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8006c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c9a:	d012      	beq.n	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8006c9c:	e070      	b.n	8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c9e:	4b3a      	ldr	r3, [pc, #232]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ca6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006caa:	d107      	bne.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006cac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f000 feb5 	bl	8007a20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cba:	e3e6      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cc0:	e3e3      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006cc2:	4b31      	ldr	r3, [pc, #196]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006cce:	d107      	bne.n	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cd0:	f107 0318 	add.w	r3, r7, #24
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f000 fbfb 	bl	80074d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cde:	e3d4      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ce4:	e3d1      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006ce6:	4b28      	ldr	r3, [pc, #160]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006cee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006cf2:	d107      	bne.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cf4:	f107 030c 	add.w	r3, r7, #12
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f000 fd3d 	bl	8007778 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d02:	e3c2      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006d04:	2300      	movs	r3, #0
 8006d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d08:	e3bf      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006d0a:	4b1f      	ldr	r3, [pc, #124]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d0e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006d12:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d14:	4b1c      	ldr	r3, [pc, #112]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0304 	and.w	r3, r3, #4
 8006d1c:	2b04      	cmp	r3, #4
 8006d1e:	d10c      	bne.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8006d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d109      	bne.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d26:	4b18      	ldr	r3, [pc, #96]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	08db      	lsrs	r3, r3, #3
 8006d2c:	f003 0303 	and.w	r3, r3, #3
 8006d30:	4a16      	ldr	r2, [pc, #88]	@ (8006d8c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8006d32:	fa22 f303 	lsr.w	r3, r2, r3
 8006d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d38:	e01e      	b.n	8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006d3a:	4b13      	ldr	r3, [pc, #76]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d46:	d106      	bne.n	8006d56 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8006d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d4e:	d102      	bne.n	8006d56 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006d50:	4b0f      	ldr	r3, [pc, #60]	@ (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d54:	e010      	b.n	8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006d56:	4b0c      	ldr	r3, [pc, #48]	@ (8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d62:	d106      	bne.n	8006d72 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8006d64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d6a:	d102      	bne.n	8006d72 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006d6c:	4b09      	ldr	r3, [pc, #36]	@ (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d70:	e002      	b.n	8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006d72:	2300      	movs	r3, #0
 8006d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006d76:	e388      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006d78:	e387      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006d7a:	4b07      	ldr	r3, [pc, #28]	@ (8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d7e:	e384      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006d80:	2300      	movs	r3, #0
 8006d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d84:	e381      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006d86:	bf00      	nop
 8006d88:	58024400 	.word	0x58024400
 8006d8c:	03d09000 	.word	0x03d09000
 8006d90:	003d0900 	.word	0x003d0900
 8006d94:	017d7840 	.word	0x017d7840
 8006d98:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006d9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006da0:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006da4:	430b      	orrs	r3, r1
 8006da6:	f040 809c 	bne.w	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006daa:	4b9e      	ldr	r3, [pc, #632]	@ (8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dae:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006db2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006dba:	d054      	beq.n	8006e66 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8006dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dbe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006dc2:	f200 808b 	bhi.w	8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006dcc:	f000 8083 	beq.w	8006ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8006dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006dd6:	f200 8081 	bhi.w	8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ddc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006de0:	d02f      	beq.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8006de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006de8:	d878      	bhi.n	8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d004      	beq.n	8006dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8006df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006df6:	d012      	beq.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8006df8:	e070      	b.n	8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006dfa:	4b8a      	ldr	r3, [pc, #552]	@ (8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e06:	d107      	bne.n	8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f000 fe07 	bl	8007a20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e16:	e338      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e1c:	e335      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e1e:	4b81      	ldr	r3, [pc, #516]	@ (8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e2a:	d107      	bne.n	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e2c:	f107 0318 	add.w	r3, r7, #24
 8006e30:	4618      	mov	r0, r3
 8006e32:	f000 fb4d 	bl	80074d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e3a:	e326      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e40:	e323      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e42:	4b78      	ldr	r3, [pc, #480]	@ (8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e4e:	d107      	bne.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e50:	f107 030c 	add.w	r3, r7, #12
 8006e54:	4618      	mov	r0, r3
 8006e56:	f000 fc8f 	bl	8007778 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e5e:	e314      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006e60:	2300      	movs	r3, #0
 8006e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e64:	e311      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e66:	4b6f      	ldr	r3, [pc, #444]	@ (8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e6a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006e6e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e70:	4b6c      	ldr	r3, [pc, #432]	@ (8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 0304 	and.w	r3, r3, #4
 8006e78:	2b04      	cmp	r3, #4
 8006e7a:	d10c      	bne.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8006e7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d109      	bne.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e82:	4b68      	ldr	r3, [pc, #416]	@ (8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	08db      	lsrs	r3, r3, #3
 8006e88:	f003 0303 	and.w	r3, r3, #3
 8006e8c:	4a66      	ldr	r2, [pc, #408]	@ (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8006e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e94:	e01e      	b.n	8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e96:	4b63      	ldr	r3, [pc, #396]	@ (8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ea2:	d106      	bne.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8006ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ea6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006eaa:	d102      	bne.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006eac:	4b5f      	ldr	r3, [pc, #380]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8006eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006eb0:	e010      	b.n	8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006eb2:	4b5c      	ldr	r3, [pc, #368]	@ (8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ebe:	d106      	bne.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8006ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ec2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ec6:	d102      	bne.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006ec8:	4b59      	ldr	r3, [pc, #356]	@ (8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ecc:	e002      	b.n	8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006ed2:	e2da      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006ed4:	e2d9      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006ed6:	4b57      	ldr	r3, [pc, #348]	@ (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006eda:	e2d6      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006edc:	2300      	movs	r3, #0
 8006ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ee0:	e2d3      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006ee2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ee6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006eea:	430b      	orrs	r3, r1
 8006eec:	f040 80a7 	bne.w	800703e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006ef0:	4b4c      	ldr	r3, [pc, #304]	@ (8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ef4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006ef8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8006efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006efc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f00:	d055      	beq.n	8006fae <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8006f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f08:	f200 8096 	bhi.w	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8006f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f0e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006f12:	f000 8084 	beq.w	800701e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8006f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006f1c:	f200 808c 	bhi.w	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8006f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f26:	d030      	beq.n	8006f8a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f2e:	f200 8083 	bhi.w	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8006f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d004      	beq.n	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8006f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f3e:	d012      	beq.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8006f40:	e07a      	b.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f42:	4b38      	ldr	r3, [pc, #224]	@ (8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f4e:	d107      	bne.n	8006f60 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f54:	4618      	mov	r0, r3
 8006f56:	f000 fd63 	bl	8007a20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f5e:	e294      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006f60:	2300      	movs	r3, #0
 8006f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f64:	e291      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f66:	4b2f      	ldr	r3, [pc, #188]	@ (8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f72:	d107      	bne.n	8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f74:	f107 0318 	add.w	r3, r7, #24
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f000 faa9 	bl	80074d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f82:	e282      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006f84:	2300      	movs	r3, #0
 8006f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f88:	e27f      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f8a:	4b26      	ldr	r3, [pc, #152]	@ (8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f96:	d107      	bne.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f98:	f107 030c 	add.w	r3, r7, #12
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f000 fbeb 	bl	8007778 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fa6:	e270      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fac:	e26d      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006fae:	4b1d      	ldr	r3, [pc, #116]	@ (8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fb2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006fb6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006fb8:	4b1a      	ldr	r3, [pc, #104]	@ (8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 0304 	and.w	r3, r3, #4
 8006fc0:	2b04      	cmp	r3, #4
 8006fc2:	d10c      	bne.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8006fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d109      	bne.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fca:	4b16      	ldr	r3, [pc, #88]	@ (8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	08db      	lsrs	r3, r3, #3
 8006fd0:	f003 0303 	and.w	r3, r3, #3
 8006fd4:	4a14      	ldr	r2, [pc, #80]	@ (8007028 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8006fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8006fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fdc:	e01e      	b.n	800701c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006fde:	4b11      	ldr	r3, [pc, #68]	@ (8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fe6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fea:	d106      	bne.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ff2:	d102      	bne.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006ff4:	4b0d      	ldr	r3, [pc, #52]	@ (800702c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8006ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ff8:	e010      	b.n	800701c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007002:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007006:	d106      	bne.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8007008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800700a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800700e:	d102      	bne.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007010:	4b07      	ldr	r3, [pc, #28]	@ (8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007012:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007014:	e002      	b.n	800701c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007016:	2300      	movs	r3, #0
 8007018:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800701a:	e236      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800701c:	e235      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800701e:	4b05      	ldr	r3, [pc, #20]	@ (8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007020:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007022:	e232      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007024:	58024400 	.word	0x58024400
 8007028:	03d09000 	.word	0x03d09000
 800702c:	003d0900 	.word	0x003d0900
 8007030:	017d7840 	.word	0x017d7840
 8007034:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8007038:	2300      	movs	r3, #0
 800703a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800703c:	e225      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800703e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007042:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007046:	430b      	orrs	r3, r1
 8007048:	f040 8085 	bne.w	8007156 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800704c:	4b9c      	ldr	r3, [pc, #624]	@ (80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800704e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007050:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007054:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007058:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800705c:	d06b      	beq.n	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800705e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007060:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007064:	d874      	bhi.n	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007068:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800706c:	d056      	beq.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800706e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007070:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007074:	d86c      	bhi.n	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007078:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800707c:	d03b      	beq.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800707e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007080:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007084:	d864      	bhi.n	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007088:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800708c:	d021      	beq.n	80070d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800708e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007090:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007094:	d85c      	bhi.n	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007098:	2b00      	cmp	r3, #0
 800709a:	d004      	beq.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800709c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800709e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070a2:	d004      	beq.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 80070a4:	e054      	b.n	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80070a6:	f7fe fb75 	bl	8005794 <HAL_RCC_GetPCLK1Freq>
 80070aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80070ac:	e1ed      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070ae:	4b84      	ldr	r3, [pc, #528]	@ (80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070ba:	d107      	bne.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070bc:	f107 0318 	add.w	r3, r7, #24
 80070c0:	4618      	mov	r0, r3
 80070c2:	f000 fa05 	bl	80074d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070ca:	e1de      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80070cc:	2300      	movs	r3, #0
 80070ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070d0:	e1db      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80070d2:	4b7b      	ldr	r3, [pc, #492]	@ (80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070de:	d107      	bne.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070e0:	f107 030c 	add.w	r3, r7, #12
 80070e4:	4618      	mov	r0, r3
 80070e6:	f000 fb47 	bl	8007778 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070ee:	e1cc      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80070f0:	2300      	movs	r3, #0
 80070f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070f4:	e1c9      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80070f6:	4b72      	ldr	r3, [pc, #456]	@ (80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0304 	and.w	r3, r3, #4
 80070fe:	2b04      	cmp	r3, #4
 8007100:	d109      	bne.n	8007116 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007102:	4b6f      	ldr	r3, [pc, #444]	@ (80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	08db      	lsrs	r3, r3, #3
 8007108:	f003 0303 	and.w	r3, r3, #3
 800710c:	4a6d      	ldr	r2, [pc, #436]	@ (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800710e:	fa22 f303 	lsr.w	r3, r2, r3
 8007112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007114:	e1b9      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007116:	2300      	movs	r3, #0
 8007118:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800711a:	e1b6      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800711c:	4b68      	ldr	r3, [pc, #416]	@ (80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007124:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007128:	d102      	bne.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800712a:	4b67      	ldr	r3, [pc, #412]	@ (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800712c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800712e:	e1ac      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007130:	2300      	movs	r3, #0
 8007132:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007134:	e1a9      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007136:	4b62      	ldr	r3, [pc, #392]	@ (80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800713e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007142:	d102      	bne.n	800714a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8007144:	4b61      	ldr	r3, [pc, #388]	@ (80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8007146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007148:	e19f      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800714a:	2300      	movs	r3, #0
 800714c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800714e:	e19c      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007150:	2300      	movs	r3, #0
 8007152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007154:	e199      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007156:	e9d7 2300 	ldrd	r2, r3, [r7]
 800715a:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800715e:	430b      	orrs	r3, r1
 8007160:	d173      	bne.n	800724a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007162:	4b57      	ldr	r3, [pc, #348]	@ (80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007166:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800716a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800716c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800716e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007172:	d02f      	beq.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8007174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007176:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800717a:	d863      	bhi.n	8007244 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800717c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800717e:	2b00      	cmp	r3, #0
 8007180:	d004      	beq.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8007182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007184:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007188:	d012      	beq.n	80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800718a:	e05b      	b.n	8007244 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800718c:	4b4c      	ldr	r3, [pc, #304]	@ (80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007194:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007198:	d107      	bne.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800719a:	f107 0318 	add.w	r3, r7, #24
 800719e:	4618      	mov	r0, r3
 80071a0:	f000 f996 	bl	80074d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071a8:	e16f      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80071aa:	2300      	movs	r3, #0
 80071ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071ae:	e16c      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80071b0:	4b43      	ldr	r3, [pc, #268]	@ (80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80071b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071bc:	d107      	bne.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071be:	f107 030c 	add.w	r3, r7, #12
 80071c2:	4618      	mov	r0, r3
 80071c4:	f000 fad8 	bl	8007778 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071cc:	e15d      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80071ce:	2300      	movs	r3, #0
 80071d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071d2:	e15a      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80071d4:	4b3a      	ldr	r3, [pc, #232]	@ (80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80071d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80071dc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80071de:	4b38      	ldr	r3, [pc, #224]	@ (80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 0304 	and.w	r3, r3, #4
 80071e6:	2b04      	cmp	r3, #4
 80071e8:	d10c      	bne.n	8007204 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80071ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d109      	bne.n	8007204 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071f0:	4b33      	ldr	r3, [pc, #204]	@ (80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	08db      	lsrs	r3, r3, #3
 80071f6:	f003 0303 	and.w	r3, r3, #3
 80071fa:	4a32      	ldr	r2, [pc, #200]	@ (80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80071fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007200:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007202:	e01e      	b.n	8007242 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007204:	4b2e      	ldr	r3, [pc, #184]	@ (80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800720c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007210:	d106      	bne.n	8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8007212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007214:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007218:	d102      	bne.n	8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800721a:	4b2b      	ldr	r3, [pc, #172]	@ (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800721c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800721e:	e010      	b.n	8007242 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007220:	4b27      	ldr	r3, [pc, #156]	@ (80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007228:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800722c:	d106      	bne.n	800723c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800722e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007230:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007234:	d102      	bne.n	800723c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007236:	4b25      	ldr	r3, [pc, #148]	@ (80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8007238:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800723a:	e002      	b.n	8007242 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800723c:	2300      	movs	r3, #0
 800723e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007240:	e123      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007242:	e122      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007244:	2300      	movs	r3, #0
 8007246:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007248:	e11f      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800724a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800724e:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007252:	430b      	orrs	r3, r1
 8007254:	d13c      	bne.n	80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007256:	4b1a      	ldr	r3, [pc, #104]	@ (80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800725a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800725e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8007260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007262:	2b00      	cmp	r3, #0
 8007264:	d004      	beq.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8007266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800726c:	d012      	beq.n	8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800726e:	e023      	b.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007270:	4b13      	ldr	r3, [pc, #76]	@ (80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007278:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800727c:	d107      	bne.n	800728e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800727e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007282:	4618      	mov	r0, r3
 8007284:	f000 fbcc 	bl	8007a20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800728a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800728c:	e0fd      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800728e:	2300      	movs	r3, #0
 8007290:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007292:	e0fa      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007294:	4b0a      	ldr	r3, [pc, #40]	@ (80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800729c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072a0:	d107      	bne.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072a2:	f107 0318 	add.w	r3, r7, #24
 80072a6:	4618      	mov	r0, r3
 80072a8:	f000 f912 	bl	80074d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80072ac:	6a3b      	ldr	r3, [r7, #32]
 80072ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072b0:	e0eb      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80072b2:	2300      	movs	r3, #0
 80072b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072b6:	e0e8      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80072b8:	2300      	movs	r3, #0
 80072ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072bc:	e0e5      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80072be:	bf00      	nop
 80072c0:	58024400 	.word	0x58024400
 80072c4:	03d09000 	.word	0x03d09000
 80072c8:	003d0900 	.word	0x003d0900
 80072cc:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80072d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072d4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80072d8:	430b      	orrs	r3, r1
 80072da:	f040 8085 	bne.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80072de:	4b6d      	ldr	r3, [pc, #436]	@ (8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80072e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072e2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80072e6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80072e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80072ee:	d06b      	beq.n	80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 80072f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80072f6:	d874      	bhi.n	80073e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80072f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072fe:	d056      	beq.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8007300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007302:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007306:	d86c      	bhi.n	80073e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8007308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800730a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800730e:	d03b      	beq.n	8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8007310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007312:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007316:	d864      	bhi.n	80073e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8007318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800731a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800731e:	d021      	beq.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8007320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007322:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007326:	d85c      	bhi.n	80073e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8007328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800732a:	2b00      	cmp	r3, #0
 800732c:	d004      	beq.n	8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800732e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007330:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007334:	d004      	beq.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8007336:	e054      	b.n	80073e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007338:	f000 f8b4 	bl	80074a4 <HAL_RCCEx_GetD3PCLK1Freq>
 800733c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800733e:	e0a4      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007340:	4b54      	ldr	r3, [pc, #336]	@ (8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007348:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800734c:	d107      	bne.n	800735e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800734e:	f107 0318 	add.w	r3, r7, #24
 8007352:	4618      	mov	r0, r3
 8007354:	f000 f8bc 	bl	80074d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800735c:	e095      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800735e:	2300      	movs	r3, #0
 8007360:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007362:	e092      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007364:	4b4b      	ldr	r3, [pc, #300]	@ (8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800736c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007370:	d107      	bne.n	8007382 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007372:	f107 030c 	add.w	r3, r7, #12
 8007376:	4618      	mov	r0, r3
 8007378:	f000 f9fe 	bl	8007778 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007380:	e083      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007382:	2300      	movs	r3, #0
 8007384:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007386:	e080      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007388:	4b42      	ldr	r3, [pc, #264]	@ (8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 0304 	and.w	r3, r3, #4
 8007390:	2b04      	cmp	r3, #4
 8007392:	d109      	bne.n	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007394:	4b3f      	ldr	r3, [pc, #252]	@ (8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	08db      	lsrs	r3, r3, #3
 800739a:	f003 0303 	and.w	r3, r3, #3
 800739e:	4a3e      	ldr	r2, [pc, #248]	@ (8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80073a0:	fa22 f303 	lsr.w	r3, r2, r3
 80073a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073a6:	e070      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80073a8:	2300      	movs	r3, #0
 80073aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073ac:	e06d      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80073ae:	4b39      	ldr	r3, [pc, #228]	@ (8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073ba:	d102      	bne.n	80073c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 80073bc:	4b37      	ldr	r3, [pc, #220]	@ (800749c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80073be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073c0:	e063      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80073c2:	2300      	movs	r3, #0
 80073c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073c6:	e060      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80073c8:	4b32      	ldr	r3, [pc, #200]	@ (8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073d4:	d102      	bne.n	80073dc <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 80073d6:	4b32      	ldr	r3, [pc, #200]	@ (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80073d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80073da:	e056      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80073dc:	2300      	movs	r3, #0
 80073de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073e0:	e053      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80073e2:	2300      	movs	r3, #0
 80073e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073e6:	e050      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80073e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073ec:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80073f0:	430b      	orrs	r3, r1
 80073f2:	d148      	bne.n	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80073f4:	4b27      	ldr	r3, [pc, #156]	@ (8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80073f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80073fc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80073fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007400:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007404:	d02a      	beq.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8007406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007408:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800740c:	d838      	bhi.n	8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800740e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007410:	2b00      	cmp	r3, #0
 8007412:	d004      	beq.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8007414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007416:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800741a:	d00d      	beq.n	8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800741c:	e030      	b.n	8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800741e:	4b1d      	ldr	r3, [pc, #116]	@ (8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007426:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800742a:	d102      	bne.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800742c:	4b1c      	ldr	r3, [pc, #112]	@ (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800742e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007430:	e02b      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007432:	2300      	movs	r3, #0
 8007434:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007436:	e028      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007438:	4b16      	ldr	r3, [pc, #88]	@ (8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007440:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007444:	d107      	bne.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007446:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800744a:	4618      	mov	r0, r3
 800744c:	f000 fae8 	bl	8007a20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007452:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007454:	e019      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007456:	2300      	movs	r3, #0
 8007458:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800745a:	e016      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800745c:	4b0d      	ldr	r3, [pc, #52]	@ (8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007464:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007468:	d107      	bne.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800746a:	f107 0318 	add.w	r3, r7, #24
 800746e:	4618      	mov	r0, r3
 8007470:	f000 f82e 	bl	80074d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007478:	e007      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800747a:	2300      	movs	r3, #0
 800747c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800747e:	e004      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007480:	2300      	movs	r3, #0
 8007482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007484:	e001      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8007486:	2300      	movs	r3, #0
 8007488:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800748a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800748c:	4618      	mov	r0, r3
 800748e:	3740      	adds	r7, #64	@ 0x40
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	58024400 	.word	0x58024400
 8007498:	03d09000 	.word	0x03d09000
 800749c:	003d0900 	.word	0x003d0900
 80074a0:	017d7840 	.word	0x017d7840

080074a4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80074a8:	f7fe f944 	bl	8005734 <HAL_RCC_GetHCLKFreq>
 80074ac:	4602      	mov	r2, r0
 80074ae:	4b06      	ldr	r3, [pc, #24]	@ (80074c8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80074b0:	6a1b      	ldr	r3, [r3, #32]
 80074b2:	091b      	lsrs	r3, r3, #4
 80074b4:	f003 0307 	and.w	r3, r3, #7
 80074b8:	4904      	ldr	r1, [pc, #16]	@ (80074cc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80074ba:	5ccb      	ldrb	r3, [r1, r3]
 80074bc:	f003 031f 	and.w	r3, r3, #31
 80074c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	58024400 	.word	0x58024400
 80074cc:	0800a1c8 	.word	0x0800a1c8

080074d0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b089      	sub	sp, #36	@ 0x24
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80074d8:	4ba1      	ldr	r3, [pc, #644]	@ (8007760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074dc:	f003 0303 	and.w	r3, r3, #3
 80074e0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80074e2:	4b9f      	ldr	r3, [pc, #636]	@ (8007760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074e6:	0b1b      	lsrs	r3, r3, #12
 80074e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80074ec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80074ee:	4b9c      	ldr	r3, [pc, #624]	@ (8007760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074f2:	091b      	lsrs	r3, r3, #4
 80074f4:	f003 0301 	and.w	r3, r3, #1
 80074f8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80074fa:	4b99      	ldr	r3, [pc, #612]	@ (8007760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074fe:	08db      	lsrs	r3, r3, #3
 8007500:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007504:	693a      	ldr	r2, [r7, #16]
 8007506:	fb02 f303 	mul.w	r3, r2, r3
 800750a:	ee07 3a90 	vmov	s15, r3
 800750e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007512:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	2b00      	cmp	r3, #0
 800751a:	f000 8111 	beq.w	8007740 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	2b02      	cmp	r3, #2
 8007522:	f000 8083 	beq.w	800762c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	2b02      	cmp	r3, #2
 800752a:	f200 80a1 	bhi.w	8007670 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d003      	beq.n	800753c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	2b01      	cmp	r3, #1
 8007538:	d056      	beq.n	80075e8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800753a:	e099      	b.n	8007670 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800753c:	4b88      	ldr	r3, [pc, #544]	@ (8007760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 0320 	and.w	r3, r3, #32
 8007544:	2b00      	cmp	r3, #0
 8007546:	d02d      	beq.n	80075a4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007548:	4b85      	ldr	r3, [pc, #532]	@ (8007760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	08db      	lsrs	r3, r3, #3
 800754e:	f003 0303 	and.w	r3, r3, #3
 8007552:	4a84      	ldr	r2, [pc, #528]	@ (8007764 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007554:	fa22 f303 	lsr.w	r3, r2, r3
 8007558:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	ee07 3a90 	vmov	s15, r3
 8007560:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	ee07 3a90 	vmov	s15, r3
 800756a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800756e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007572:	4b7b      	ldr	r3, [pc, #492]	@ (8007760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800757a:	ee07 3a90 	vmov	s15, r3
 800757e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007582:	ed97 6a03 	vldr	s12, [r7, #12]
 8007586:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007768 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800758a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800758e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007592:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800759a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800759e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80075a2:	e087      	b.n	80076b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	ee07 3a90 	vmov	s15, r3
 80075aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ae:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800776c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80075b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075b6:	4b6a      	ldr	r3, [pc, #424]	@ (8007760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075be:	ee07 3a90 	vmov	s15, r3
 80075c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80075ca:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007768 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075e6:	e065      	b.n	80076b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	ee07 3a90 	vmov	s15, r3
 80075ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075f2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007770 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80075f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075fa:	4b59      	ldr	r3, [pc, #356]	@ (8007760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007602:	ee07 3a90 	vmov	s15, r3
 8007606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800760a:	ed97 6a03 	vldr	s12, [r7, #12]
 800760e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007768 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800761a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800761e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007626:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800762a:	e043      	b.n	80076b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	ee07 3a90 	vmov	s15, r3
 8007632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007636:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007774 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800763a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800763e:	4b48      	ldr	r3, [pc, #288]	@ (8007760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007646:	ee07 3a90 	vmov	s15, r3
 800764a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800764e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007652:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007768 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800765a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800765e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800766a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800766e:	e021      	b.n	80076b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	ee07 3a90 	vmov	s15, r3
 8007676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800767a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007770 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800767e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007682:	4b37      	ldr	r3, [pc, #220]	@ (8007760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800768a:	ee07 3a90 	vmov	s15, r3
 800768e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007692:	ed97 6a03 	vldr	s12, [r7, #12]
 8007696:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007768 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800769a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800769e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076b2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80076b4:	4b2a      	ldr	r3, [pc, #168]	@ (8007760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076b8:	0a5b      	lsrs	r3, r3, #9
 80076ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076be:	ee07 3a90 	vmov	s15, r3
 80076c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80076ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80076d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076da:	ee17 2a90 	vmov	r2, s15
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80076e2:	4b1f      	ldr	r3, [pc, #124]	@ (8007760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076e6:	0c1b      	lsrs	r3, r3, #16
 80076e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80076ec:	ee07 3a90 	vmov	s15, r3
 80076f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80076f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007700:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007704:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007708:	ee17 2a90 	vmov	r2, s15
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007710:	4b13      	ldr	r3, [pc, #76]	@ (8007760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007714:	0e1b      	lsrs	r3, r3, #24
 8007716:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800771a:	ee07 3a90 	vmov	s15, r3
 800771e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007722:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007726:	ee37 7a87 	vadd.f32	s14, s15, s14
 800772a:	edd7 6a07 	vldr	s13, [r7, #28]
 800772e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007732:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007736:	ee17 2a90 	vmov	r2, s15
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800773e:	e008      	b.n	8007752 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	609a      	str	r2, [r3, #8]
}
 8007752:	bf00      	nop
 8007754:	3724      	adds	r7, #36	@ 0x24
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	58024400 	.word	0x58024400
 8007764:	03d09000 	.word	0x03d09000
 8007768:	46000000 	.word	0x46000000
 800776c:	4c742400 	.word	0x4c742400
 8007770:	4a742400 	.word	0x4a742400
 8007774:	4bbebc20 	.word	0x4bbebc20

08007778 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007778:	b480      	push	{r7}
 800777a:	b089      	sub	sp, #36	@ 0x24
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007780:	4ba1      	ldr	r3, [pc, #644]	@ (8007a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007784:	f003 0303 	and.w	r3, r3, #3
 8007788:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800778a:	4b9f      	ldr	r3, [pc, #636]	@ (8007a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800778c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800778e:	0d1b      	lsrs	r3, r3, #20
 8007790:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007794:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007796:	4b9c      	ldr	r3, [pc, #624]	@ (8007a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800779a:	0a1b      	lsrs	r3, r3, #8
 800779c:	f003 0301 	and.w	r3, r3, #1
 80077a0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80077a2:	4b99      	ldr	r3, [pc, #612]	@ (8007a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077a6:	08db      	lsrs	r3, r3, #3
 80077a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077ac:	693a      	ldr	r2, [r7, #16]
 80077ae:	fb02 f303 	mul.w	r3, r2, r3
 80077b2:	ee07 3a90 	vmov	s15, r3
 80077b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	f000 8111 	beq.w	80079e8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	2b02      	cmp	r3, #2
 80077ca:	f000 8083 	beq.w	80078d4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	f200 80a1 	bhi.w	8007918 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d003      	beq.n	80077e4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d056      	beq.n	8007890 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80077e2:	e099      	b.n	8007918 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077e4:	4b88      	ldr	r3, [pc, #544]	@ (8007a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 0320 	and.w	r3, r3, #32
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d02d      	beq.n	800784c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80077f0:	4b85      	ldr	r3, [pc, #532]	@ (8007a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	08db      	lsrs	r3, r3, #3
 80077f6:	f003 0303 	and.w	r3, r3, #3
 80077fa:	4a84      	ldr	r2, [pc, #528]	@ (8007a0c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80077fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007800:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	ee07 3a90 	vmov	s15, r3
 8007808:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	ee07 3a90 	vmov	s15, r3
 8007812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800781a:	4b7b      	ldr	r3, [pc, #492]	@ (8007a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800781c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800781e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007822:	ee07 3a90 	vmov	s15, r3
 8007826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800782a:	ed97 6a03 	vldr	s12, [r7, #12]
 800782e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007a10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800783a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800783e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007846:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800784a:	e087      	b.n	800795c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	ee07 3a90 	vmov	s15, r3
 8007852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007856:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007a14 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800785a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800785e:	4b6a      	ldr	r3, [pc, #424]	@ (8007a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007866:	ee07 3a90 	vmov	s15, r3
 800786a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800786e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007872:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007a10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800787a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800787e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800788a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800788e:	e065      	b.n	800795c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	ee07 3a90 	vmov	s15, r3
 8007896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800789a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007a18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800789e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078a2:	4b59      	ldr	r3, [pc, #356]	@ (8007a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078aa:	ee07 3a90 	vmov	s15, r3
 80078ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80078b6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007a10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078d2:	e043      	b.n	800795c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	ee07 3a90 	vmov	s15, r3
 80078da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078de:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007a1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80078e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078e6:	4b48      	ldr	r3, [pc, #288]	@ (8007a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ee:	ee07 3a90 	vmov	s15, r3
 80078f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80078fa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007a10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007906:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800790a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800790e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007912:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007916:	e021      	b.n	800795c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	ee07 3a90 	vmov	s15, r3
 800791e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007922:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007a18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800792a:	4b37      	ldr	r3, [pc, #220]	@ (8007a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800792c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800792e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007932:	ee07 3a90 	vmov	s15, r3
 8007936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800793a:	ed97 6a03 	vldr	s12, [r7, #12]
 800793e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007a10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800794a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800794e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007956:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800795a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800795c:	4b2a      	ldr	r3, [pc, #168]	@ (8007a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800795e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007960:	0a5b      	lsrs	r3, r3, #9
 8007962:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007966:	ee07 3a90 	vmov	s15, r3
 800796a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800796e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007972:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007976:	edd7 6a07 	vldr	s13, [r7, #28]
 800797a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800797e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007982:	ee17 2a90 	vmov	r2, s15
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800798a:	4b1f      	ldr	r3, [pc, #124]	@ (8007a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800798c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800798e:	0c1b      	lsrs	r3, r3, #16
 8007990:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007994:	ee07 3a90 	vmov	s15, r3
 8007998:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800799c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80079a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80079a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079b0:	ee17 2a90 	vmov	r2, s15
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80079b8:	4b13      	ldr	r3, [pc, #76]	@ (8007a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079bc:	0e1b      	lsrs	r3, r3, #24
 80079be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079c2:	ee07 3a90 	vmov	s15, r3
 80079c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80079ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80079d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079de:	ee17 2a90 	vmov	r2, s15
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80079e6:	e008      	b.n	80079fa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	609a      	str	r2, [r3, #8]
}
 80079fa:	bf00      	nop
 80079fc:	3724      	adds	r7, #36	@ 0x24
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr
 8007a06:	bf00      	nop
 8007a08:	58024400 	.word	0x58024400
 8007a0c:	03d09000 	.word	0x03d09000
 8007a10:	46000000 	.word	0x46000000
 8007a14:	4c742400 	.word	0x4c742400
 8007a18:	4a742400 	.word	0x4a742400
 8007a1c:	4bbebc20 	.word	0x4bbebc20

08007a20 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b089      	sub	sp, #36	@ 0x24
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a28:	4ba0      	ldr	r3, [pc, #640]	@ (8007cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a2c:	f003 0303 	and.w	r3, r3, #3
 8007a30:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007a32:	4b9e      	ldr	r3, [pc, #632]	@ (8007cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a36:	091b      	lsrs	r3, r3, #4
 8007a38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a3c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007a3e:	4b9b      	ldr	r3, [pc, #620]	@ (8007cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a42:	f003 0301 	and.w	r3, r3, #1
 8007a46:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007a48:	4b98      	ldr	r3, [pc, #608]	@ (8007cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a4c:	08db      	lsrs	r3, r3, #3
 8007a4e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a52:	693a      	ldr	r2, [r7, #16]
 8007a54:	fb02 f303 	mul.w	r3, r2, r3
 8007a58:	ee07 3a90 	vmov	s15, r3
 8007a5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a60:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	f000 8111 	beq.w	8007c8e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	f000 8083 	beq.w	8007b7a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	2b02      	cmp	r3, #2
 8007a78:	f200 80a1 	bhi.w	8007bbe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d003      	beq.n	8007a8a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d056      	beq.n	8007b36 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007a88:	e099      	b.n	8007bbe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a8a:	4b88      	ldr	r3, [pc, #544]	@ (8007cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 0320 	and.w	r3, r3, #32
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d02d      	beq.n	8007af2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a96:	4b85      	ldr	r3, [pc, #532]	@ (8007cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	08db      	lsrs	r3, r3, #3
 8007a9c:	f003 0303 	and.w	r3, r3, #3
 8007aa0:	4a83      	ldr	r2, [pc, #524]	@ (8007cb0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8007aa6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	ee07 3a90 	vmov	s15, r3
 8007aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	ee07 3a90 	vmov	s15, r3
 8007ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007abc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ac0:	4b7a      	ldr	r3, [pc, #488]	@ (8007cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ac8:	ee07 3a90 	vmov	s15, r3
 8007acc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ad0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ad4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8007cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007ad8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007adc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ae0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ae4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aec:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007af0:	e087      	b.n	8007c02 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	ee07 3a90 	vmov	s15, r3
 8007af8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007afc:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8007cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007b00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b04:	4b69      	ldr	r3, [pc, #420]	@ (8007cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b0c:	ee07 3a90 	vmov	s15, r3
 8007b10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b14:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b18:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8007cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007b1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b34:	e065      	b.n	8007c02 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	ee07 3a90 	vmov	s15, r3
 8007b3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b40:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8007cbc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007b44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b48:	4b58      	ldr	r3, [pc, #352]	@ (8007cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b50:	ee07 3a90 	vmov	s15, r3
 8007b54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b58:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b5c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8007cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007b60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b78:	e043      	b.n	8007c02 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	ee07 3a90 	vmov	s15, r3
 8007b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b84:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8007cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007b88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b8c:	4b47      	ldr	r3, [pc, #284]	@ (8007cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b94:	ee07 3a90 	vmov	s15, r3
 8007b98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b9c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ba0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8007cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007ba4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ba8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007bbc:	e021      	b.n	8007c02 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	ee07 3a90 	vmov	s15, r3
 8007bc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bc8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8007cb8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007bcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bd0:	4b36      	ldr	r3, [pc, #216]	@ (8007cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bd8:	ee07 3a90 	vmov	s15, r3
 8007bdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007be0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007be4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8007cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007be8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bf0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bfc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c00:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007c02:	4b2a      	ldr	r3, [pc, #168]	@ (8007cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c06:	0a5b      	lsrs	r3, r3, #9
 8007c08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c0c:	ee07 3a90 	vmov	s15, r3
 8007c10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c28:	ee17 2a90 	vmov	r2, s15
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007c30:	4b1e      	ldr	r3, [pc, #120]	@ (8007cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c34:	0c1b      	lsrs	r3, r3, #16
 8007c36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c3a:	ee07 3a90 	vmov	s15, r3
 8007c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c56:	ee17 2a90 	vmov	r2, s15
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007c5e:	4b13      	ldr	r3, [pc, #76]	@ (8007cac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c62:	0e1b      	lsrs	r3, r3, #24
 8007c64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c68:	ee07 3a90 	vmov	s15, r3
 8007c6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c70:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c78:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c84:	ee17 2a90 	vmov	r2, s15
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007c8c:	e008      	b.n	8007ca0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	609a      	str	r2, [r3, #8]
}
 8007ca0:	bf00      	nop
 8007ca2:	3724      	adds	r7, #36	@ 0x24
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr
 8007cac:	58024400 	.word	0x58024400
 8007cb0:	03d09000 	.word	0x03d09000
 8007cb4:	46000000 	.word	0x46000000
 8007cb8:	4c742400 	.word	0x4c742400
 8007cbc:	4a742400 	.word	0x4a742400
 8007cc0:	4bbebc20 	.word	0x4bbebc20

08007cc4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007cd2:	4b53      	ldr	r3, [pc, #332]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cd6:	f003 0303 	and.w	r3, r3, #3
 8007cda:	2b03      	cmp	r3, #3
 8007cdc:	d101      	bne.n	8007ce2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e099      	b.n	8007e16 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007ce2:	4b4f      	ldr	r3, [pc, #316]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a4e      	ldr	r2, [pc, #312]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007ce8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007cec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cee:	f7f9 f9db 	bl	80010a8 <HAL_GetTick>
 8007cf2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007cf4:	e008      	b.n	8007d08 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007cf6:	f7f9 f9d7 	bl	80010a8 <HAL_GetTick>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	1ad3      	subs	r3, r2, r3
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d901      	bls.n	8007d08 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007d04:	2303      	movs	r3, #3
 8007d06:	e086      	b.n	8007e16 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007d08:	4b45      	ldr	r3, [pc, #276]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1f0      	bne.n	8007cf6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007d14:	4b42      	ldr	r3, [pc, #264]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d18:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	031b      	lsls	r3, r3, #12
 8007d22:	493f      	ldr	r1, [pc, #252]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007d24:	4313      	orrs	r3, r2
 8007d26:	628b      	str	r3, [r1, #40]	@ 0x28
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	3b01      	subs	r3, #1
 8007d38:	025b      	lsls	r3, r3, #9
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	431a      	orrs	r2, r3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	3b01      	subs	r3, #1
 8007d44:	041b      	lsls	r3, r3, #16
 8007d46:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007d4a:	431a      	orrs	r2, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	691b      	ldr	r3, [r3, #16]
 8007d50:	3b01      	subs	r3, #1
 8007d52:	061b      	lsls	r3, r3, #24
 8007d54:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007d58:	4931      	ldr	r1, [pc, #196]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007d5e:	4b30      	ldr	r3, [pc, #192]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d62:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	695b      	ldr	r3, [r3, #20]
 8007d6a:	492d      	ldr	r1, [pc, #180]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007d70:	4b2b      	ldr	r3, [pc, #172]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d74:	f023 0220 	bic.w	r2, r3, #32
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	699b      	ldr	r3, [r3, #24]
 8007d7c:	4928      	ldr	r1, [pc, #160]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007d82:	4b27      	ldr	r3, [pc, #156]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d86:	4a26      	ldr	r2, [pc, #152]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007d88:	f023 0310 	bic.w	r3, r3, #16
 8007d8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007d8e:	4b24      	ldr	r3, [pc, #144]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007d90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d92:	4b24      	ldr	r3, [pc, #144]	@ (8007e24 <RCCEx_PLL2_Config+0x160>)
 8007d94:	4013      	ands	r3, r2
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	69d2      	ldr	r2, [r2, #28]
 8007d9a:	00d2      	lsls	r2, r2, #3
 8007d9c:	4920      	ldr	r1, [pc, #128]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007da2:	4b1f      	ldr	r3, [pc, #124]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007da6:	4a1e      	ldr	r2, [pc, #120]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007da8:	f043 0310 	orr.w	r3, r3, #16
 8007dac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d106      	bne.n	8007dc2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007db4:	4b1a      	ldr	r3, [pc, #104]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007db8:	4a19      	ldr	r2, [pc, #100]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007dba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007dbe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007dc0:	e00f      	b.n	8007de2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	2b01      	cmp	r3, #1
 8007dc6:	d106      	bne.n	8007dd6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007dc8:	4b15      	ldr	r3, [pc, #84]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dcc:	4a14      	ldr	r2, [pc, #80]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007dce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007dd2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007dd4:	e005      	b.n	8007de2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007dd6:	4b12      	ldr	r3, [pc, #72]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dda:	4a11      	ldr	r2, [pc, #68]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007ddc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007de0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007de2:	4b0f      	ldr	r3, [pc, #60]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a0e      	ldr	r2, [pc, #56]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007de8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007dec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007dee:	f7f9 f95b 	bl	80010a8 <HAL_GetTick>
 8007df2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007df4:	e008      	b.n	8007e08 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007df6:	f7f9 f957 	bl	80010a8 <HAL_GetTick>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	1ad3      	subs	r3, r2, r3
 8007e00:	2b02      	cmp	r3, #2
 8007e02:	d901      	bls.n	8007e08 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007e04:	2303      	movs	r3, #3
 8007e06:	e006      	b.n	8007e16 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007e08:	4b05      	ldr	r3, [pc, #20]	@ (8007e20 <RCCEx_PLL2_Config+0x15c>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d0f0      	beq.n	8007df6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	58024400 	.word	0x58024400
 8007e24:	ffff0007 	.word	0xffff0007

08007e28 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e32:	2300      	movs	r3, #0
 8007e34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007e36:	4b53      	ldr	r3, [pc, #332]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e3a:	f003 0303 	and.w	r3, r3, #3
 8007e3e:	2b03      	cmp	r3, #3
 8007e40:	d101      	bne.n	8007e46 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	e099      	b.n	8007f7a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007e46:	4b4f      	ldr	r3, [pc, #316]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a4e      	ldr	r2, [pc, #312]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007e4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e52:	f7f9 f929 	bl	80010a8 <HAL_GetTick>
 8007e56:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007e58:	e008      	b.n	8007e6c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007e5a:	f7f9 f925 	bl	80010a8 <HAL_GetTick>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	1ad3      	subs	r3, r2, r3
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	d901      	bls.n	8007e6c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	e086      	b.n	8007f7a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007e6c:	4b45      	ldr	r3, [pc, #276]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d1f0      	bne.n	8007e5a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007e78:	4b42      	ldr	r3, [pc, #264]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e7c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	051b      	lsls	r3, r3, #20
 8007e86:	493f      	ldr	r1, [pc, #252]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	628b      	str	r3, [r1, #40]	@ 0x28
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	3b01      	subs	r3, #1
 8007e92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	025b      	lsls	r3, r3, #9
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	431a      	orrs	r2, r3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	041b      	lsls	r3, r3, #16
 8007eaa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007eae:	431a      	orrs	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	691b      	ldr	r3, [r3, #16]
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	061b      	lsls	r3, r3, #24
 8007eb8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007ebc:	4931      	ldr	r1, [pc, #196]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007ec2:	4b30      	ldr	r3, [pc, #192]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ec6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	695b      	ldr	r3, [r3, #20]
 8007ece:	492d      	ldr	r1, [pc, #180]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007ed4:	4b2b      	ldr	r3, [pc, #172]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ed8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	699b      	ldr	r3, [r3, #24]
 8007ee0:	4928      	ldr	r1, [pc, #160]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007ee6:	4b27      	ldr	r3, [pc, #156]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eea:	4a26      	ldr	r2, [pc, #152]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007eec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ef0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007ef2:	4b24      	ldr	r3, [pc, #144]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007ef4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ef6:	4b24      	ldr	r3, [pc, #144]	@ (8007f88 <RCCEx_PLL3_Config+0x160>)
 8007ef8:	4013      	ands	r3, r2
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	69d2      	ldr	r2, [r2, #28]
 8007efe:	00d2      	lsls	r2, r2, #3
 8007f00:	4920      	ldr	r1, [pc, #128]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007f02:	4313      	orrs	r3, r2
 8007f04:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007f06:	4b1f      	ldr	r3, [pc, #124]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f0a:	4a1e      	ldr	r2, [pc, #120]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007f0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f10:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d106      	bne.n	8007f26 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007f18:	4b1a      	ldr	r3, [pc, #104]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f1c:	4a19      	ldr	r2, [pc, #100]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007f1e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007f22:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007f24:	e00f      	b.n	8007f46 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d106      	bne.n	8007f3a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007f2c:	4b15      	ldr	r3, [pc, #84]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f30:	4a14      	ldr	r2, [pc, #80]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007f32:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007f36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007f38:	e005      	b.n	8007f46 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007f3a:	4b12      	ldr	r3, [pc, #72]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f3e:	4a11      	ldr	r2, [pc, #68]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007f40:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007f44:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007f46:	4b0f      	ldr	r3, [pc, #60]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a0e      	ldr	r2, [pc, #56]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007f4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f52:	f7f9 f8a9 	bl	80010a8 <HAL_GetTick>
 8007f56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007f58:	e008      	b.n	8007f6c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007f5a:	f7f9 f8a5 	bl	80010a8 <HAL_GetTick>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	1ad3      	subs	r3, r2, r3
 8007f64:	2b02      	cmp	r3, #2
 8007f66:	d901      	bls.n	8007f6c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007f68:	2303      	movs	r3, #3
 8007f6a:	e006      	b.n	8007f7a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007f6c:	4b05      	ldr	r3, [pc, #20]	@ (8007f84 <RCCEx_PLL3_Config+0x15c>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d0f0      	beq.n	8007f5a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3710      	adds	r7, #16
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	58024400 	.word	0x58024400
 8007f88:	ffff0007 	.word	0xffff0007

08007f8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d101      	bne.n	8007f9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e049      	b.n	8008032 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d106      	bne.n	8007fb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f7f8 fdf2 	bl	8000b9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2202      	movs	r2, #2
 8007fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	3304      	adds	r3, #4
 8007fc8:	4619      	mov	r1, r3
 8007fca:	4610      	mov	r0, r2
 8007fcc:	f000 f9ec 	bl	80083a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2201      	movs	r2, #1
 800800c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2201      	movs	r2, #1
 8008014:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2201      	movs	r2, #1
 800801c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2201      	movs	r2, #1
 800802c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3708      	adds	r7, #8
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
	...

0800803c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800803c:	b480      	push	{r7}
 800803e:	b085      	sub	sp, #20
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800804a:	b2db      	uxtb	r3, r3
 800804c:	2b01      	cmp	r3, #1
 800804e:	d001      	beq.n	8008054 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	e05e      	b.n	8008112 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2202      	movs	r2, #2
 8008058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	68da      	ldr	r2, [r3, #12]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f042 0201 	orr.w	r2, r2, #1
 800806a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a2b      	ldr	r2, [pc, #172]	@ (8008120 <HAL_TIM_Base_Start_IT+0xe4>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d02c      	beq.n	80080d0 <HAL_TIM_Base_Start_IT+0x94>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800807e:	d027      	beq.n	80080d0 <HAL_TIM_Base_Start_IT+0x94>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a27      	ldr	r2, [pc, #156]	@ (8008124 <HAL_TIM_Base_Start_IT+0xe8>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d022      	beq.n	80080d0 <HAL_TIM_Base_Start_IT+0x94>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a26      	ldr	r2, [pc, #152]	@ (8008128 <HAL_TIM_Base_Start_IT+0xec>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d01d      	beq.n	80080d0 <HAL_TIM_Base_Start_IT+0x94>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a24      	ldr	r2, [pc, #144]	@ (800812c <HAL_TIM_Base_Start_IT+0xf0>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d018      	beq.n	80080d0 <HAL_TIM_Base_Start_IT+0x94>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a23      	ldr	r2, [pc, #140]	@ (8008130 <HAL_TIM_Base_Start_IT+0xf4>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d013      	beq.n	80080d0 <HAL_TIM_Base_Start_IT+0x94>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a21      	ldr	r2, [pc, #132]	@ (8008134 <HAL_TIM_Base_Start_IT+0xf8>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d00e      	beq.n	80080d0 <HAL_TIM_Base_Start_IT+0x94>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a20      	ldr	r2, [pc, #128]	@ (8008138 <HAL_TIM_Base_Start_IT+0xfc>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d009      	beq.n	80080d0 <HAL_TIM_Base_Start_IT+0x94>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a1e      	ldr	r2, [pc, #120]	@ (800813c <HAL_TIM_Base_Start_IT+0x100>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d004      	beq.n	80080d0 <HAL_TIM_Base_Start_IT+0x94>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a1d      	ldr	r2, [pc, #116]	@ (8008140 <HAL_TIM_Base_Start_IT+0x104>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d115      	bne.n	80080fc <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	689a      	ldr	r2, [r3, #8]
 80080d6:	4b1b      	ldr	r3, [pc, #108]	@ (8008144 <HAL_TIM_Base_Start_IT+0x108>)
 80080d8:	4013      	ands	r3, r2
 80080da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2b06      	cmp	r3, #6
 80080e0:	d015      	beq.n	800810e <HAL_TIM_Base_Start_IT+0xd2>
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080e8:	d011      	beq.n	800810e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f042 0201 	orr.w	r2, r2, #1
 80080f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080fa:	e008      	b.n	800810e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f042 0201 	orr.w	r2, r2, #1
 800810a:	601a      	str	r2, [r3, #0]
 800810c:	e000      	b.n	8008110 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800810e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3714      	adds	r7, #20
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop
 8008120:	40010000 	.word	0x40010000
 8008124:	40000400 	.word	0x40000400
 8008128:	40000800 	.word	0x40000800
 800812c:	40000c00 	.word	0x40000c00
 8008130:	40010400 	.word	0x40010400
 8008134:	40001800 	.word	0x40001800
 8008138:	40014000 	.word	0x40014000
 800813c:	4000e000 	.word	0x4000e000
 8008140:	4000e400 	.word	0x4000e400
 8008144:	00010007 	.word	0x00010007

08008148 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	691b      	ldr	r3, [r3, #16]
 800815e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	f003 0302 	and.w	r3, r3, #2
 8008166:	2b00      	cmp	r3, #0
 8008168:	d020      	beq.n	80081ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f003 0302 	and.w	r3, r3, #2
 8008170:	2b00      	cmp	r3, #0
 8008172:	d01b      	beq.n	80081ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f06f 0202 	mvn.w	r2, #2
 800817c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2201      	movs	r2, #1
 8008182:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	699b      	ldr	r3, [r3, #24]
 800818a:	f003 0303 	and.w	r3, r3, #3
 800818e:	2b00      	cmp	r3, #0
 8008190:	d003      	beq.n	800819a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 f8e9 	bl	800836a <HAL_TIM_IC_CaptureCallback>
 8008198:	e005      	b.n	80081a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 f8db 	bl	8008356 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 f8ec 	bl	800837e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	f003 0304 	and.w	r3, r3, #4
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d020      	beq.n	80081f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f003 0304 	and.w	r3, r3, #4
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d01b      	beq.n	80081f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f06f 0204 	mvn.w	r2, #4
 80081c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2202      	movs	r2, #2
 80081ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	699b      	ldr	r3, [r3, #24]
 80081d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d003      	beq.n	80081e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f8c3 	bl	800836a <HAL_TIM_IC_CaptureCallback>
 80081e4:	e005      	b.n	80081f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 f8b5 	bl	8008356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 f8c6 	bl	800837e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	f003 0308 	and.w	r3, r3, #8
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d020      	beq.n	8008244 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f003 0308 	and.w	r3, r3, #8
 8008208:	2b00      	cmp	r3, #0
 800820a:	d01b      	beq.n	8008244 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f06f 0208 	mvn.w	r2, #8
 8008214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2204      	movs	r2, #4
 800821a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	69db      	ldr	r3, [r3, #28]
 8008222:	f003 0303 	and.w	r3, r3, #3
 8008226:	2b00      	cmp	r3, #0
 8008228:	d003      	beq.n	8008232 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 f89d 	bl	800836a <HAL_TIM_IC_CaptureCallback>
 8008230:	e005      	b.n	800823e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 f88f 	bl	8008356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 f8a0 	bl	800837e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	f003 0310 	and.w	r3, r3, #16
 800824a:	2b00      	cmp	r3, #0
 800824c:	d020      	beq.n	8008290 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f003 0310 	and.w	r3, r3, #16
 8008254:	2b00      	cmp	r3, #0
 8008256:	d01b      	beq.n	8008290 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f06f 0210 	mvn.w	r2, #16
 8008260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2208      	movs	r2, #8
 8008266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	69db      	ldr	r3, [r3, #28]
 800826e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008272:	2b00      	cmp	r3, #0
 8008274:	d003      	beq.n	800827e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 f877 	bl	800836a <HAL_TIM_IC_CaptureCallback>
 800827c:	e005      	b.n	800828a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 f869 	bl	8008356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 f87a 	bl	800837e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	f003 0301 	and.w	r3, r3, #1
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00c      	beq.n	80082b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f003 0301 	and.w	r3, r3, #1
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d007      	beq.n	80082b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f06f 0201 	mvn.w	r2, #1
 80082ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f7f8 faa6 	bl	8000800 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d104      	bne.n	80082c8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00c      	beq.n	80082e2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d007      	beq.n	80082e2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80082da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 f9b5 	bl	800864c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00c      	beq.n	8008306 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d007      	beq.n	8008306 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80082fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 f9ad 	bl	8008660 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00c      	beq.n	800832a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008316:	2b00      	cmp	r3, #0
 8008318:	d007      	beq.n	800832a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 f834 	bl	8008392 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	f003 0320 	and.w	r3, r3, #32
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00c      	beq.n	800834e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f003 0320 	and.w	r3, r3, #32
 800833a:	2b00      	cmp	r3, #0
 800833c:	d007      	beq.n	800834e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f06f 0220 	mvn.w	r2, #32
 8008346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 f975 	bl	8008638 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800834e:	bf00      	nop
 8008350:	3710      	adds	r7, #16
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008356:	b480      	push	{r7}
 8008358:	b083      	sub	sp, #12
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800835e:	bf00      	nop
 8008360:	370c      	adds	r7, #12
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr

0800836a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800836a:	b480      	push	{r7}
 800836c:	b083      	sub	sp, #12
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008372:	bf00      	nop
 8008374:	370c      	adds	r7, #12
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr

0800837e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800837e:	b480      	push	{r7}
 8008380:	b083      	sub	sp, #12
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008386:	bf00      	nop
 8008388:	370c      	adds	r7, #12
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr

08008392 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008392:	b480      	push	{r7}
 8008394:	b083      	sub	sp, #12
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800839a:	bf00      	nop
 800839c:	370c      	adds	r7, #12
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr
	...

080083a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b085      	sub	sp, #20
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a47      	ldr	r2, [pc, #284]	@ (80084d8 <TIM_Base_SetConfig+0x130>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d013      	beq.n	80083e8 <TIM_Base_SetConfig+0x40>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083c6:	d00f      	beq.n	80083e8 <TIM_Base_SetConfig+0x40>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a44      	ldr	r2, [pc, #272]	@ (80084dc <TIM_Base_SetConfig+0x134>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d00b      	beq.n	80083e8 <TIM_Base_SetConfig+0x40>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4a43      	ldr	r2, [pc, #268]	@ (80084e0 <TIM_Base_SetConfig+0x138>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d007      	beq.n	80083e8 <TIM_Base_SetConfig+0x40>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4a42      	ldr	r2, [pc, #264]	@ (80084e4 <TIM_Base_SetConfig+0x13c>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d003      	beq.n	80083e8 <TIM_Base_SetConfig+0x40>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	4a41      	ldr	r2, [pc, #260]	@ (80084e8 <TIM_Base_SetConfig+0x140>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d108      	bne.n	80083fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	68fa      	ldr	r2, [r7, #12]
 80083f6:	4313      	orrs	r3, r2
 80083f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a36      	ldr	r2, [pc, #216]	@ (80084d8 <TIM_Base_SetConfig+0x130>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d027      	beq.n	8008452 <TIM_Base_SetConfig+0xaa>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008408:	d023      	beq.n	8008452 <TIM_Base_SetConfig+0xaa>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a33      	ldr	r2, [pc, #204]	@ (80084dc <TIM_Base_SetConfig+0x134>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d01f      	beq.n	8008452 <TIM_Base_SetConfig+0xaa>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4a32      	ldr	r2, [pc, #200]	@ (80084e0 <TIM_Base_SetConfig+0x138>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d01b      	beq.n	8008452 <TIM_Base_SetConfig+0xaa>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a31      	ldr	r2, [pc, #196]	@ (80084e4 <TIM_Base_SetConfig+0x13c>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d017      	beq.n	8008452 <TIM_Base_SetConfig+0xaa>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4a30      	ldr	r2, [pc, #192]	@ (80084e8 <TIM_Base_SetConfig+0x140>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d013      	beq.n	8008452 <TIM_Base_SetConfig+0xaa>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4a2f      	ldr	r2, [pc, #188]	@ (80084ec <TIM_Base_SetConfig+0x144>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d00f      	beq.n	8008452 <TIM_Base_SetConfig+0xaa>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a2e      	ldr	r2, [pc, #184]	@ (80084f0 <TIM_Base_SetConfig+0x148>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d00b      	beq.n	8008452 <TIM_Base_SetConfig+0xaa>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4a2d      	ldr	r2, [pc, #180]	@ (80084f4 <TIM_Base_SetConfig+0x14c>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d007      	beq.n	8008452 <TIM_Base_SetConfig+0xaa>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4a2c      	ldr	r2, [pc, #176]	@ (80084f8 <TIM_Base_SetConfig+0x150>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d003      	beq.n	8008452 <TIM_Base_SetConfig+0xaa>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	4a2b      	ldr	r2, [pc, #172]	@ (80084fc <TIM_Base_SetConfig+0x154>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d108      	bne.n	8008464 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008458:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	4313      	orrs	r3, r2
 8008462:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	695b      	ldr	r3, [r3, #20]
 800846e:	4313      	orrs	r3, r2
 8008470:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	689a      	ldr	r2, [r3, #8]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	4a14      	ldr	r2, [pc, #80]	@ (80084d8 <TIM_Base_SetConfig+0x130>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d00f      	beq.n	80084aa <TIM_Base_SetConfig+0x102>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4a16      	ldr	r2, [pc, #88]	@ (80084e8 <TIM_Base_SetConfig+0x140>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d00b      	beq.n	80084aa <TIM_Base_SetConfig+0x102>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	4a15      	ldr	r2, [pc, #84]	@ (80084ec <TIM_Base_SetConfig+0x144>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d007      	beq.n	80084aa <TIM_Base_SetConfig+0x102>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	4a14      	ldr	r2, [pc, #80]	@ (80084f0 <TIM_Base_SetConfig+0x148>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d003      	beq.n	80084aa <TIM_Base_SetConfig+0x102>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	4a13      	ldr	r2, [pc, #76]	@ (80084f4 <TIM_Base_SetConfig+0x14c>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d103      	bne.n	80084b2 <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	691a      	ldr	r2, [r3, #16]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f043 0204 	orr.w	r2, r3, #4
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2201      	movs	r2, #1
 80084c2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	68fa      	ldr	r2, [r7, #12]
 80084c8:	601a      	str	r2, [r3, #0]
}
 80084ca:	bf00      	nop
 80084cc:	3714      	adds	r7, #20
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr
 80084d6:	bf00      	nop
 80084d8:	40010000 	.word	0x40010000
 80084dc:	40000400 	.word	0x40000400
 80084e0:	40000800 	.word	0x40000800
 80084e4:	40000c00 	.word	0x40000c00
 80084e8:	40010400 	.word	0x40010400
 80084ec:	40014000 	.word	0x40014000
 80084f0:	40014400 	.word	0x40014400
 80084f4:	40014800 	.word	0x40014800
 80084f8:	4000e000 	.word	0x4000e000
 80084fc:	4000e400 	.word	0x4000e400

08008500 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008500:	b480      	push	{r7}
 8008502:	b085      	sub	sp, #20
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008510:	2b01      	cmp	r3, #1
 8008512:	d101      	bne.n	8008518 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008514:	2302      	movs	r3, #2
 8008516:	e077      	b.n	8008608 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2202      	movs	r2, #2
 8008524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a35      	ldr	r2, [pc, #212]	@ (8008614 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d004      	beq.n	800854c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a34      	ldr	r2, [pc, #208]	@ (8008618 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d108      	bne.n	800855e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008552:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	68fa      	ldr	r2, [r7, #12]
 800855a:	4313      	orrs	r3, r2
 800855c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008564:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	68fa      	ldr	r2, [r7, #12]
 800856c:	4313      	orrs	r3, r2
 800856e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a25      	ldr	r2, [pc, #148]	@ (8008614 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d02c      	beq.n	80085dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800858a:	d027      	beq.n	80085dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a22      	ldr	r2, [pc, #136]	@ (800861c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d022      	beq.n	80085dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a21      	ldr	r2, [pc, #132]	@ (8008620 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d01d      	beq.n	80085dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a1f      	ldr	r2, [pc, #124]	@ (8008624 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d018      	beq.n	80085dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a1a      	ldr	r2, [pc, #104]	@ (8008618 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d013      	beq.n	80085dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a1b      	ldr	r2, [pc, #108]	@ (8008628 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d00e      	beq.n	80085dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a1a      	ldr	r2, [pc, #104]	@ (800862c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d009      	beq.n	80085dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a18      	ldr	r2, [pc, #96]	@ (8008630 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d004      	beq.n	80085dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a17      	ldr	r2, [pc, #92]	@ (8008634 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d10c      	bne.n	80085f6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80085e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	68ba      	ldr	r2, [r7, #8]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	68ba      	ldr	r2, [r7, #8]
 80085f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2201      	movs	r2, #1
 80085fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008606:	2300      	movs	r3, #0
}
 8008608:	4618      	mov	r0, r3
 800860a:	3714      	adds	r7, #20
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr
 8008614:	40010000 	.word	0x40010000
 8008618:	40010400 	.word	0x40010400
 800861c:	40000400 	.word	0x40000400
 8008620:	40000800 	.word	0x40000800
 8008624:	40000c00 	.word	0x40000c00
 8008628:	40001800 	.word	0x40001800
 800862c:	40014000 	.word	0x40014000
 8008630:	4000e000 	.word	0x4000e000
 8008634:	4000e400 	.word	0x4000e400

08008638 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008640:	bf00      	nop
 8008642:	370c      	adds	r7, #12
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008654:	bf00      	nop
 8008656:	370c      	adds	r7, #12
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr

08008660 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008660:	b480      	push	{r7}
 8008662:	b083      	sub	sp, #12
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008668:	bf00      	nop
 800866a:	370c      	adds	r7, #12
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <rand>:
 8008674:	4b16      	ldr	r3, [pc, #88]	@ (80086d0 <rand+0x5c>)
 8008676:	b510      	push	{r4, lr}
 8008678:	681c      	ldr	r4, [r3, #0]
 800867a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800867c:	b9b3      	cbnz	r3, 80086ac <rand+0x38>
 800867e:	2018      	movs	r0, #24
 8008680:	f000 fa20 	bl	8008ac4 <malloc>
 8008684:	4602      	mov	r2, r0
 8008686:	6320      	str	r0, [r4, #48]	@ 0x30
 8008688:	b920      	cbnz	r0, 8008694 <rand+0x20>
 800868a:	4b12      	ldr	r3, [pc, #72]	@ (80086d4 <rand+0x60>)
 800868c:	4812      	ldr	r0, [pc, #72]	@ (80086d8 <rand+0x64>)
 800868e:	2152      	movs	r1, #82	@ 0x52
 8008690:	f000 f9b0 	bl	80089f4 <__assert_func>
 8008694:	4911      	ldr	r1, [pc, #68]	@ (80086dc <rand+0x68>)
 8008696:	4b12      	ldr	r3, [pc, #72]	@ (80086e0 <rand+0x6c>)
 8008698:	e9c0 1300 	strd	r1, r3, [r0]
 800869c:	4b11      	ldr	r3, [pc, #68]	@ (80086e4 <rand+0x70>)
 800869e:	6083      	str	r3, [r0, #8]
 80086a0:	230b      	movs	r3, #11
 80086a2:	8183      	strh	r3, [r0, #12]
 80086a4:	2100      	movs	r1, #0
 80086a6:	2001      	movs	r0, #1
 80086a8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80086ac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80086ae:	480e      	ldr	r0, [pc, #56]	@ (80086e8 <rand+0x74>)
 80086b0:	690b      	ldr	r3, [r1, #16]
 80086b2:	694c      	ldr	r4, [r1, #20]
 80086b4:	4a0d      	ldr	r2, [pc, #52]	@ (80086ec <rand+0x78>)
 80086b6:	4358      	muls	r0, r3
 80086b8:	fb02 0004 	mla	r0, r2, r4, r0
 80086bc:	fba3 3202 	umull	r3, r2, r3, r2
 80086c0:	3301      	adds	r3, #1
 80086c2:	eb40 0002 	adc.w	r0, r0, r2
 80086c6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80086ca:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80086ce:	bd10      	pop	{r4, pc}
 80086d0:	2400001c 	.word	0x2400001c
 80086d4:	0800a1e0 	.word	0x0800a1e0
 80086d8:	0800a1f7 	.word	0x0800a1f7
 80086dc:	abcd330e 	.word	0xabcd330e
 80086e0:	e66d1234 	.word	0xe66d1234
 80086e4:	0005deec 	.word	0x0005deec
 80086e8:	5851f42d 	.word	0x5851f42d
 80086ec:	4c957f2d 	.word	0x4c957f2d

080086f0 <std>:
 80086f0:	2300      	movs	r3, #0
 80086f2:	b510      	push	{r4, lr}
 80086f4:	4604      	mov	r4, r0
 80086f6:	e9c0 3300 	strd	r3, r3, [r0]
 80086fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80086fe:	6083      	str	r3, [r0, #8]
 8008700:	8181      	strh	r1, [r0, #12]
 8008702:	6643      	str	r3, [r0, #100]	@ 0x64
 8008704:	81c2      	strh	r2, [r0, #14]
 8008706:	6183      	str	r3, [r0, #24]
 8008708:	4619      	mov	r1, r3
 800870a:	2208      	movs	r2, #8
 800870c:	305c      	adds	r0, #92	@ 0x5c
 800870e:	f000 f8f4 	bl	80088fa <memset>
 8008712:	4b0d      	ldr	r3, [pc, #52]	@ (8008748 <std+0x58>)
 8008714:	6263      	str	r3, [r4, #36]	@ 0x24
 8008716:	4b0d      	ldr	r3, [pc, #52]	@ (800874c <std+0x5c>)
 8008718:	62a3      	str	r3, [r4, #40]	@ 0x28
 800871a:	4b0d      	ldr	r3, [pc, #52]	@ (8008750 <std+0x60>)
 800871c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800871e:	4b0d      	ldr	r3, [pc, #52]	@ (8008754 <std+0x64>)
 8008720:	6323      	str	r3, [r4, #48]	@ 0x30
 8008722:	4b0d      	ldr	r3, [pc, #52]	@ (8008758 <std+0x68>)
 8008724:	6224      	str	r4, [r4, #32]
 8008726:	429c      	cmp	r4, r3
 8008728:	d006      	beq.n	8008738 <std+0x48>
 800872a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800872e:	4294      	cmp	r4, r2
 8008730:	d002      	beq.n	8008738 <std+0x48>
 8008732:	33d0      	adds	r3, #208	@ 0xd0
 8008734:	429c      	cmp	r4, r3
 8008736:	d105      	bne.n	8008744 <std+0x54>
 8008738:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800873c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008740:	f000 b954 	b.w	80089ec <__retarget_lock_init_recursive>
 8008744:	bd10      	pop	{r4, pc}
 8008746:	bf00      	nop
 8008748:	08008875 	.word	0x08008875
 800874c:	08008897 	.word	0x08008897
 8008750:	080088cf 	.word	0x080088cf
 8008754:	080088f3 	.word	0x080088f3
 8008758:	24001204 	.word	0x24001204

0800875c <stdio_exit_handler>:
 800875c:	4a02      	ldr	r2, [pc, #8]	@ (8008768 <stdio_exit_handler+0xc>)
 800875e:	4903      	ldr	r1, [pc, #12]	@ (800876c <stdio_exit_handler+0x10>)
 8008760:	4803      	ldr	r0, [pc, #12]	@ (8008770 <stdio_exit_handler+0x14>)
 8008762:	f000 b869 	b.w	8008838 <_fwalk_sglue>
 8008766:	bf00      	nop
 8008768:	24000010 	.word	0x24000010
 800876c:	08008d39 	.word	0x08008d39
 8008770:	24000020 	.word	0x24000020

08008774 <cleanup_stdio>:
 8008774:	6841      	ldr	r1, [r0, #4]
 8008776:	4b0c      	ldr	r3, [pc, #48]	@ (80087a8 <cleanup_stdio+0x34>)
 8008778:	4299      	cmp	r1, r3
 800877a:	b510      	push	{r4, lr}
 800877c:	4604      	mov	r4, r0
 800877e:	d001      	beq.n	8008784 <cleanup_stdio+0x10>
 8008780:	f000 fada 	bl	8008d38 <_fflush_r>
 8008784:	68a1      	ldr	r1, [r4, #8]
 8008786:	4b09      	ldr	r3, [pc, #36]	@ (80087ac <cleanup_stdio+0x38>)
 8008788:	4299      	cmp	r1, r3
 800878a:	d002      	beq.n	8008792 <cleanup_stdio+0x1e>
 800878c:	4620      	mov	r0, r4
 800878e:	f000 fad3 	bl	8008d38 <_fflush_r>
 8008792:	68e1      	ldr	r1, [r4, #12]
 8008794:	4b06      	ldr	r3, [pc, #24]	@ (80087b0 <cleanup_stdio+0x3c>)
 8008796:	4299      	cmp	r1, r3
 8008798:	d004      	beq.n	80087a4 <cleanup_stdio+0x30>
 800879a:	4620      	mov	r0, r4
 800879c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087a0:	f000 baca 	b.w	8008d38 <_fflush_r>
 80087a4:	bd10      	pop	{r4, pc}
 80087a6:	bf00      	nop
 80087a8:	24001204 	.word	0x24001204
 80087ac:	2400126c 	.word	0x2400126c
 80087b0:	240012d4 	.word	0x240012d4

080087b4 <global_stdio_init.part.0>:
 80087b4:	b510      	push	{r4, lr}
 80087b6:	4b0b      	ldr	r3, [pc, #44]	@ (80087e4 <global_stdio_init.part.0+0x30>)
 80087b8:	4c0b      	ldr	r4, [pc, #44]	@ (80087e8 <global_stdio_init.part.0+0x34>)
 80087ba:	4a0c      	ldr	r2, [pc, #48]	@ (80087ec <global_stdio_init.part.0+0x38>)
 80087bc:	601a      	str	r2, [r3, #0]
 80087be:	4620      	mov	r0, r4
 80087c0:	2200      	movs	r2, #0
 80087c2:	2104      	movs	r1, #4
 80087c4:	f7ff ff94 	bl	80086f0 <std>
 80087c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80087cc:	2201      	movs	r2, #1
 80087ce:	2109      	movs	r1, #9
 80087d0:	f7ff ff8e 	bl	80086f0 <std>
 80087d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80087d8:	2202      	movs	r2, #2
 80087da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087de:	2112      	movs	r1, #18
 80087e0:	f7ff bf86 	b.w	80086f0 <std>
 80087e4:	2400133c 	.word	0x2400133c
 80087e8:	24001204 	.word	0x24001204
 80087ec:	0800875d 	.word	0x0800875d

080087f0 <__sfp_lock_acquire>:
 80087f0:	4801      	ldr	r0, [pc, #4]	@ (80087f8 <__sfp_lock_acquire+0x8>)
 80087f2:	f000 b8fc 	b.w	80089ee <__retarget_lock_acquire_recursive>
 80087f6:	bf00      	nop
 80087f8:	24001345 	.word	0x24001345

080087fc <__sfp_lock_release>:
 80087fc:	4801      	ldr	r0, [pc, #4]	@ (8008804 <__sfp_lock_release+0x8>)
 80087fe:	f000 b8f7 	b.w	80089f0 <__retarget_lock_release_recursive>
 8008802:	bf00      	nop
 8008804:	24001345 	.word	0x24001345

08008808 <__sinit>:
 8008808:	b510      	push	{r4, lr}
 800880a:	4604      	mov	r4, r0
 800880c:	f7ff fff0 	bl	80087f0 <__sfp_lock_acquire>
 8008810:	6a23      	ldr	r3, [r4, #32]
 8008812:	b11b      	cbz	r3, 800881c <__sinit+0x14>
 8008814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008818:	f7ff bff0 	b.w	80087fc <__sfp_lock_release>
 800881c:	4b04      	ldr	r3, [pc, #16]	@ (8008830 <__sinit+0x28>)
 800881e:	6223      	str	r3, [r4, #32]
 8008820:	4b04      	ldr	r3, [pc, #16]	@ (8008834 <__sinit+0x2c>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d1f5      	bne.n	8008814 <__sinit+0xc>
 8008828:	f7ff ffc4 	bl	80087b4 <global_stdio_init.part.0>
 800882c:	e7f2      	b.n	8008814 <__sinit+0xc>
 800882e:	bf00      	nop
 8008830:	08008775 	.word	0x08008775
 8008834:	2400133c 	.word	0x2400133c

08008838 <_fwalk_sglue>:
 8008838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800883c:	4607      	mov	r7, r0
 800883e:	4688      	mov	r8, r1
 8008840:	4614      	mov	r4, r2
 8008842:	2600      	movs	r6, #0
 8008844:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008848:	f1b9 0901 	subs.w	r9, r9, #1
 800884c:	d505      	bpl.n	800885a <_fwalk_sglue+0x22>
 800884e:	6824      	ldr	r4, [r4, #0]
 8008850:	2c00      	cmp	r4, #0
 8008852:	d1f7      	bne.n	8008844 <_fwalk_sglue+0xc>
 8008854:	4630      	mov	r0, r6
 8008856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800885a:	89ab      	ldrh	r3, [r5, #12]
 800885c:	2b01      	cmp	r3, #1
 800885e:	d907      	bls.n	8008870 <_fwalk_sglue+0x38>
 8008860:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008864:	3301      	adds	r3, #1
 8008866:	d003      	beq.n	8008870 <_fwalk_sglue+0x38>
 8008868:	4629      	mov	r1, r5
 800886a:	4638      	mov	r0, r7
 800886c:	47c0      	blx	r8
 800886e:	4306      	orrs	r6, r0
 8008870:	3568      	adds	r5, #104	@ 0x68
 8008872:	e7e9      	b.n	8008848 <_fwalk_sglue+0x10>

08008874 <__sread>:
 8008874:	b510      	push	{r4, lr}
 8008876:	460c      	mov	r4, r1
 8008878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800887c:	f000 f868 	bl	8008950 <_read_r>
 8008880:	2800      	cmp	r0, #0
 8008882:	bfab      	itete	ge
 8008884:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008886:	89a3      	ldrhlt	r3, [r4, #12]
 8008888:	181b      	addge	r3, r3, r0
 800888a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800888e:	bfac      	ite	ge
 8008890:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008892:	81a3      	strhlt	r3, [r4, #12]
 8008894:	bd10      	pop	{r4, pc}

08008896 <__swrite>:
 8008896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800889a:	461f      	mov	r7, r3
 800889c:	898b      	ldrh	r3, [r1, #12]
 800889e:	05db      	lsls	r3, r3, #23
 80088a0:	4605      	mov	r5, r0
 80088a2:	460c      	mov	r4, r1
 80088a4:	4616      	mov	r6, r2
 80088a6:	d505      	bpl.n	80088b4 <__swrite+0x1e>
 80088a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088ac:	2302      	movs	r3, #2
 80088ae:	2200      	movs	r2, #0
 80088b0:	f000 f83c 	bl	800892c <_lseek_r>
 80088b4:	89a3      	ldrh	r3, [r4, #12]
 80088b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80088be:	81a3      	strh	r3, [r4, #12]
 80088c0:	4632      	mov	r2, r6
 80088c2:	463b      	mov	r3, r7
 80088c4:	4628      	mov	r0, r5
 80088c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088ca:	f000 b853 	b.w	8008974 <_write_r>

080088ce <__sseek>:
 80088ce:	b510      	push	{r4, lr}
 80088d0:	460c      	mov	r4, r1
 80088d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088d6:	f000 f829 	bl	800892c <_lseek_r>
 80088da:	1c43      	adds	r3, r0, #1
 80088dc:	89a3      	ldrh	r3, [r4, #12]
 80088de:	bf15      	itete	ne
 80088e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80088e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80088e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80088ea:	81a3      	strheq	r3, [r4, #12]
 80088ec:	bf18      	it	ne
 80088ee:	81a3      	strhne	r3, [r4, #12]
 80088f0:	bd10      	pop	{r4, pc}

080088f2 <__sclose>:
 80088f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088f6:	f000 b809 	b.w	800890c <_close_r>

080088fa <memset>:
 80088fa:	4402      	add	r2, r0
 80088fc:	4603      	mov	r3, r0
 80088fe:	4293      	cmp	r3, r2
 8008900:	d100      	bne.n	8008904 <memset+0xa>
 8008902:	4770      	bx	lr
 8008904:	f803 1b01 	strb.w	r1, [r3], #1
 8008908:	e7f9      	b.n	80088fe <memset+0x4>
	...

0800890c <_close_r>:
 800890c:	b538      	push	{r3, r4, r5, lr}
 800890e:	4d06      	ldr	r5, [pc, #24]	@ (8008928 <_close_r+0x1c>)
 8008910:	2300      	movs	r3, #0
 8008912:	4604      	mov	r4, r0
 8008914:	4608      	mov	r0, r1
 8008916:	602b      	str	r3, [r5, #0]
 8008918:	f7f8 fa02 	bl	8000d20 <_close>
 800891c:	1c43      	adds	r3, r0, #1
 800891e:	d102      	bne.n	8008926 <_close_r+0x1a>
 8008920:	682b      	ldr	r3, [r5, #0]
 8008922:	b103      	cbz	r3, 8008926 <_close_r+0x1a>
 8008924:	6023      	str	r3, [r4, #0]
 8008926:	bd38      	pop	{r3, r4, r5, pc}
 8008928:	24001340 	.word	0x24001340

0800892c <_lseek_r>:
 800892c:	b538      	push	{r3, r4, r5, lr}
 800892e:	4d07      	ldr	r5, [pc, #28]	@ (800894c <_lseek_r+0x20>)
 8008930:	4604      	mov	r4, r0
 8008932:	4608      	mov	r0, r1
 8008934:	4611      	mov	r1, r2
 8008936:	2200      	movs	r2, #0
 8008938:	602a      	str	r2, [r5, #0]
 800893a:	461a      	mov	r2, r3
 800893c:	f7f8 fa17 	bl	8000d6e <_lseek>
 8008940:	1c43      	adds	r3, r0, #1
 8008942:	d102      	bne.n	800894a <_lseek_r+0x1e>
 8008944:	682b      	ldr	r3, [r5, #0]
 8008946:	b103      	cbz	r3, 800894a <_lseek_r+0x1e>
 8008948:	6023      	str	r3, [r4, #0]
 800894a:	bd38      	pop	{r3, r4, r5, pc}
 800894c:	24001340 	.word	0x24001340

08008950 <_read_r>:
 8008950:	b538      	push	{r3, r4, r5, lr}
 8008952:	4d07      	ldr	r5, [pc, #28]	@ (8008970 <_read_r+0x20>)
 8008954:	4604      	mov	r4, r0
 8008956:	4608      	mov	r0, r1
 8008958:	4611      	mov	r1, r2
 800895a:	2200      	movs	r2, #0
 800895c:	602a      	str	r2, [r5, #0]
 800895e:	461a      	mov	r2, r3
 8008960:	f7f8 f9a5 	bl	8000cae <_read>
 8008964:	1c43      	adds	r3, r0, #1
 8008966:	d102      	bne.n	800896e <_read_r+0x1e>
 8008968:	682b      	ldr	r3, [r5, #0]
 800896a:	b103      	cbz	r3, 800896e <_read_r+0x1e>
 800896c:	6023      	str	r3, [r4, #0]
 800896e:	bd38      	pop	{r3, r4, r5, pc}
 8008970:	24001340 	.word	0x24001340

08008974 <_write_r>:
 8008974:	b538      	push	{r3, r4, r5, lr}
 8008976:	4d07      	ldr	r5, [pc, #28]	@ (8008994 <_write_r+0x20>)
 8008978:	4604      	mov	r4, r0
 800897a:	4608      	mov	r0, r1
 800897c:	4611      	mov	r1, r2
 800897e:	2200      	movs	r2, #0
 8008980:	602a      	str	r2, [r5, #0]
 8008982:	461a      	mov	r2, r3
 8008984:	f7f8 f9b0 	bl	8000ce8 <_write>
 8008988:	1c43      	adds	r3, r0, #1
 800898a:	d102      	bne.n	8008992 <_write_r+0x1e>
 800898c:	682b      	ldr	r3, [r5, #0]
 800898e:	b103      	cbz	r3, 8008992 <_write_r+0x1e>
 8008990:	6023      	str	r3, [r4, #0]
 8008992:	bd38      	pop	{r3, r4, r5, pc}
 8008994:	24001340 	.word	0x24001340

08008998 <__errno>:
 8008998:	4b01      	ldr	r3, [pc, #4]	@ (80089a0 <__errno+0x8>)
 800899a:	6818      	ldr	r0, [r3, #0]
 800899c:	4770      	bx	lr
 800899e:	bf00      	nop
 80089a0:	2400001c 	.word	0x2400001c

080089a4 <__libc_init_array>:
 80089a4:	b570      	push	{r4, r5, r6, lr}
 80089a6:	4d0d      	ldr	r5, [pc, #52]	@ (80089dc <__libc_init_array+0x38>)
 80089a8:	4c0d      	ldr	r4, [pc, #52]	@ (80089e0 <__libc_init_array+0x3c>)
 80089aa:	1b64      	subs	r4, r4, r5
 80089ac:	10a4      	asrs	r4, r4, #2
 80089ae:	2600      	movs	r6, #0
 80089b0:	42a6      	cmp	r6, r4
 80089b2:	d109      	bne.n	80089c8 <__libc_init_array+0x24>
 80089b4:	4d0b      	ldr	r5, [pc, #44]	@ (80089e4 <__libc_init_array+0x40>)
 80089b6:	4c0c      	ldr	r4, [pc, #48]	@ (80089e8 <__libc_init_array+0x44>)
 80089b8:	f001 fbfa 	bl	800a1b0 <_init>
 80089bc:	1b64      	subs	r4, r4, r5
 80089be:	10a4      	asrs	r4, r4, #2
 80089c0:	2600      	movs	r6, #0
 80089c2:	42a6      	cmp	r6, r4
 80089c4:	d105      	bne.n	80089d2 <__libc_init_array+0x2e>
 80089c6:	bd70      	pop	{r4, r5, r6, pc}
 80089c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80089cc:	4798      	blx	r3
 80089ce:	3601      	adds	r6, #1
 80089d0:	e7ee      	b.n	80089b0 <__libc_init_array+0xc>
 80089d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80089d6:	4798      	blx	r3
 80089d8:	3601      	adds	r6, #1
 80089da:	e7f2      	b.n	80089c2 <__libc_init_array+0x1e>
 80089dc:	0800a4a0 	.word	0x0800a4a0
 80089e0:	0800a4a0 	.word	0x0800a4a0
 80089e4:	0800a4a0 	.word	0x0800a4a0
 80089e8:	0800a4a4 	.word	0x0800a4a4

080089ec <__retarget_lock_init_recursive>:
 80089ec:	4770      	bx	lr

080089ee <__retarget_lock_acquire_recursive>:
 80089ee:	4770      	bx	lr

080089f0 <__retarget_lock_release_recursive>:
 80089f0:	4770      	bx	lr
	...

080089f4 <__assert_func>:
 80089f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80089f6:	4614      	mov	r4, r2
 80089f8:	461a      	mov	r2, r3
 80089fa:	4b09      	ldr	r3, [pc, #36]	@ (8008a20 <__assert_func+0x2c>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4605      	mov	r5, r0
 8008a00:	68d8      	ldr	r0, [r3, #12]
 8008a02:	b14c      	cbz	r4, 8008a18 <__assert_func+0x24>
 8008a04:	4b07      	ldr	r3, [pc, #28]	@ (8008a24 <__assert_func+0x30>)
 8008a06:	9100      	str	r1, [sp, #0]
 8008a08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a0c:	4906      	ldr	r1, [pc, #24]	@ (8008a28 <__assert_func+0x34>)
 8008a0e:	462b      	mov	r3, r5
 8008a10:	f000 f9ba 	bl	8008d88 <fiprintf>
 8008a14:	f000 f9da 	bl	8008dcc <abort>
 8008a18:	4b04      	ldr	r3, [pc, #16]	@ (8008a2c <__assert_func+0x38>)
 8008a1a:	461c      	mov	r4, r3
 8008a1c:	e7f3      	b.n	8008a06 <__assert_func+0x12>
 8008a1e:	bf00      	nop
 8008a20:	2400001c 	.word	0x2400001c
 8008a24:	0800a24f 	.word	0x0800a24f
 8008a28:	0800a25c 	.word	0x0800a25c
 8008a2c:	0800a28a 	.word	0x0800a28a

08008a30 <_free_r>:
 8008a30:	b538      	push	{r3, r4, r5, lr}
 8008a32:	4605      	mov	r5, r0
 8008a34:	2900      	cmp	r1, #0
 8008a36:	d041      	beq.n	8008abc <_free_r+0x8c>
 8008a38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a3c:	1f0c      	subs	r4, r1, #4
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	bfb8      	it	lt
 8008a42:	18e4      	addlt	r4, r4, r3
 8008a44:	f000 f8e8 	bl	8008c18 <__malloc_lock>
 8008a48:	4a1d      	ldr	r2, [pc, #116]	@ (8008ac0 <_free_r+0x90>)
 8008a4a:	6813      	ldr	r3, [r2, #0]
 8008a4c:	b933      	cbnz	r3, 8008a5c <_free_r+0x2c>
 8008a4e:	6063      	str	r3, [r4, #4]
 8008a50:	6014      	str	r4, [r2, #0]
 8008a52:	4628      	mov	r0, r5
 8008a54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a58:	f000 b8e4 	b.w	8008c24 <__malloc_unlock>
 8008a5c:	42a3      	cmp	r3, r4
 8008a5e:	d908      	bls.n	8008a72 <_free_r+0x42>
 8008a60:	6820      	ldr	r0, [r4, #0]
 8008a62:	1821      	adds	r1, r4, r0
 8008a64:	428b      	cmp	r3, r1
 8008a66:	bf01      	itttt	eq
 8008a68:	6819      	ldreq	r1, [r3, #0]
 8008a6a:	685b      	ldreq	r3, [r3, #4]
 8008a6c:	1809      	addeq	r1, r1, r0
 8008a6e:	6021      	streq	r1, [r4, #0]
 8008a70:	e7ed      	b.n	8008a4e <_free_r+0x1e>
 8008a72:	461a      	mov	r2, r3
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	b10b      	cbz	r3, 8008a7c <_free_r+0x4c>
 8008a78:	42a3      	cmp	r3, r4
 8008a7a:	d9fa      	bls.n	8008a72 <_free_r+0x42>
 8008a7c:	6811      	ldr	r1, [r2, #0]
 8008a7e:	1850      	adds	r0, r2, r1
 8008a80:	42a0      	cmp	r0, r4
 8008a82:	d10b      	bne.n	8008a9c <_free_r+0x6c>
 8008a84:	6820      	ldr	r0, [r4, #0]
 8008a86:	4401      	add	r1, r0
 8008a88:	1850      	adds	r0, r2, r1
 8008a8a:	4283      	cmp	r3, r0
 8008a8c:	6011      	str	r1, [r2, #0]
 8008a8e:	d1e0      	bne.n	8008a52 <_free_r+0x22>
 8008a90:	6818      	ldr	r0, [r3, #0]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	6053      	str	r3, [r2, #4]
 8008a96:	4408      	add	r0, r1
 8008a98:	6010      	str	r0, [r2, #0]
 8008a9a:	e7da      	b.n	8008a52 <_free_r+0x22>
 8008a9c:	d902      	bls.n	8008aa4 <_free_r+0x74>
 8008a9e:	230c      	movs	r3, #12
 8008aa0:	602b      	str	r3, [r5, #0]
 8008aa2:	e7d6      	b.n	8008a52 <_free_r+0x22>
 8008aa4:	6820      	ldr	r0, [r4, #0]
 8008aa6:	1821      	adds	r1, r4, r0
 8008aa8:	428b      	cmp	r3, r1
 8008aaa:	bf04      	itt	eq
 8008aac:	6819      	ldreq	r1, [r3, #0]
 8008aae:	685b      	ldreq	r3, [r3, #4]
 8008ab0:	6063      	str	r3, [r4, #4]
 8008ab2:	bf04      	itt	eq
 8008ab4:	1809      	addeq	r1, r1, r0
 8008ab6:	6021      	streq	r1, [r4, #0]
 8008ab8:	6054      	str	r4, [r2, #4]
 8008aba:	e7ca      	b.n	8008a52 <_free_r+0x22>
 8008abc:	bd38      	pop	{r3, r4, r5, pc}
 8008abe:	bf00      	nop
 8008ac0:	2400134c 	.word	0x2400134c

08008ac4 <malloc>:
 8008ac4:	4b02      	ldr	r3, [pc, #8]	@ (8008ad0 <malloc+0xc>)
 8008ac6:	4601      	mov	r1, r0
 8008ac8:	6818      	ldr	r0, [r3, #0]
 8008aca:	f000 b825 	b.w	8008b18 <_malloc_r>
 8008ace:	bf00      	nop
 8008ad0:	2400001c 	.word	0x2400001c

08008ad4 <sbrk_aligned>:
 8008ad4:	b570      	push	{r4, r5, r6, lr}
 8008ad6:	4e0f      	ldr	r6, [pc, #60]	@ (8008b14 <sbrk_aligned+0x40>)
 8008ad8:	460c      	mov	r4, r1
 8008ada:	6831      	ldr	r1, [r6, #0]
 8008adc:	4605      	mov	r5, r0
 8008ade:	b911      	cbnz	r1, 8008ae6 <sbrk_aligned+0x12>
 8008ae0:	f000 f964 	bl	8008dac <_sbrk_r>
 8008ae4:	6030      	str	r0, [r6, #0]
 8008ae6:	4621      	mov	r1, r4
 8008ae8:	4628      	mov	r0, r5
 8008aea:	f000 f95f 	bl	8008dac <_sbrk_r>
 8008aee:	1c43      	adds	r3, r0, #1
 8008af0:	d103      	bne.n	8008afa <sbrk_aligned+0x26>
 8008af2:	f04f 34ff 	mov.w	r4, #4294967295
 8008af6:	4620      	mov	r0, r4
 8008af8:	bd70      	pop	{r4, r5, r6, pc}
 8008afa:	1cc4      	adds	r4, r0, #3
 8008afc:	f024 0403 	bic.w	r4, r4, #3
 8008b00:	42a0      	cmp	r0, r4
 8008b02:	d0f8      	beq.n	8008af6 <sbrk_aligned+0x22>
 8008b04:	1a21      	subs	r1, r4, r0
 8008b06:	4628      	mov	r0, r5
 8008b08:	f000 f950 	bl	8008dac <_sbrk_r>
 8008b0c:	3001      	adds	r0, #1
 8008b0e:	d1f2      	bne.n	8008af6 <sbrk_aligned+0x22>
 8008b10:	e7ef      	b.n	8008af2 <sbrk_aligned+0x1e>
 8008b12:	bf00      	nop
 8008b14:	24001348 	.word	0x24001348

08008b18 <_malloc_r>:
 8008b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b1c:	1ccd      	adds	r5, r1, #3
 8008b1e:	f025 0503 	bic.w	r5, r5, #3
 8008b22:	3508      	adds	r5, #8
 8008b24:	2d0c      	cmp	r5, #12
 8008b26:	bf38      	it	cc
 8008b28:	250c      	movcc	r5, #12
 8008b2a:	2d00      	cmp	r5, #0
 8008b2c:	4606      	mov	r6, r0
 8008b2e:	db01      	blt.n	8008b34 <_malloc_r+0x1c>
 8008b30:	42a9      	cmp	r1, r5
 8008b32:	d904      	bls.n	8008b3e <_malloc_r+0x26>
 8008b34:	230c      	movs	r3, #12
 8008b36:	6033      	str	r3, [r6, #0]
 8008b38:	2000      	movs	r0, #0
 8008b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008c14 <_malloc_r+0xfc>
 8008b42:	f000 f869 	bl	8008c18 <__malloc_lock>
 8008b46:	f8d8 3000 	ldr.w	r3, [r8]
 8008b4a:	461c      	mov	r4, r3
 8008b4c:	bb44      	cbnz	r4, 8008ba0 <_malloc_r+0x88>
 8008b4e:	4629      	mov	r1, r5
 8008b50:	4630      	mov	r0, r6
 8008b52:	f7ff ffbf 	bl	8008ad4 <sbrk_aligned>
 8008b56:	1c43      	adds	r3, r0, #1
 8008b58:	4604      	mov	r4, r0
 8008b5a:	d158      	bne.n	8008c0e <_malloc_r+0xf6>
 8008b5c:	f8d8 4000 	ldr.w	r4, [r8]
 8008b60:	4627      	mov	r7, r4
 8008b62:	2f00      	cmp	r7, #0
 8008b64:	d143      	bne.n	8008bee <_malloc_r+0xd6>
 8008b66:	2c00      	cmp	r4, #0
 8008b68:	d04b      	beq.n	8008c02 <_malloc_r+0xea>
 8008b6a:	6823      	ldr	r3, [r4, #0]
 8008b6c:	4639      	mov	r1, r7
 8008b6e:	4630      	mov	r0, r6
 8008b70:	eb04 0903 	add.w	r9, r4, r3
 8008b74:	f000 f91a 	bl	8008dac <_sbrk_r>
 8008b78:	4581      	cmp	r9, r0
 8008b7a:	d142      	bne.n	8008c02 <_malloc_r+0xea>
 8008b7c:	6821      	ldr	r1, [r4, #0]
 8008b7e:	1a6d      	subs	r5, r5, r1
 8008b80:	4629      	mov	r1, r5
 8008b82:	4630      	mov	r0, r6
 8008b84:	f7ff ffa6 	bl	8008ad4 <sbrk_aligned>
 8008b88:	3001      	adds	r0, #1
 8008b8a:	d03a      	beq.n	8008c02 <_malloc_r+0xea>
 8008b8c:	6823      	ldr	r3, [r4, #0]
 8008b8e:	442b      	add	r3, r5
 8008b90:	6023      	str	r3, [r4, #0]
 8008b92:	f8d8 3000 	ldr.w	r3, [r8]
 8008b96:	685a      	ldr	r2, [r3, #4]
 8008b98:	bb62      	cbnz	r2, 8008bf4 <_malloc_r+0xdc>
 8008b9a:	f8c8 7000 	str.w	r7, [r8]
 8008b9e:	e00f      	b.n	8008bc0 <_malloc_r+0xa8>
 8008ba0:	6822      	ldr	r2, [r4, #0]
 8008ba2:	1b52      	subs	r2, r2, r5
 8008ba4:	d420      	bmi.n	8008be8 <_malloc_r+0xd0>
 8008ba6:	2a0b      	cmp	r2, #11
 8008ba8:	d917      	bls.n	8008bda <_malloc_r+0xc2>
 8008baa:	1961      	adds	r1, r4, r5
 8008bac:	42a3      	cmp	r3, r4
 8008bae:	6025      	str	r5, [r4, #0]
 8008bb0:	bf18      	it	ne
 8008bb2:	6059      	strne	r1, [r3, #4]
 8008bb4:	6863      	ldr	r3, [r4, #4]
 8008bb6:	bf08      	it	eq
 8008bb8:	f8c8 1000 	streq.w	r1, [r8]
 8008bbc:	5162      	str	r2, [r4, r5]
 8008bbe:	604b      	str	r3, [r1, #4]
 8008bc0:	4630      	mov	r0, r6
 8008bc2:	f000 f82f 	bl	8008c24 <__malloc_unlock>
 8008bc6:	f104 000b 	add.w	r0, r4, #11
 8008bca:	1d23      	adds	r3, r4, #4
 8008bcc:	f020 0007 	bic.w	r0, r0, #7
 8008bd0:	1ac2      	subs	r2, r0, r3
 8008bd2:	bf1c      	itt	ne
 8008bd4:	1a1b      	subne	r3, r3, r0
 8008bd6:	50a3      	strne	r3, [r4, r2]
 8008bd8:	e7af      	b.n	8008b3a <_malloc_r+0x22>
 8008bda:	6862      	ldr	r2, [r4, #4]
 8008bdc:	42a3      	cmp	r3, r4
 8008bde:	bf0c      	ite	eq
 8008be0:	f8c8 2000 	streq.w	r2, [r8]
 8008be4:	605a      	strne	r2, [r3, #4]
 8008be6:	e7eb      	b.n	8008bc0 <_malloc_r+0xa8>
 8008be8:	4623      	mov	r3, r4
 8008bea:	6864      	ldr	r4, [r4, #4]
 8008bec:	e7ae      	b.n	8008b4c <_malloc_r+0x34>
 8008bee:	463c      	mov	r4, r7
 8008bf0:	687f      	ldr	r7, [r7, #4]
 8008bf2:	e7b6      	b.n	8008b62 <_malloc_r+0x4a>
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	42a3      	cmp	r3, r4
 8008bfa:	d1fb      	bne.n	8008bf4 <_malloc_r+0xdc>
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	6053      	str	r3, [r2, #4]
 8008c00:	e7de      	b.n	8008bc0 <_malloc_r+0xa8>
 8008c02:	230c      	movs	r3, #12
 8008c04:	6033      	str	r3, [r6, #0]
 8008c06:	4630      	mov	r0, r6
 8008c08:	f000 f80c 	bl	8008c24 <__malloc_unlock>
 8008c0c:	e794      	b.n	8008b38 <_malloc_r+0x20>
 8008c0e:	6005      	str	r5, [r0, #0]
 8008c10:	e7d6      	b.n	8008bc0 <_malloc_r+0xa8>
 8008c12:	bf00      	nop
 8008c14:	2400134c 	.word	0x2400134c

08008c18 <__malloc_lock>:
 8008c18:	4801      	ldr	r0, [pc, #4]	@ (8008c20 <__malloc_lock+0x8>)
 8008c1a:	f7ff bee8 	b.w	80089ee <__retarget_lock_acquire_recursive>
 8008c1e:	bf00      	nop
 8008c20:	24001344 	.word	0x24001344

08008c24 <__malloc_unlock>:
 8008c24:	4801      	ldr	r0, [pc, #4]	@ (8008c2c <__malloc_unlock+0x8>)
 8008c26:	f7ff bee3 	b.w	80089f0 <__retarget_lock_release_recursive>
 8008c2a:	bf00      	nop
 8008c2c:	24001344 	.word	0x24001344

08008c30 <__sflush_r>:
 8008c30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c38:	0716      	lsls	r6, r2, #28
 8008c3a:	4605      	mov	r5, r0
 8008c3c:	460c      	mov	r4, r1
 8008c3e:	d454      	bmi.n	8008cea <__sflush_r+0xba>
 8008c40:	684b      	ldr	r3, [r1, #4]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	dc02      	bgt.n	8008c4c <__sflush_r+0x1c>
 8008c46:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	dd48      	ble.n	8008cde <__sflush_r+0xae>
 8008c4c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c4e:	2e00      	cmp	r6, #0
 8008c50:	d045      	beq.n	8008cde <__sflush_r+0xae>
 8008c52:	2300      	movs	r3, #0
 8008c54:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008c58:	682f      	ldr	r7, [r5, #0]
 8008c5a:	6a21      	ldr	r1, [r4, #32]
 8008c5c:	602b      	str	r3, [r5, #0]
 8008c5e:	d030      	beq.n	8008cc2 <__sflush_r+0x92>
 8008c60:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008c62:	89a3      	ldrh	r3, [r4, #12]
 8008c64:	0759      	lsls	r1, r3, #29
 8008c66:	d505      	bpl.n	8008c74 <__sflush_r+0x44>
 8008c68:	6863      	ldr	r3, [r4, #4]
 8008c6a:	1ad2      	subs	r2, r2, r3
 8008c6c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008c6e:	b10b      	cbz	r3, 8008c74 <__sflush_r+0x44>
 8008c70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008c72:	1ad2      	subs	r2, r2, r3
 8008c74:	2300      	movs	r3, #0
 8008c76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c78:	6a21      	ldr	r1, [r4, #32]
 8008c7a:	4628      	mov	r0, r5
 8008c7c:	47b0      	blx	r6
 8008c7e:	1c43      	adds	r3, r0, #1
 8008c80:	89a3      	ldrh	r3, [r4, #12]
 8008c82:	d106      	bne.n	8008c92 <__sflush_r+0x62>
 8008c84:	6829      	ldr	r1, [r5, #0]
 8008c86:	291d      	cmp	r1, #29
 8008c88:	d82b      	bhi.n	8008ce2 <__sflush_r+0xb2>
 8008c8a:	4a2a      	ldr	r2, [pc, #168]	@ (8008d34 <__sflush_r+0x104>)
 8008c8c:	40ca      	lsrs	r2, r1
 8008c8e:	07d6      	lsls	r6, r2, #31
 8008c90:	d527      	bpl.n	8008ce2 <__sflush_r+0xb2>
 8008c92:	2200      	movs	r2, #0
 8008c94:	6062      	str	r2, [r4, #4]
 8008c96:	04d9      	lsls	r1, r3, #19
 8008c98:	6922      	ldr	r2, [r4, #16]
 8008c9a:	6022      	str	r2, [r4, #0]
 8008c9c:	d504      	bpl.n	8008ca8 <__sflush_r+0x78>
 8008c9e:	1c42      	adds	r2, r0, #1
 8008ca0:	d101      	bne.n	8008ca6 <__sflush_r+0x76>
 8008ca2:	682b      	ldr	r3, [r5, #0]
 8008ca4:	b903      	cbnz	r3, 8008ca8 <__sflush_r+0x78>
 8008ca6:	6560      	str	r0, [r4, #84]	@ 0x54
 8008ca8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008caa:	602f      	str	r7, [r5, #0]
 8008cac:	b1b9      	cbz	r1, 8008cde <__sflush_r+0xae>
 8008cae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008cb2:	4299      	cmp	r1, r3
 8008cb4:	d002      	beq.n	8008cbc <__sflush_r+0x8c>
 8008cb6:	4628      	mov	r0, r5
 8008cb8:	f7ff feba 	bl	8008a30 <_free_r>
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	6363      	str	r3, [r4, #52]	@ 0x34
 8008cc0:	e00d      	b.n	8008cde <__sflush_r+0xae>
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	4628      	mov	r0, r5
 8008cc6:	47b0      	blx	r6
 8008cc8:	4602      	mov	r2, r0
 8008cca:	1c50      	adds	r0, r2, #1
 8008ccc:	d1c9      	bne.n	8008c62 <__sflush_r+0x32>
 8008cce:	682b      	ldr	r3, [r5, #0]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d0c6      	beq.n	8008c62 <__sflush_r+0x32>
 8008cd4:	2b1d      	cmp	r3, #29
 8008cd6:	d001      	beq.n	8008cdc <__sflush_r+0xac>
 8008cd8:	2b16      	cmp	r3, #22
 8008cda:	d11e      	bne.n	8008d1a <__sflush_r+0xea>
 8008cdc:	602f      	str	r7, [r5, #0]
 8008cde:	2000      	movs	r0, #0
 8008ce0:	e022      	b.n	8008d28 <__sflush_r+0xf8>
 8008ce2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ce6:	b21b      	sxth	r3, r3
 8008ce8:	e01b      	b.n	8008d22 <__sflush_r+0xf2>
 8008cea:	690f      	ldr	r7, [r1, #16]
 8008cec:	2f00      	cmp	r7, #0
 8008cee:	d0f6      	beq.n	8008cde <__sflush_r+0xae>
 8008cf0:	0793      	lsls	r3, r2, #30
 8008cf2:	680e      	ldr	r6, [r1, #0]
 8008cf4:	bf08      	it	eq
 8008cf6:	694b      	ldreq	r3, [r1, #20]
 8008cf8:	600f      	str	r7, [r1, #0]
 8008cfa:	bf18      	it	ne
 8008cfc:	2300      	movne	r3, #0
 8008cfe:	eba6 0807 	sub.w	r8, r6, r7
 8008d02:	608b      	str	r3, [r1, #8]
 8008d04:	f1b8 0f00 	cmp.w	r8, #0
 8008d08:	dde9      	ble.n	8008cde <__sflush_r+0xae>
 8008d0a:	6a21      	ldr	r1, [r4, #32]
 8008d0c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008d0e:	4643      	mov	r3, r8
 8008d10:	463a      	mov	r2, r7
 8008d12:	4628      	mov	r0, r5
 8008d14:	47b0      	blx	r6
 8008d16:	2800      	cmp	r0, #0
 8008d18:	dc08      	bgt.n	8008d2c <__sflush_r+0xfc>
 8008d1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d22:	81a3      	strh	r3, [r4, #12]
 8008d24:	f04f 30ff 	mov.w	r0, #4294967295
 8008d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d2c:	4407      	add	r7, r0
 8008d2e:	eba8 0800 	sub.w	r8, r8, r0
 8008d32:	e7e7      	b.n	8008d04 <__sflush_r+0xd4>
 8008d34:	20400001 	.word	0x20400001

08008d38 <_fflush_r>:
 8008d38:	b538      	push	{r3, r4, r5, lr}
 8008d3a:	690b      	ldr	r3, [r1, #16]
 8008d3c:	4605      	mov	r5, r0
 8008d3e:	460c      	mov	r4, r1
 8008d40:	b913      	cbnz	r3, 8008d48 <_fflush_r+0x10>
 8008d42:	2500      	movs	r5, #0
 8008d44:	4628      	mov	r0, r5
 8008d46:	bd38      	pop	{r3, r4, r5, pc}
 8008d48:	b118      	cbz	r0, 8008d52 <_fflush_r+0x1a>
 8008d4a:	6a03      	ldr	r3, [r0, #32]
 8008d4c:	b90b      	cbnz	r3, 8008d52 <_fflush_r+0x1a>
 8008d4e:	f7ff fd5b 	bl	8008808 <__sinit>
 8008d52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d0f3      	beq.n	8008d42 <_fflush_r+0xa>
 8008d5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008d5c:	07d0      	lsls	r0, r2, #31
 8008d5e:	d404      	bmi.n	8008d6a <_fflush_r+0x32>
 8008d60:	0599      	lsls	r1, r3, #22
 8008d62:	d402      	bmi.n	8008d6a <_fflush_r+0x32>
 8008d64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d66:	f7ff fe42 	bl	80089ee <__retarget_lock_acquire_recursive>
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	4621      	mov	r1, r4
 8008d6e:	f7ff ff5f 	bl	8008c30 <__sflush_r>
 8008d72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d74:	07da      	lsls	r2, r3, #31
 8008d76:	4605      	mov	r5, r0
 8008d78:	d4e4      	bmi.n	8008d44 <_fflush_r+0xc>
 8008d7a:	89a3      	ldrh	r3, [r4, #12]
 8008d7c:	059b      	lsls	r3, r3, #22
 8008d7e:	d4e1      	bmi.n	8008d44 <_fflush_r+0xc>
 8008d80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d82:	f7ff fe35 	bl	80089f0 <__retarget_lock_release_recursive>
 8008d86:	e7dd      	b.n	8008d44 <_fflush_r+0xc>

08008d88 <fiprintf>:
 8008d88:	b40e      	push	{r1, r2, r3}
 8008d8a:	b503      	push	{r0, r1, lr}
 8008d8c:	4601      	mov	r1, r0
 8008d8e:	ab03      	add	r3, sp, #12
 8008d90:	4805      	ldr	r0, [pc, #20]	@ (8008da8 <fiprintf+0x20>)
 8008d92:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d96:	6800      	ldr	r0, [r0, #0]
 8008d98:	9301      	str	r3, [sp, #4]
 8008d9a:	f000 f847 	bl	8008e2c <_vfiprintf_r>
 8008d9e:	b002      	add	sp, #8
 8008da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008da4:	b003      	add	sp, #12
 8008da6:	4770      	bx	lr
 8008da8:	2400001c 	.word	0x2400001c

08008dac <_sbrk_r>:
 8008dac:	b538      	push	{r3, r4, r5, lr}
 8008dae:	4d06      	ldr	r5, [pc, #24]	@ (8008dc8 <_sbrk_r+0x1c>)
 8008db0:	2300      	movs	r3, #0
 8008db2:	4604      	mov	r4, r0
 8008db4:	4608      	mov	r0, r1
 8008db6:	602b      	str	r3, [r5, #0]
 8008db8:	f7f7 ffe6 	bl	8000d88 <_sbrk>
 8008dbc:	1c43      	adds	r3, r0, #1
 8008dbe:	d102      	bne.n	8008dc6 <_sbrk_r+0x1a>
 8008dc0:	682b      	ldr	r3, [r5, #0]
 8008dc2:	b103      	cbz	r3, 8008dc6 <_sbrk_r+0x1a>
 8008dc4:	6023      	str	r3, [r4, #0]
 8008dc6:	bd38      	pop	{r3, r4, r5, pc}
 8008dc8:	24001340 	.word	0x24001340

08008dcc <abort>:
 8008dcc:	b508      	push	{r3, lr}
 8008dce:	2006      	movs	r0, #6
 8008dd0:	f000 fb8c 	bl	80094ec <raise>
 8008dd4:	2001      	movs	r0, #1
 8008dd6:	f7f7 ff5f 	bl	8000c98 <_exit>

08008dda <__sfputc_r>:
 8008dda:	6893      	ldr	r3, [r2, #8]
 8008ddc:	3b01      	subs	r3, #1
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	b410      	push	{r4}
 8008de2:	6093      	str	r3, [r2, #8]
 8008de4:	da08      	bge.n	8008df8 <__sfputc_r+0x1e>
 8008de6:	6994      	ldr	r4, [r2, #24]
 8008de8:	42a3      	cmp	r3, r4
 8008dea:	db01      	blt.n	8008df0 <__sfputc_r+0x16>
 8008dec:	290a      	cmp	r1, #10
 8008dee:	d103      	bne.n	8008df8 <__sfputc_r+0x1e>
 8008df0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008df4:	f000 babe 	b.w	8009374 <__swbuf_r>
 8008df8:	6813      	ldr	r3, [r2, #0]
 8008dfa:	1c58      	adds	r0, r3, #1
 8008dfc:	6010      	str	r0, [r2, #0]
 8008dfe:	7019      	strb	r1, [r3, #0]
 8008e00:	4608      	mov	r0, r1
 8008e02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e06:	4770      	bx	lr

08008e08 <__sfputs_r>:
 8008e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e0a:	4606      	mov	r6, r0
 8008e0c:	460f      	mov	r7, r1
 8008e0e:	4614      	mov	r4, r2
 8008e10:	18d5      	adds	r5, r2, r3
 8008e12:	42ac      	cmp	r4, r5
 8008e14:	d101      	bne.n	8008e1a <__sfputs_r+0x12>
 8008e16:	2000      	movs	r0, #0
 8008e18:	e007      	b.n	8008e2a <__sfputs_r+0x22>
 8008e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e1e:	463a      	mov	r2, r7
 8008e20:	4630      	mov	r0, r6
 8008e22:	f7ff ffda 	bl	8008dda <__sfputc_r>
 8008e26:	1c43      	adds	r3, r0, #1
 8008e28:	d1f3      	bne.n	8008e12 <__sfputs_r+0xa>
 8008e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008e2c <_vfiprintf_r>:
 8008e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e30:	460d      	mov	r5, r1
 8008e32:	b09d      	sub	sp, #116	@ 0x74
 8008e34:	4614      	mov	r4, r2
 8008e36:	4698      	mov	r8, r3
 8008e38:	4606      	mov	r6, r0
 8008e3a:	b118      	cbz	r0, 8008e44 <_vfiprintf_r+0x18>
 8008e3c:	6a03      	ldr	r3, [r0, #32]
 8008e3e:	b90b      	cbnz	r3, 8008e44 <_vfiprintf_r+0x18>
 8008e40:	f7ff fce2 	bl	8008808 <__sinit>
 8008e44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e46:	07d9      	lsls	r1, r3, #31
 8008e48:	d405      	bmi.n	8008e56 <_vfiprintf_r+0x2a>
 8008e4a:	89ab      	ldrh	r3, [r5, #12]
 8008e4c:	059a      	lsls	r2, r3, #22
 8008e4e:	d402      	bmi.n	8008e56 <_vfiprintf_r+0x2a>
 8008e50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e52:	f7ff fdcc 	bl	80089ee <__retarget_lock_acquire_recursive>
 8008e56:	89ab      	ldrh	r3, [r5, #12]
 8008e58:	071b      	lsls	r3, r3, #28
 8008e5a:	d501      	bpl.n	8008e60 <_vfiprintf_r+0x34>
 8008e5c:	692b      	ldr	r3, [r5, #16]
 8008e5e:	b99b      	cbnz	r3, 8008e88 <_vfiprintf_r+0x5c>
 8008e60:	4629      	mov	r1, r5
 8008e62:	4630      	mov	r0, r6
 8008e64:	f000 fac4 	bl	80093f0 <__swsetup_r>
 8008e68:	b170      	cbz	r0, 8008e88 <_vfiprintf_r+0x5c>
 8008e6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e6c:	07dc      	lsls	r4, r3, #31
 8008e6e:	d504      	bpl.n	8008e7a <_vfiprintf_r+0x4e>
 8008e70:	f04f 30ff 	mov.w	r0, #4294967295
 8008e74:	b01d      	add	sp, #116	@ 0x74
 8008e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e7a:	89ab      	ldrh	r3, [r5, #12]
 8008e7c:	0598      	lsls	r0, r3, #22
 8008e7e:	d4f7      	bmi.n	8008e70 <_vfiprintf_r+0x44>
 8008e80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e82:	f7ff fdb5 	bl	80089f0 <__retarget_lock_release_recursive>
 8008e86:	e7f3      	b.n	8008e70 <_vfiprintf_r+0x44>
 8008e88:	2300      	movs	r3, #0
 8008e8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e8c:	2320      	movs	r3, #32
 8008e8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008e92:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e96:	2330      	movs	r3, #48	@ 0x30
 8008e98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009048 <_vfiprintf_r+0x21c>
 8008e9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ea0:	f04f 0901 	mov.w	r9, #1
 8008ea4:	4623      	mov	r3, r4
 8008ea6:	469a      	mov	sl, r3
 8008ea8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008eac:	b10a      	cbz	r2, 8008eb2 <_vfiprintf_r+0x86>
 8008eae:	2a25      	cmp	r2, #37	@ 0x25
 8008eb0:	d1f9      	bne.n	8008ea6 <_vfiprintf_r+0x7a>
 8008eb2:	ebba 0b04 	subs.w	fp, sl, r4
 8008eb6:	d00b      	beq.n	8008ed0 <_vfiprintf_r+0xa4>
 8008eb8:	465b      	mov	r3, fp
 8008eba:	4622      	mov	r2, r4
 8008ebc:	4629      	mov	r1, r5
 8008ebe:	4630      	mov	r0, r6
 8008ec0:	f7ff ffa2 	bl	8008e08 <__sfputs_r>
 8008ec4:	3001      	adds	r0, #1
 8008ec6:	f000 80a7 	beq.w	8009018 <_vfiprintf_r+0x1ec>
 8008eca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ecc:	445a      	add	r2, fp
 8008ece:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ed0:	f89a 3000 	ldrb.w	r3, [sl]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	f000 809f 	beq.w	8009018 <_vfiprintf_r+0x1ec>
 8008eda:	2300      	movs	r3, #0
 8008edc:	f04f 32ff 	mov.w	r2, #4294967295
 8008ee0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ee4:	f10a 0a01 	add.w	sl, sl, #1
 8008ee8:	9304      	str	r3, [sp, #16]
 8008eea:	9307      	str	r3, [sp, #28]
 8008eec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008ef0:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ef2:	4654      	mov	r4, sl
 8008ef4:	2205      	movs	r2, #5
 8008ef6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008efa:	4853      	ldr	r0, [pc, #332]	@ (8009048 <_vfiprintf_r+0x21c>)
 8008efc:	f7f7 fa08 	bl	8000310 <memchr>
 8008f00:	9a04      	ldr	r2, [sp, #16]
 8008f02:	b9d8      	cbnz	r0, 8008f3c <_vfiprintf_r+0x110>
 8008f04:	06d1      	lsls	r1, r2, #27
 8008f06:	bf44      	itt	mi
 8008f08:	2320      	movmi	r3, #32
 8008f0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f0e:	0713      	lsls	r3, r2, #28
 8008f10:	bf44      	itt	mi
 8008f12:	232b      	movmi	r3, #43	@ 0x2b
 8008f14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f18:	f89a 3000 	ldrb.w	r3, [sl]
 8008f1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f1e:	d015      	beq.n	8008f4c <_vfiprintf_r+0x120>
 8008f20:	9a07      	ldr	r2, [sp, #28]
 8008f22:	4654      	mov	r4, sl
 8008f24:	2000      	movs	r0, #0
 8008f26:	f04f 0c0a 	mov.w	ip, #10
 8008f2a:	4621      	mov	r1, r4
 8008f2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f30:	3b30      	subs	r3, #48	@ 0x30
 8008f32:	2b09      	cmp	r3, #9
 8008f34:	d94b      	bls.n	8008fce <_vfiprintf_r+0x1a2>
 8008f36:	b1b0      	cbz	r0, 8008f66 <_vfiprintf_r+0x13a>
 8008f38:	9207      	str	r2, [sp, #28]
 8008f3a:	e014      	b.n	8008f66 <_vfiprintf_r+0x13a>
 8008f3c:	eba0 0308 	sub.w	r3, r0, r8
 8008f40:	fa09 f303 	lsl.w	r3, r9, r3
 8008f44:	4313      	orrs	r3, r2
 8008f46:	9304      	str	r3, [sp, #16]
 8008f48:	46a2      	mov	sl, r4
 8008f4a:	e7d2      	b.n	8008ef2 <_vfiprintf_r+0xc6>
 8008f4c:	9b03      	ldr	r3, [sp, #12]
 8008f4e:	1d19      	adds	r1, r3, #4
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	9103      	str	r1, [sp, #12]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	bfbb      	ittet	lt
 8008f58:	425b      	neglt	r3, r3
 8008f5a:	f042 0202 	orrlt.w	r2, r2, #2
 8008f5e:	9307      	strge	r3, [sp, #28]
 8008f60:	9307      	strlt	r3, [sp, #28]
 8008f62:	bfb8      	it	lt
 8008f64:	9204      	strlt	r2, [sp, #16]
 8008f66:	7823      	ldrb	r3, [r4, #0]
 8008f68:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f6a:	d10a      	bne.n	8008f82 <_vfiprintf_r+0x156>
 8008f6c:	7863      	ldrb	r3, [r4, #1]
 8008f6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f70:	d132      	bne.n	8008fd8 <_vfiprintf_r+0x1ac>
 8008f72:	9b03      	ldr	r3, [sp, #12]
 8008f74:	1d1a      	adds	r2, r3, #4
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	9203      	str	r2, [sp, #12]
 8008f7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008f7e:	3402      	adds	r4, #2
 8008f80:	9305      	str	r3, [sp, #20]
 8008f82:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009058 <_vfiprintf_r+0x22c>
 8008f86:	7821      	ldrb	r1, [r4, #0]
 8008f88:	2203      	movs	r2, #3
 8008f8a:	4650      	mov	r0, sl
 8008f8c:	f7f7 f9c0 	bl	8000310 <memchr>
 8008f90:	b138      	cbz	r0, 8008fa2 <_vfiprintf_r+0x176>
 8008f92:	9b04      	ldr	r3, [sp, #16]
 8008f94:	eba0 000a 	sub.w	r0, r0, sl
 8008f98:	2240      	movs	r2, #64	@ 0x40
 8008f9a:	4082      	lsls	r2, r0
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	3401      	adds	r4, #1
 8008fa0:	9304      	str	r3, [sp, #16]
 8008fa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fa6:	4829      	ldr	r0, [pc, #164]	@ (800904c <_vfiprintf_r+0x220>)
 8008fa8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008fac:	2206      	movs	r2, #6
 8008fae:	f7f7 f9af 	bl	8000310 <memchr>
 8008fb2:	2800      	cmp	r0, #0
 8008fb4:	d03f      	beq.n	8009036 <_vfiprintf_r+0x20a>
 8008fb6:	4b26      	ldr	r3, [pc, #152]	@ (8009050 <_vfiprintf_r+0x224>)
 8008fb8:	bb1b      	cbnz	r3, 8009002 <_vfiprintf_r+0x1d6>
 8008fba:	9b03      	ldr	r3, [sp, #12]
 8008fbc:	3307      	adds	r3, #7
 8008fbe:	f023 0307 	bic.w	r3, r3, #7
 8008fc2:	3308      	adds	r3, #8
 8008fc4:	9303      	str	r3, [sp, #12]
 8008fc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fc8:	443b      	add	r3, r7
 8008fca:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fcc:	e76a      	b.n	8008ea4 <_vfiprintf_r+0x78>
 8008fce:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fd2:	460c      	mov	r4, r1
 8008fd4:	2001      	movs	r0, #1
 8008fd6:	e7a8      	b.n	8008f2a <_vfiprintf_r+0xfe>
 8008fd8:	2300      	movs	r3, #0
 8008fda:	3401      	adds	r4, #1
 8008fdc:	9305      	str	r3, [sp, #20]
 8008fde:	4619      	mov	r1, r3
 8008fe0:	f04f 0c0a 	mov.w	ip, #10
 8008fe4:	4620      	mov	r0, r4
 8008fe6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fea:	3a30      	subs	r2, #48	@ 0x30
 8008fec:	2a09      	cmp	r2, #9
 8008fee:	d903      	bls.n	8008ff8 <_vfiprintf_r+0x1cc>
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d0c6      	beq.n	8008f82 <_vfiprintf_r+0x156>
 8008ff4:	9105      	str	r1, [sp, #20]
 8008ff6:	e7c4      	b.n	8008f82 <_vfiprintf_r+0x156>
 8008ff8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ffc:	4604      	mov	r4, r0
 8008ffe:	2301      	movs	r3, #1
 8009000:	e7f0      	b.n	8008fe4 <_vfiprintf_r+0x1b8>
 8009002:	ab03      	add	r3, sp, #12
 8009004:	9300      	str	r3, [sp, #0]
 8009006:	462a      	mov	r2, r5
 8009008:	4b12      	ldr	r3, [pc, #72]	@ (8009054 <_vfiprintf_r+0x228>)
 800900a:	a904      	add	r1, sp, #16
 800900c:	4630      	mov	r0, r6
 800900e:	f3af 8000 	nop.w
 8009012:	4607      	mov	r7, r0
 8009014:	1c78      	adds	r0, r7, #1
 8009016:	d1d6      	bne.n	8008fc6 <_vfiprintf_r+0x19a>
 8009018:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800901a:	07d9      	lsls	r1, r3, #31
 800901c:	d405      	bmi.n	800902a <_vfiprintf_r+0x1fe>
 800901e:	89ab      	ldrh	r3, [r5, #12]
 8009020:	059a      	lsls	r2, r3, #22
 8009022:	d402      	bmi.n	800902a <_vfiprintf_r+0x1fe>
 8009024:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009026:	f7ff fce3 	bl	80089f0 <__retarget_lock_release_recursive>
 800902a:	89ab      	ldrh	r3, [r5, #12]
 800902c:	065b      	lsls	r3, r3, #25
 800902e:	f53f af1f 	bmi.w	8008e70 <_vfiprintf_r+0x44>
 8009032:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009034:	e71e      	b.n	8008e74 <_vfiprintf_r+0x48>
 8009036:	ab03      	add	r3, sp, #12
 8009038:	9300      	str	r3, [sp, #0]
 800903a:	462a      	mov	r2, r5
 800903c:	4b05      	ldr	r3, [pc, #20]	@ (8009054 <_vfiprintf_r+0x228>)
 800903e:	a904      	add	r1, sp, #16
 8009040:	4630      	mov	r0, r6
 8009042:	f000 f879 	bl	8009138 <_printf_i>
 8009046:	e7e4      	b.n	8009012 <_vfiprintf_r+0x1e6>
 8009048:	0800a28b 	.word	0x0800a28b
 800904c:	0800a295 	.word	0x0800a295
 8009050:	00000000 	.word	0x00000000
 8009054:	08008e09 	.word	0x08008e09
 8009058:	0800a291 	.word	0x0800a291

0800905c <_printf_common>:
 800905c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009060:	4616      	mov	r6, r2
 8009062:	4698      	mov	r8, r3
 8009064:	688a      	ldr	r2, [r1, #8]
 8009066:	690b      	ldr	r3, [r1, #16]
 8009068:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800906c:	4293      	cmp	r3, r2
 800906e:	bfb8      	it	lt
 8009070:	4613      	movlt	r3, r2
 8009072:	6033      	str	r3, [r6, #0]
 8009074:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009078:	4607      	mov	r7, r0
 800907a:	460c      	mov	r4, r1
 800907c:	b10a      	cbz	r2, 8009082 <_printf_common+0x26>
 800907e:	3301      	adds	r3, #1
 8009080:	6033      	str	r3, [r6, #0]
 8009082:	6823      	ldr	r3, [r4, #0]
 8009084:	0699      	lsls	r1, r3, #26
 8009086:	bf42      	ittt	mi
 8009088:	6833      	ldrmi	r3, [r6, #0]
 800908a:	3302      	addmi	r3, #2
 800908c:	6033      	strmi	r3, [r6, #0]
 800908e:	6825      	ldr	r5, [r4, #0]
 8009090:	f015 0506 	ands.w	r5, r5, #6
 8009094:	d106      	bne.n	80090a4 <_printf_common+0x48>
 8009096:	f104 0a19 	add.w	sl, r4, #25
 800909a:	68e3      	ldr	r3, [r4, #12]
 800909c:	6832      	ldr	r2, [r6, #0]
 800909e:	1a9b      	subs	r3, r3, r2
 80090a0:	42ab      	cmp	r3, r5
 80090a2:	dc26      	bgt.n	80090f2 <_printf_common+0x96>
 80090a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80090a8:	6822      	ldr	r2, [r4, #0]
 80090aa:	3b00      	subs	r3, #0
 80090ac:	bf18      	it	ne
 80090ae:	2301      	movne	r3, #1
 80090b0:	0692      	lsls	r2, r2, #26
 80090b2:	d42b      	bmi.n	800910c <_printf_common+0xb0>
 80090b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80090b8:	4641      	mov	r1, r8
 80090ba:	4638      	mov	r0, r7
 80090bc:	47c8      	blx	r9
 80090be:	3001      	adds	r0, #1
 80090c0:	d01e      	beq.n	8009100 <_printf_common+0xa4>
 80090c2:	6823      	ldr	r3, [r4, #0]
 80090c4:	6922      	ldr	r2, [r4, #16]
 80090c6:	f003 0306 	and.w	r3, r3, #6
 80090ca:	2b04      	cmp	r3, #4
 80090cc:	bf02      	ittt	eq
 80090ce:	68e5      	ldreq	r5, [r4, #12]
 80090d0:	6833      	ldreq	r3, [r6, #0]
 80090d2:	1aed      	subeq	r5, r5, r3
 80090d4:	68a3      	ldr	r3, [r4, #8]
 80090d6:	bf0c      	ite	eq
 80090d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090dc:	2500      	movne	r5, #0
 80090de:	4293      	cmp	r3, r2
 80090e0:	bfc4      	itt	gt
 80090e2:	1a9b      	subgt	r3, r3, r2
 80090e4:	18ed      	addgt	r5, r5, r3
 80090e6:	2600      	movs	r6, #0
 80090e8:	341a      	adds	r4, #26
 80090ea:	42b5      	cmp	r5, r6
 80090ec:	d11a      	bne.n	8009124 <_printf_common+0xc8>
 80090ee:	2000      	movs	r0, #0
 80090f0:	e008      	b.n	8009104 <_printf_common+0xa8>
 80090f2:	2301      	movs	r3, #1
 80090f4:	4652      	mov	r2, sl
 80090f6:	4641      	mov	r1, r8
 80090f8:	4638      	mov	r0, r7
 80090fa:	47c8      	blx	r9
 80090fc:	3001      	adds	r0, #1
 80090fe:	d103      	bne.n	8009108 <_printf_common+0xac>
 8009100:	f04f 30ff 	mov.w	r0, #4294967295
 8009104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009108:	3501      	adds	r5, #1
 800910a:	e7c6      	b.n	800909a <_printf_common+0x3e>
 800910c:	18e1      	adds	r1, r4, r3
 800910e:	1c5a      	adds	r2, r3, #1
 8009110:	2030      	movs	r0, #48	@ 0x30
 8009112:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009116:	4422      	add	r2, r4
 8009118:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800911c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009120:	3302      	adds	r3, #2
 8009122:	e7c7      	b.n	80090b4 <_printf_common+0x58>
 8009124:	2301      	movs	r3, #1
 8009126:	4622      	mov	r2, r4
 8009128:	4641      	mov	r1, r8
 800912a:	4638      	mov	r0, r7
 800912c:	47c8      	blx	r9
 800912e:	3001      	adds	r0, #1
 8009130:	d0e6      	beq.n	8009100 <_printf_common+0xa4>
 8009132:	3601      	adds	r6, #1
 8009134:	e7d9      	b.n	80090ea <_printf_common+0x8e>
	...

08009138 <_printf_i>:
 8009138:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800913c:	7e0f      	ldrb	r7, [r1, #24]
 800913e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009140:	2f78      	cmp	r7, #120	@ 0x78
 8009142:	4691      	mov	r9, r2
 8009144:	4680      	mov	r8, r0
 8009146:	460c      	mov	r4, r1
 8009148:	469a      	mov	sl, r3
 800914a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800914e:	d807      	bhi.n	8009160 <_printf_i+0x28>
 8009150:	2f62      	cmp	r7, #98	@ 0x62
 8009152:	d80a      	bhi.n	800916a <_printf_i+0x32>
 8009154:	2f00      	cmp	r7, #0
 8009156:	f000 80d1 	beq.w	80092fc <_printf_i+0x1c4>
 800915a:	2f58      	cmp	r7, #88	@ 0x58
 800915c:	f000 80b8 	beq.w	80092d0 <_printf_i+0x198>
 8009160:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009164:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009168:	e03a      	b.n	80091e0 <_printf_i+0xa8>
 800916a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800916e:	2b15      	cmp	r3, #21
 8009170:	d8f6      	bhi.n	8009160 <_printf_i+0x28>
 8009172:	a101      	add	r1, pc, #4	@ (adr r1, 8009178 <_printf_i+0x40>)
 8009174:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009178:	080091d1 	.word	0x080091d1
 800917c:	080091e5 	.word	0x080091e5
 8009180:	08009161 	.word	0x08009161
 8009184:	08009161 	.word	0x08009161
 8009188:	08009161 	.word	0x08009161
 800918c:	08009161 	.word	0x08009161
 8009190:	080091e5 	.word	0x080091e5
 8009194:	08009161 	.word	0x08009161
 8009198:	08009161 	.word	0x08009161
 800919c:	08009161 	.word	0x08009161
 80091a0:	08009161 	.word	0x08009161
 80091a4:	080092e3 	.word	0x080092e3
 80091a8:	0800920f 	.word	0x0800920f
 80091ac:	0800929d 	.word	0x0800929d
 80091b0:	08009161 	.word	0x08009161
 80091b4:	08009161 	.word	0x08009161
 80091b8:	08009305 	.word	0x08009305
 80091bc:	08009161 	.word	0x08009161
 80091c0:	0800920f 	.word	0x0800920f
 80091c4:	08009161 	.word	0x08009161
 80091c8:	08009161 	.word	0x08009161
 80091cc:	080092a5 	.word	0x080092a5
 80091d0:	6833      	ldr	r3, [r6, #0]
 80091d2:	1d1a      	adds	r2, r3, #4
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	6032      	str	r2, [r6, #0]
 80091d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80091dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80091e0:	2301      	movs	r3, #1
 80091e2:	e09c      	b.n	800931e <_printf_i+0x1e6>
 80091e4:	6833      	ldr	r3, [r6, #0]
 80091e6:	6820      	ldr	r0, [r4, #0]
 80091e8:	1d19      	adds	r1, r3, #4
 80091ea:	6031      	str	r1, [r6, #0]
 80091ec:	0606      	lsls	r6, r0, #24
 80091ee:	d501      	bpl.n	80091f4 <_printf_i+0xbc>
 80091f0:	681d      	ldr	r5, [r3, #0]
 80091f2:	e003      	b.n	80091fc <_printf_i+0xc4>
 80091f4:	0645      	lsls	r5, r0, #25
 80091f6:	d5fb      	bpl.n	80091f0 <_printf_i+0xb8>
 80091f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80091fc:	2d00      	cmp	r5, #0
 80091fe:	da03      	bge.n	8009208 <_printf_i+0xd0>
 8009200:	232d      	movs	r3, #45	@ 0x2d
 8009202:	426d      	negs	r5, r5
 8009204:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009208:	4858      	ldr	r0, [pc, #352]	@ (800936c <_printf_i+0x234>)
 800920a:	230a      	movs	r3, #10
 800920c:	e011      	b.n	8009232 <_printf_i+0xfa>
 800920e:	6821      	ldr	r1, [r4, #0]
 8009210:	6833      	ldr	r3, [r6, #0]
 8009212:	0608      	lsls	r0, r1, #24
 8009214:	f853 5b04 	ldr.w	r5, [r3], #4
 8009218:	d402      	bmi.n	8009220 <_printf_i+0xe8>
 800921a:	0649      	lsls	r1, r1, #25
 800921c:	bf48      	it	mi
 800921e:	b2ad      	uxthmi	r5, r5
 8009220:	2f6f      	cmp	r7, #111	@ 0x6f
 8009222:	4852      	ldr	r0, [pc, #328]	@ (800936c <_printf_i+0x234>)
 8009224:	6033      	str	r3, [r6, #0]
 8009226:	bf14      	ite	ne
 8009228:	230a      	movne	r3, #10
 800922a:	2308      	moveq	r3, #8
 800922c:	2100      	movs	r1, #0
 800922e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009232:	6866      	ldr	r6, [r4, #4]
 8009234:	60a6      	str	r6, [r4, #8]
 8009236:	2e00      	cmp	r6, #0
 8009238:	db05      	blt.n	8009246 <_printf_i+0x10e>
 800923a:	6821      	ldr	r1, [r4, #0]
 800923c:	432e      	orrs	r6, r5
 800923e:	f021 0104 	bic.w	r1, r1, #4
 8009242:	6021      	str	r1, [r4, #0]
 8009244:	d04b      	beq.n	80092de <_printf_i+0x1a6>
 8009246:	4616      	mov	r6, r2
 8009248:	fbb5 f1f3 	udiv	r1, r5, r3
 800924c:	fb03 5711 	mls	r7, r3, r1, r5
 8009250:	5dc7      	ldrb	r7, [r0, r7]
 8009252:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009256:	462f      	mov	r7, r5
 8009258:	42bb      	cmp	r3, r7
 800925a:	460d      	mov	r5, r1
 800925c:	d9f4      	bls.n	8009248 <_printf_i+0x110>
 800925e:	2b08      	cmp	r3, #8
 8009260:	d10b      	bne.n	800927a <_printf_i+0x142>
 8009262:	6823      	ldr	r3, [r4, #0]
 8009264:	07df      	lsls	r7, r3, #31
 8009266:	d508      	bpl.n	800927a <_printf_i+0x142>
 8009268:	6923      	ldr	r3, [r4, #16]
 800926a:	6861      	ldr	r1, [r4, #4]
 800926c:	4299      	cmp	r1, r3
 800926e:	bfde      	ittt	le
 8009270:	2330      	movle	r3, #48	@ 0x30
 8009272:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009276:	f106 36ff 	addle.w	r6, r6, #4294967295
 800927a:	1b92      	subs	r2, r2, r6
 800927c:	6122      	str	r2, [r4, #16]
 800927e:	f8cd a000 	str.w	sl, [sp]
 8009282:	464b      	mov	r3, r9
 8009284:	aa03      	add	r2, sp, #12
 8009286:	4621      	mov	r1, r4
 8009288:	4640      	mov	r0, r8
 800928a:	f7ff fee7 	bl	800905c <_printf_common>
 800928e:	3001      	adds	r0, #1
 8009290:	d14a      	bne.n	8009328 <_printf_i+0x1f0>
 8009292:	f04f 30ff 	mov.w	r0, #4294967295
 8009296:	b004      	add	sp, #16
 8009298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800929c:	6823      	ldr	r3, [r4, #0]
 800929e:	f043 0320 	orr.w	r3, r3, #32
 80092a2:	6023      	str	r3, [r4, #0]
 80092a4:	4832      	ldr	r0, [pc, #200]	@ (8009370 <_printf_i+0x238>)
 80092a6:	2778      	movs	r7, #120	@ 0x78
 80092a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80092ac:	6823      	ldr	r3, [r4, #0]
 80092ae:	6831      	ldr	r1, [r6, #0]
 80092b0:	061f      	lsls	r7, r3, #24
 80092b2:	f851 5b04 	ldr.w	r5, [r1], #4
 80092b6:	d402      	bmi.n	80092be <_printf_i+0x186>
 80092b8:	065f      	lsls	r7, r3, #25
 80092ba:	bf48      	it	mi
 80092bc:	b2ad      	uxthmi	r5, r5
 80092be:	6031      	str	r1, [r6, #0]
 80092c0:	07d9      	lsls	r1, r3, #31
 80092c2:	bf44      	itt	mi
 80092c4:	f043 0320 	orrmi.w	r3, r3, #32
 80092c8:	6023      	strmi	r3, [r4, #0]
 80092ca:	b11d      	cbz	r5, 80092d4 <_printf_i+0x19c>
 80092cc:	2310      	movs	r3, #16
 80092ce:	e7ad      	b.n	800922c <_printf_i+0xf4>
 80092d0:	4826      	ldr	r0, [pc, #152]	@ (800936c <_printf_i+0x234>)
 80092d2:	e7e9      	b.n	80092a8 <_printf_i+0x170>
 80092d4:	6823      	ldr	r3, [r4, #0]
 80092d6:	f023 0320 	bic.w	r3, r3, #32
 80092da:	6023      	str	r3, [r4, #0]
 80092dc:	e7f6      	b.n	80092cc <_printf_i+0x194>
 80092de:	4616      	mov	r6, r2
 80092e0:	e7bd      	b.n	800925e <_printf_i+0x126>
 80092e2:	6833      	ldr	r3, [r6, #0]
 80092e4:	6825      	ldr	r5, [r4, #0]
 80092e6:	6961      	ldr	r1, [r4, #20]
 80092e8:	1d18      	adds	r0, r3, #4
 80092ea:	6030      	str	r0, [r6, #0]
 80092ec:	062e      	lsls	r6, r5, #24
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	d501      	bpl.n	80092f6 <_printf_i+0x1be>
 80092f2:	6019      	str	r1, [r3, #0]
 80092f4:	e002      	b.n	80092fc <_printf_i+0x1c4>
 80092f6:	0668      	lsls	r0, r5, #25
 80092f8:	d5fb      	bpl.n	80092f2 <_printf_i+0x1ba>
 80092fa:	8019      	strh	r1, [r3, #0]
 80092fc:	2300      	movs	r3, #0
 80092fe:	6123      	str	r3, [r4, #16]
 8009300:	4616      	mov	r6, r2
 8009302:	e7bc      	b.n	800927e <_printf_i+0x146>
 8009304:	6833      	ldr	r3, [r6, #0]
 8009306:	1d1a      	adds	r2, r3, #4
 8009308:	6032      	str	r2, [r6, #0]
 800930a:	681e      	ldr	r6, [r3, #0]
 800930c:	6862      	ldr	r2, [r4, #4]
 800930e:	2100      	movs	r1, #0
 8009310:	4630      	mov	r0, r6
 8009312:	f7f6 fffd 	bl	8000310 <memchr>
 8009316:	b108      	cbz	r0, 800931c <_printf_i+0x1e4>
 8009318:	1b80      	subs	r0, r0, r6
 800931a:	6060      	str	r0, [r4, #4]
 800931c:	6863      	ldr	r3, [r4, #4]
 800931e:	6123      	str	r3, [r4, #16]
 8009320:	2300      	movs	r3, #0
 8009322:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009326:	e7aa      	b.n	800927e <_printf_i+0x146>
 8009328:	6923      	ldr	r3, [r4, #16]
 800932a:	4632      	mov	r2, r6
 800932c:	4649      	mov	r1, r9
 800932e:	4640      	mov	r0, r8
 8009330:	47d0      	blx	sl
 8009332:	3001      	adds	r0, #1
 8009334:	d0ad      	beq.n	8009292 <_printf_i+0x15a>
 8009336:	6823      	ldr	r3, [r4, #0]
 8009338:	079b      	lsls	r3, r3, #30
 800933a:	d413      	bmi.n	8009364 <_printf_i+0x22c>
 800933c:	68e0      	ldr	r0, [r4, #12]
 800933e:	9b03      	ldr	r3, [sp, #12]
 8009340:	4298      	cmp	r0, r3
 8009342:	bfb8      	it	lt
 8009344:	4618      	movlt	r0, r3
 8009346:	e7a6      	b.n	8009296 <_printf_i+0x15e>
 8009348:	2301      	movs	r3, #1
 800934a:	4632      	mov	r2, r6
 800934c:	4649      	mov	r1, r9
 800934e:	4640      	mov	r0, r8
 8009350:	47d0      	blx	sl
 8009352:	3001      	adds	r0, #1
 8009354:	d09d      	beq.n	8009292 <_printf_i+0x15a>
 8009356:	3501      	adds	r5, #1
 8009358:	68e3      	ldr	r3, [r4, #12]
 800935a:	9903      	ldr	r1, [sp, #12]
 800935c:	1a5b      	subs	r3, r3, r1
 800935e:	42ab      	cmp	r3, r5
 8009360:	dcf2      	bgt.n	8009348 <_printf_i+0x210>
 8009362:	e7eb      	b.n	800933c <_printf_i+0x204>
 8009364:	2500      	movs	r5, #0
 8009366:	f104 0619 	add.w	r6, r4, #25
 800936a:	e7f5      	b.n	8009358 <_printf_i+0x220>
 800936c:	0800a29c 	.word	0x0800a29c
 8009370:	0800a2ad 	.word	0x0800a2ad

08009374 <__swbuf_r>:
 8009374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009376:	460e      	mov	r6, r1
 8009378:	4614      	mov	r4, r2
 800937a:	4605      	mov	r5, r0
 800937c:	b118      	cbz	r0, 8009386 <__swbuf_r+0x12>
 800937e:	6a03      	ldr	r3, [r0, #32]
 8009380:	b90b      	cbnz	r3, 8009386 <__swbuf_r+0x12>
 8009382:	f7ff fa41 	bl	8008808 <__sinit>
 8009386:	69a3      	ldr	r3, [r4, #24]
 8009388:	60a3      	str	r3, [r4, #8]
 800938a:	89a3      	ldrh	r3, [r4, #12]
 800938c:	071a      	lsls	r2, r3, #28
 800938e:	d501      	bpl.n	8009394 <__swbuf_r+0x20>
 8009390:	6923      	ldr	r3, [r4, #16]
 8009392:	b943      	cbnz	r3, 80093a6 <__swbuf_r+0x32>
 8009394:	4621      	mov	r1, r4
 8009396:	4628      	mov	r0, r5
 8009398:	f000 f82a 	bl	80093f0 <__swsetup_r>
 800939c:	b118      	cbz	r0, 80093a6 <__swbuf_r+0x32>
 800939e:	f04f 37ff 	mov.w	r7, #4294967295
 80093a2:	4638      	mov	r0, r7
 80093a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093a6:	6823      	ldr	r3, [r4, #0]
 80093a8:	6922      	ldr	r2, [r4, #16]
 80093aa:	1a98      	subs	r0, r3, r2
 80093ac:	6963      	ldr	r3, [r4, #20]
 80093ae:	b2f6      	uxtb	r6, r6
 80093b0:	4283      	cmp	r3, r0
 80093b2:	4637      	mov	r7, r6
 80093b4:	dc05      	bgt.n	80093c2 <__swbuf_r+0x4e>
 80093b6:	4621      	mov	r1, r4
 80093b8:	4628      	mov	r0, r5
 80093ba:	f7ff fcbd 	bl	8008d38 <_fflush_r>
 80093be:	2800      	cmp	r0, #0
 80093c0:	d1ed      	bne.n	800939e <__swbuf_r+0x2a>
 80093c2:	68a3      	ldr	r3, [r4, #8]
 80093c4:	3b01      	subs	r3, #1
 80093c6:	60a3      	str	r3, [r4, #8]
 80093c8:	6823      	ldr	r3, [r4, #0]
 80093ca:	1c5a      	adds	r2, r3, #1
 80093cc:	6022      	str	r2, [r4, #0]
 80093ce:	701e      	strb	r6, [r3, #0]
 80093d0:	6962      	ldr	r2, [r4, #20]
 80093d2:	1c43      	adds	r3, r0, #1
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d004      	beq.n	80093e2 <__swbuf_r+0x6e>
 80093d8:	89a3      	ldrh	r3, [r4, #12]
 80093da:	07db      	lsls	r3, r3, #31
 80093dc:	d5e1      	bpl.n	80093a2 <__swbuf_r+0x2e>
 80093de:	2e0a      	cmp	r6, #10
 80093e0:	d1df      	bne.n	80093a2 <__swbuf_r+0x2e>
 80093e2:	4621      	mov	r1, r4
 80093e4:	4628      	mov	r0, r5
 80093e6:	f7ff fca7 	bl	8008d38 <_fflush_r>
 80093ea:	2800      	cmp	r0, #0
 80093ec:	d0d9      	beq.n	80093a2 <__swbuf_r+0x2e>
 80093ee:	e7d6      	b.n	800939e <__swbuf_r+0x2a>

080093f0 <__swsetup_r>:
 80093f0:	b538      	push	{r3, r4, r5, lr}
 80093f2:	4b29      	ldr	r3, [pc, #164]	@ (8009498 <__swsetup_r+0xa8>)
 80093f4:	4605      	mov	r5, r0
 80093f6:	6818      	ldr	r0, [r3, #0]
 80093f8:	460c      	mov	r4, r1
 80093fa:	b118      	cbz	r0, 8009404 <__swsetup_r+0x14>
 80093fc:	6a03      	ldr	r3, [r0, #32]
 80093fe:	b90b      	cbnz	r3, 8009404 <__swsetup_r+0x14>
 8009400:	f7ff fa02 	bl	8008808 <__sinit>
 8009404:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009408:	0719      	lsls	r1, r3, #28
 800940a:	d422      	bmi.n	8009452 <__swsetup_r+0x62>
 800940c:	06da      	lsls	r2, r3, #27
 800940e:	d407      	bmi.n	8009420 <__swsetup_r+0x30>
 8009410:	2209      	movs	r2, #9
 8009412:	602a      	str	r2, [r5, #0]
 8009414:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009418:	81a3      	strh	r3, [r4, #12]
 800941a:	f04f 30ff 	mov.w	r0, #4294967295
 800941e:	e033      	b.n	8009488 <__swsetup_r+0x98>
 8009420:	0758      	lsls	r0, r3, #29
 8009422:	d512      	bpl.n	800944a <__swsetup_r+0x5a>
 8009424:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009426:	b141      	cbz	r1, 800943a <__swsetup_r+0x4a>
 8009428:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800942c:	4299      	cmp	r1, r3
 800942e:	d002      	beq.n	8009436 <__swsetup_r+0x46>
 8009430:	4628      	mov	r0, r5
 8009432:	f7ff fafd 	bl	8008a30 <_free_r>
 8009436:	2300      	movs	r3, #0
 8009438:	6363      	str	r3, [r4, #52]	@ 0x34
 800943a:	89a3      	ldrh	r3, [r4, #12]
 800943c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009440:	81a3      	strh	r3, [r4, #12]
 8009442:	2300      	movs	r3, #0
 8009444:	6063      	str	r3, [r4, #4]
 8009446:	6923      	ldr	r3, [r4, #16]
 8009448:	6023      	str	r3, [r4, #0]
 800944a:	89a3      	ldrh	r3, [r4, #12]
 800944c:	f043 0308 	orr.w	r3, r3, #8
 8009450:	81a3      	strh	r3, [r4, #12]
 8009452:	6923      	ldr	r3, [r4, #16]
 8009454:	b94b      	cbnz	r3, 800946a <__swsetup_r+0x7a>
 8009456:	89a3      	ldrh	r3, [r4, #12]
 8009458:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800945c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009460:	d003      	beq.n	800946a <__swsetup_r+0x7a>
 8009462:	4621      	mov	r1, r4
 8009464:	4628      	mov	r0, r5
 8009466:	f000 f883 	bl	8009570 <__smakebuf_r>
 800946a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800946e:	f013 0201 	ands.w	r2, r3, #1
 8009472:	d00a      	beq.n	800948a <__swsetup_r+0x9a>
 8009474:	2200      	movs	r2, #0
 8009476:	60a2      	str	r2, [r4, #8]
 8009478:	6962      	ldr	r2, [r4, #20]
 800947a:	4252      	negs	r2, r2
 800947c:	61a2      	str	r2, [r4, #24]
 800947e:	6922      	ldr	r2, [r4, #16]
 8009480:	b942      	cbnz	r2, 8009494 <__swsetup_r+0xa4>
 8009482:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009486:	d1c5      	bne.n	8009414 <__swsetup_r+0x24>
 8009488:	bd38      	pop	{r3, r4, r5, pc}
 800948a:	0799      	lsls	r1, r3, #30
 800948c:	bf58      	it	pl
 800948e:	6962      	ldrpl	r2, [r4, #20]
 8009490:	60a2      	str	r2, [r4, #8]
 8009492:	e7f4      	b.n	800947e <__swsetup_r+0x8e>
 8009494:	2000      	movs	r0, #0
 8009496:	e7f7      	b.n	8009488 <__swsetup_r+0x98>
 8009498:	2400001c 	.word	0x2400001c

0800949c <_raise_r>:
 800949c:	291f      	cmp	r1, #31
 800949e:	b538      	push	{r3, r4, r5, lr}
 80094a0:	4605      	mov	r5, r0
 80094a2:	460c      	mov	r4, r1
 80094a4:	d904      	bls.n	80094b0 <_raise_r+0x14>
 80094a6:	2316      	movs	r3, #22
 80094a8:	6003      	str	r3, [r0, #0]
 80094aa:	f04f 30ff 	mov.w	r0, #4294967295
 80094ae:	bd38      	pop	{r3, r4, r5, pc}
 80094b0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80094b2:	b112      	cbz	r2, 80094ba <_raise_r+0x1e>
 80094b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80094b8:	b94b      	cbnz	r3, 80094ce <_raise_r+0x32>
 80094ba:	4628      	mov	r0, r5
 80094bc:	f000 f830 	bl	8009520 <_getpid_r>
 80094c0:	4622      	mov	r2, r4
 80094c2:	4601      	mov	r1, r0
 80094c4:	4628      	mov	r0, r5
 80094c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094ca:	f000 b817 	b.w	80094fc <_kill_r>
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d00a      	beq.n	80094e8 <_raise_r+0x4c>
 80094d2:	1c59      	adds	r1, r3, #1
 80094d4:	d103      	bne.n	80094de <_raise_r+0x42>
 80094d6:	2316      	movs	r3, #22
 80094d8:	6003      	str	r3, [r0, #0]
 80094da:	2001      	movs	r0, #1
 80094dc:	e7e7      	b.n	80094ae <_raise_r+0x12>
 80094de:	2100      	movs	r1, #0
 80094e0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80094e4:	4620      	mov	r0, r4
 80094e6:	4798      	blx	r3
 80094e8:	2000      	movs	r0, #0
 80094ea:	e7e0      	b.n	80094ae <_raise_r+0x12>

080094ec <raise>:
 80094ec:	4b02      	ldr	r3, [pc, #8]	@ (80094f8 <raise+0xc>)
 80094ee:	4601      	mov	r1, r0
 80094f0:	6818      	ldr	r0, [r3, #0]
 80094f2:	f7ff bfd3 	b.w	800949c <_raise_r>
 80094f6:	bf00      	nop
 80094f8:	2400001c 	.word	0x2400001c

080094fc <_kill_r>:
 80094fc:	b538      	push	{r3, r4, r5, lr}
 80094fe:	4d07      	ldr	r5, [pc, #28]	@ (800951c <_kill_r+0x20>)
 8009500:	2300      	movs	r3, #0
 8009502:	4604      	mov	r4, r0
 8009504:	4608      	mov	r0, r1
 8009506:	4611      	mov	r1, r2
 8009508:	602b      	str	r3, [r5, #0]
 800950a:	f7f7 fbb5 	bl	8000c78 <_kill>
 800950e:	1c43      	adds	r3, r0, #1
 8009510:	d102      	bne.n	8009518 <_kill_r+0x1c>
 8009512:	682b      	ldr	r3, [r5, #0]
 8009514:	b103      	cbz	r3, 8009518 <_kill_r+0x1c>
 8009516:	6023      	str	r3, [r4, #0]
 8009518:	bd38      	pop	{r3, r4, r5, pc}
 800951a:	bf00      	nop
 800951c:	24001340 	.word	0x24001340

08009520 <_getpid_r>:
 8009520:	f7f7 bba2 	b.w	8000c68 <_getpid>

08009524 <__swhatbuf_r>:
 8009524:	b570      	push	{r4, r5, r6, lr}
 8009526:	460c      	mov	r4, r1
 8009528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800952c:	2900      	cmp	r1, #0
 800952e:	b096      	sub	sp, #88	@ 0x58
 8009530:	4615      	mov	r5, r2
 8009532:	461e      	mov	r6, r3
 8009534:	da0d      	bge.n	8009552 <__swhatbuf_r+0x2e>
 8009536:	89a3      	ldrh	r3, [r4, #12]
 8009538:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800953c:	f04f 0100 	mov.w	r1, #0
 8009540:	bf14      	ite	ne
 8009542:	2340      	movne	r3, #64	@ 0x40
 8009544:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009548:	2000      	movs	r0, #0
 800954a:	6031      	str	r1, [r6, #0]
 800954c:	602b      	str	r3, [r5, #0]
 800954e:	b016      	add	sp, #88	@ 0x58
 8009550:	bd70      	pop	{r4, r5, r6, pc}
 8009552:	466a      	mov	r2, sp
 8009554:	f000 f848 	bl	80095e8 <_fstat_r>
 8009558:	2800      	cmp	r0, #0
 800955a:	dbec      	blt.n	8009536 <__swhatbuf_r+0x12>
 800955c:	9901      	ldr	r1, [sp, #4]
 800955e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009562:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009566:	4259      	negs	r1, r3
 8009568:	4159      	adcs	r1, r3
 800956a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800956e:	e7eb      	b.n	8009548 <__swhatbuf_r+0x24>

08009570 <__smakebuf_r>:
 8009570:	898b      	ldrh	r3, [r1, #12]
 8009572:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009574:	079d      	lsls	r5, r3, #30
 8009576:	4606      	mov	r6, r0
 8009578:	460c      	mov	r4, r1
 800957a:	d507      	bpl.n	800958c <__smakebuf_r+0x1c>
 800957c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009580:	6023      	str	r3, [r4, #0]
 8009582:	6123      	str	r3, [r4, #16]
 8009584:	2301      	movs	r3, #1
 8009586:	6163      	str	r3, [r4, #20]
 8009588:	b003      	add	sp, #12
 800958a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800958c:	ab01      	add	r3, sp, #4
 800958e:	466a      	mov	r2, sp
 8009590:	f7ff ffc8 	bl	8009524 <__swhatbuf_r>
 8009594:	9f00      	ldr	r7, [sp, #0]
 8009596:	4605      	mov	r5, r0
 8009598:	4639      	mov	r1, r7
 800959a:	4630      	mov	r0, r6
 800959c:	f7ff fabc 	bl	8008b18 <_malloc_r>
 80095a0:	b948      	cbnz	r0, 80095b6 <__smakebuf_r+0x46>
 80095a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095a6:	059a      	lsls	r2, r3, #22
 80095a8:	d4ee      	bmi.n	8009588 <__smakebuf_r+0x18>
 80095aa:	f023 0303 	bic.w	r3, r3, #3
 80095ae:	f043 0302 	orr.w	r3, r3, #2
 80095b2:	81a3      	strh	r3, [r4, #12]
 80095b4:	e7e2      	b.n	800957c <__smakebuf_r+0xc>
 80095b6:	89a3      	ldrh	r3, [r4, #12]
 80095b8:	6020      	str	r0, [r4, #0]
 80095ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095be:	81a3      	strh	r3, [r4, #12]
 80095c0:	9b01      	ldr	r3, [sp, #4]
 80095c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80095c6:	b15b      	cbz	r3, 80095e0 <__smakebuf_r+0x70>
 80095c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095cc:	4630      	mov	r0, r6
 80095ce:	f000 f81d 	bl	800960c <_isatty_r>
 80095d2:	b128      	cbz	r0, 80095e0 <__smakebuf_r+0x70>
 80095d4:	89a3      	ldrh	r3, [r4, #12]
 80095d6:	f023 0303 	bic.w	r3, r3, #3
 80095da:	f043 0301 	orr.w	r3, r3, #1
 80095de:	81a3      	strh	r3, [r4, #12]
 80095e0:	89a3      	ldrh	r3, [r4, #12]
 80095e2:	431d      	orrs	r5, r3
 80095e4:	81a5      	strh	r5, [r4, #12]
 80095e6:	e7cf      	b.n	8009588 <__smakebuf_r+0x18>

080095e8 <_fstat_r>:
 80095e8:	b538      	push	{r3, r4, r5, lr}
 80095ea:	4d07      	ldr	r5, [pc, #28]	@ (8009608 <_fstat_r+0x20>)
 80095ec:	2300      	movs	r3, #0
 80095ee:	4604      	mov	r4, r0
 80095f0:	4608      	mov	r0, r1
 80095f2:	4611      	mov	r1, r2
 80095f4:	602b      	str	r3, [r5, #0]
 80095f6:	f7f7 fb9f 	bl	8000d38 <_fstat>
 80095fa:	1c43      	adds	r3, r0, #1
 80095fc:	d102      	bne.n	8009604 <_fstat_r+0x1c>
 80095fe:	682b      	ldr	r3, [r5, #0]
 8009600:	b103      	cbz	r3, 8009604 <_fstat_r+0x1c>
 8009602:	6023      	str	r3, [r4, #0]
 8009604:	bd38      	pop	{r3, r4, r5, pc}
 8009606:	bf00      	nop
 8009608:	24001340 	.word	0x24001340

0800960c <_isatty_r>:
 800960c:	b538      	push	{r3, r4, r5, lr}
 800960e:	4d06      	ldr	r5, [pc, #24]	@ (8009628 <_isatty_r+0x1c>)
 8009610:	2300      	movs	r3, #0
 8009612:	4604      	mov	r4, r0
 8009614:	4608      	mov	r0, r1
 8009616:	602b      	str	r3, [r5, #0]
 8009618:	f7f7 fb9e 	bl	8000d58 <_isatty>
 800961c:	1c43      	adds	r3, r0, #1
 800961e:	d102      	bne.n	8009626 <_isatty_r+0x1a>
 8009620:	682b      	ldr	r3, [r5, #0]
 8009622:	b103      	cbz	r3, 8009626 <_isatty_r+0x1a>
 8009624:	6023      	str	r3, [r4, #0]
 8009626:	bd38      	pop	{r3, r4, r5, pc}
 8009628:	24001340 	.word	0x24001340
 800962c:	00000000 	.word	0x00000000

08009630 <sin>:
 8009630:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009632:	eeb0 7b40 	vmov.f64	d7, d0
 8009636:	ee17 3a90 	vmov	r3, s15
 800963a:	4a21      	ldr	r2, [pc, #132]	@ (80096c0 <sin+0x90>)
 800963c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009640:	4293      	cmp	r3, r2
 8009642:	d807      	bhi.n	8009654 <sin+0x24>
 8009644:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 80096b8 <sin+0x88>
 8009648:	2000      	movs	r0, #0
 800964a:	b005      	add	sp, #20
 800964c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009650:	f000 b8a2 	b.w	8009798 <__kernel_sin>
 8009654:	4a1b      	ldr	r2, [pc, #108]	@ (80096c4 <sin+0x94>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d904      	bls.n	8009664 <sin+0x34>
 800965a:	ee30 0b40 	vsub.f64	d0, d0, d0
 800965e:	b005      	add	sp, #20
 8009660:	f85d fb04 	ldr.w	pc, [sp], #4
 8009664:	4668      	mov	r0, sp
 8009666:	f000 f8ef 	bl	8009848 <__ieee754_rem_pio2>
 800966a:	f000 0003 	and.w	r0, r0, #3
 800966e:	2801      	cmp	r0, #1
 8009670:	d00a      	beq.n	8009688 <sin+0x58>
 8009672:	2802      	cmp	r0, #2
 8009674:	d00f      	beq.n	8009696 <sin+0x66>
 8009676:	b9c0      	cbnz	r0, 80096aa <sin+0x7a>
 8009678:	ed9d 1b02 	vldr	d1, [sp, #8]
 800967c:	ed9d 0b00 	vldr	d0, [sp]
 8009680:	2001      	movs	r0, #1
 8009682:	f000 f889 	bl	8009798 <__kernel_sin>
 8009686:	e7ea      	b.n	800965e <sin+0x2e>
 8009688:	ed9d 1b02 	vldr	d1, [sp, #8]
 800968c:	ed9d 0b00 	vldr	d0, [sp]
 8009690:	f000 f81a 	bl	80096c8 <__kernel_cos>
 8009694:	e7e3      	b.n	800965e <sin+0x2e>
 8009696:	ed9d 1b02 	vldr	d1, [sp, #8]
 800969a:	ed9d 0b00 	vldr	d0, [sp]
 800969e:	2001      	movs	r0, #1
 80096a0:	f000 f87a 	bl	8009798 <__kernel_sin>
 80096a4:	eeb1 0b40 	vneg.f64	d0, d0
 80096a8:	e7d9      	b.n	800965e <sin+0x2e>
 80096aa:	ed9d 1b02 	vldr	d1, [sp, #8]
 80096ae:	ed9d 0b00 	vldr	d0, [sp]
 80096b2:	f000 f809 	bl	80096c8 <__kernel_cos>
 80096b6:	e7f5      	b.n	80096a4 <sin+0x74>
	...
 80096c0:	3fe921fb 	.word	0x3fe921fb
 80096c4:	7fefffff 	.word	0x7fefffff

080096c8 <__kernel_cos>:
 80096c8:	eeb0 5b40 	vmov.f64	d5, d0
 80096cc:	ee15 1a90 	vmov	r1, s11
 80096d0:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80096d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80096d8:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 80096dc:	d204      	bcs.n	80096e8 <__kernel_cos+0x20>
 80096de:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 80096e2:	ee17 3a90 	vmov	r3, s15
 80096e6:	b343      	cbz	r3, 800973a <__kernel_cos+0x72>
 80096e8:	ee25 6b05 	vmul.f64	d6, d5, d5
 80096ec:	ee21 1b45 	vnmul.f64	d1, d1, d5
 80096f0:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 8009760 <__kernel_cos+0x98>
 80096f4:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8009768 <__kernel_cos+0xa0>
 80096f8:	eea6 4b07 	vfma.f64	d4, d6, d7
 80096fc:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8009770 <__kernel_cos+0xa8>
 8009700:	eea4 7b06 	vfma.f64	d7, d4, d6
 8009704:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8009778 <__kernel_cos+0xb0>
 8009708:	eea7 4b06 	vfma.f64	d4, d7, d6
 800970c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8009780 <__kernel_cos+0xb8>
 8009710:	4b1f      	ldr	r3, [pc, #124]	@ (8009790 <__kernel_cos+0xc8>)
 8009712:	eea4 7b06 	vfma.f64	d7, d4, d6
 8009716:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 8009788 <__kernel_cos+0xc0>
 800971a:	4299      	cmp	r1, r3
 800971c:	eea7 4b06 	vfma.f64	d4, d7, d6
 8009720:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8009724:	ee24 4b06 	vmul.f64	d4, d4, d6
 8009728:	ee26 7b07 	vmul.f64	d7, d6, d7
 800972c:	eea6 1b04 	vfma.f64	d1, d6, d4
 8009730:	d804      	bhi.n	800973c <__kernel_cos+0x74>
 8009732:	ee37 7b41 	vsub.f64	d7, d7, d1
 8009736:	ee30 0b47 	vsub.f64	d0, d0, d7
 800973a:	4770      	bx	lr
 800973c:	4b15      	ldr	r3, [pc, #84]	@ (8009794 <__kernel_cos+0xcc>)
 800973e:	4299      	cmp	r1, r3
 8009740:	d809      	bhi.n	8009756 <__kernel_cos+0x8e>
 8009742:	2200      	movs	r2, #0
 8009744:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 8009748:	ec43 2b16 	vmov	d6, r2, r3
 800974c:	ee30 0b46 	vsub.f64	d0, d0, d6
 8009750:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009754:	e7ed      	b.n	8009732 <__kernel_cos+0x6a>
 8009756:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 800975a:	e7f7      	b.n	800974c <__kernel_cos+0x84>
 800975c:	f3af 8000 	nop.w
 8009760:	be8838d4 	.word	0xbe8838d4
 8009764:	bda8fae9 	.word	0xbda8fae9
 8009768:	bdb4b1c4 	.word	0xbdb4b1c4
 800976c:	3e21ee9e 	.word	0x3e21ee9e
 8009770:	809c52ad 	.word	0x809c52ad
 8009774:	be927e4f 	.word	0xbe927e4f
 8009778:	19cb1590 	.word	0x19cb1590
 800977c:	3efa01a0 	.word	0x3efa01a0
 8009780:	16c15177 	.word	0x16c15177
 8009784:	bf56c16c 	.word	0xbf56c16c
 8009788:	5555554c 	.word	0x5555554c
 800978c:	3fa55555 	.word	0x3fa55555
 8009790:	3fd33332 	.word	0x3fd33332
 8009794:	3fe90000 	.word	0x3fe90000

08009798 <__kernel_sin>:
 8009798:	ee10 3a90 	vmov	r3, s1
 800979c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80097a0:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80097a4:	d204      	bcs.n	80097b0 <__kernel_sin+0x18>
 80097a6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80097aa:	ee17 3a90 	vmov	r3, s15
 80097ae:	b35b      	cbz	r3, 8009808 <__kernel_sin+0x70>
 80097b0:	ee20 6b00 	vmul.f64	d6, d0, d0
 80097b4:	ee20 5b06 	vmul.f64	d5, d0, d6
 80097b8:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8009810 <__kernel_sin+0x78>
 80097bc:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8009818 <__kernel_sin+0x80>
 80097c0:	eea6 4b07 	vfma.f64	d4, d6, d7
 80097c4:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8009820 <__kernel_sin+0x88>
 80097c8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80097cc:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8009828 <__kernel_sin+0x90>
 80097d0:	eea7 4b06 	vfma.f64	d4, d7, d6
 80097d4:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8009830 <__kernel_sin+0x98>
 80097d8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80097dc:	b930      	cbnz	r0, 80097ec <__kernel_sin+0x54>
 80097de:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 8009838 <__kernel_sin+0xa0>
 80097e2:	eea6 4b07 	vfma.f64	d4, d6, d7
 80097e6:	eea4 0b05 	vfma.f64	d0, d4, d5
 80097ea:	4770      	bx	lr
 80097ec:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80097f0:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 80097f4:	eea1 7b04 	vfma.f64	d7, d1, d4
 80097f8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80097fc:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8009840 <__kernel_sin+0xa8>
 8009800:	eea5 1b07 	vfma.f64	d1, d5, d7
 8009804:	ee30 0b41 	vsub.f64	d0, d0, d1
 8009808:	4770      	bx	lr
 800980a:	bf00      	nop
 800980c:	f3af 8000 	nop.w
 8009810:	5acfd57c 	.word	0x5acfd57c
 8009814:	3de5d93a 	.word	0x3de5d93a
 8009818:	8a2b9ceb 	.word	0x8a2b9ceb
 800981c:	be5ae5e6 	.word	0xbe5ae5e6
 8009820:	57b1fe7d 	.word	0x57b1fe7d
 8009824:	3ec71de3 	.word	0x3ec71de3
 8009828:	19c161d5 	.word	0x19c161d5
 800982c:	bf2a01a0 	.word	0xbf2a01a0
 8009830:	1110f8a6 	.word	0x1110f8a6
 8009834:	3f811111 	.word	0x3f811111
 8009838:	55555549 	.word	0x55555549
 800983c:	bfc55555 	.word	0xbfc55555
 8009840:	55555549 	.word	0x55555549
 8009844:	3fc55555 	.word	0x3fc55555

08009848 <__ieee754_rem_pio2>:
 8009848:	b570      	push	{r4, r5, r6, lr}
 800984a:	eeb0 7b40 	vmov.f64	d7, d0
 800984e:	ee17 5a90 	vmov	r5, s15
 8009852:	4b99      	ldr	r3, [pc, #612]	@ (8009ab8 <__ieee754_rem_pio2+0x270>)
 8009854:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8009858:	429e      	cmp	r6, r3
 800985a:	b088      	sub	sp, #32
 800985c:	4604      	mov	r4, r0
 800985e:	d807      	bhi.n	8009870 <__ieee754_rem_pio2+0x28>
 8009860:	2200      	movs	r2, #0
 8009862:	2300      	movs	r3, #0
 8009864:	ed84 0b00 	vstr	d0, [r4]
 8009868:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800986c:	2000      	movs	r0, #0
 800986e:	e01b      	b.n	80098a8 <__ieee754_rem_pio2+0x60>
 8009870:	4b92      	ldr	r3, [pc, #584]	@ (8009abc <__ieee754_rem_pio2+0x274>)
 8009872:	429e      	cmp	r6, r3
 8009874:	d83b      	bhi.n	80098ee <__ieee754_rem_pio2+0xa6>
 8009876:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 800987a:	2d00      	cmp	r5, #0
 800987c:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 8009a78 <__ieee754_rem_pio2+0x230>
 8009880:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 8009884:	dd19      	ble.n	80098ba <__ieee754_rem_pio2+0x72>
 8009886:	ee30 7b46 	vsub.f64	d7, d0, d6
 800988a:	429e      	cmp	r6, r3
 800988c:	d00e      	beq.n	80098ac <__ieee754_rem_pio2+0x64>
 800988e:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 8009a80 <__ieee754_rem_pio2+0x238>
 8009892:	ee37 6b45 	vsub.f64	d6, d7, d5
 8009896:	ee37 7b46 	vsub.f64	d7, d7, d6
 800989a:	ed84 6b00 	vstr	d6, [r4]
 800989e:	ee37 7b45 	vsub.f64	d7, d7, d5
 80098a2:	ed84 7b02 	vstr	d7, [r4, #8]
 80098a6:	2001      	movs	r0, #1
 80098a8:	b008      	add	sp, #32
 80098aa:	bd70      	pop	{r4, r5, r6, pc}
 80098ac:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8009a88 <__ieee754_rem_pio2+0x240>
 80098b0:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 8009a90 <__ieee754_rem_pio2+0x248>
 80098b4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80098b8:	e7eb      	b.n	8009892 <__ieee754_rem_pio2+0x4a>
 80098ba:	429e      	cmp	r6, r3
 80098bc:	ee30 7b06 	vadd.f64	d7, d0, d6
 80098c0:	d00e      	beq.n	80098e0 <__ieee754_rem_pio2+0x98>
 80098c2:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 8009a80 <__ieee754_rem_pio2+0x238>
 80098c6:	ee37 6b05 	vadd.f64	d6, d7, d5
 80098ca:	ee37 7b46 	vsub.f64	d7, d7, d6
 80098ce:	ed84 6b00 	vstr	d6, [r4]
 80098d2:	ee37 7b05 	vadd.f64	d7, d7, d5
 80098d6:	f04f 30ff 	mov.w	r0, #4294967295
 80098da:	ed84 7b02 	vstr	d7, [r4, #8]
 80098de:	e7e3      	b.n	80098a8 <__ieee754_rem_pio2+0x60>
 80098e0:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8009a88 <__ieee754_rem_pio2+0x240>
 80098e4:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 8009a90 <__ieee754_rem_pio2+0x248>
 80098e8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80098ec:	e7eb      	b.n	80098c6 <__ieee754_rem_pio2+0x7e>
 80098ee:	4b74      	ldr	r3, [pc, #464]	@ (8009ac0 <__ieee754_rem_pio2+0x278>)
 80098f0:	429e      	cmp	r6, r3
 80098f2:	d870      	bhi.n	80099d6 <__ieee754_rem_pio2+0x18e>
 80098f4:	f000 f8ec 	bl	8009ad0 <fabs>
 80098f8:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 80098fc:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8009a98 <__ieee754_rem_pio2+0x250>
 8009900:	eea0 7b06 	vfma.f64	d7, d0, d6
 8009904:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8009908:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800990c:	ee17 0a90 	vmov	r0, s15
 8009910:	eeb1 4b45 	vneg.f64	d4, d5
 8009914:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8009a78 <__ieee754_rem_pio2+0x230>
 8009918:	eea5 0b47 	vfms.f64	d0, d5, d7
 800991c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 8009a80 <__ieee754_rem_pio2+0x238>
 8009920:	281f      	cmp	r0, #31
 8009922:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009926:	ee30 6b47 	vsub.f64	d6, d0, d7
 800992a:	dc05      	bgt.n	8009938 <__ieee754_rem_pio2+0xf0>
 800992c:	4b65      	ldr	r3, [pc, #404]	@ (8009ac4 <__ieee754_rem_pio2+0x27c>)
 800992e:	1e42      	subs	r2, r0, #1
 8009930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009934:	42b3      	cmp	r3, r6
 8009936:	d109      	bne.n	800994c <__ieee754_rem_pio2+0x104>
 8009938:	ee16 3a90 	vmov	r3, s13
 800993c:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8009940:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8009944:	2b10      	cmp	r3, #16
 8009946:	ea4f 5226 	mov.w	r2, r6, asr #20
 800994a:	dc02      	bgt.n	8009952 <__ieee754_rem_pio2+0x10a>
 800994c:	ed84 6b00 	vstr	d6, [r4]
 8009950:	e01a      	b.n	8009988 <__ieee754_rem_pio2+0x140>
 8009952:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 8009a88 <__ieee754_rem_pio2+0x240>
 8009956:	eeb0 6b40 	vmov.f64	d6, d0
 800995a:	eea4 6b03 	vfma.f64	d6, d4, d3
 800995e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8009962:	eea4 7b03 	vfma.f64	d7, d4, d3
 8009966:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 8009a90 <__ieee754_rem_pio2+0x248>
 800996a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800996e:	ee36 3b47 	vsub.f64	d3, d6, d7
 8009972:	ee13 3a90 	vmov	r3, s7
 8009976:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800997a:	1ad3      	subs	r3, r2, r3
 800997c:	2b31      	cmp	r3, #49	@ 0x31
 800997e:	dc17      	bgt.n	80099b0 <__ieee754_rem_pio2+0x168>
 8009980:	eeb0 0b46 	vmov.f64	d0, d6
 8009984:	ed84 3b00 	vstr	d3, [r4]
 8009988:	ed94 6b00 	vldr	d6, [r4]
 800998c:	2d00      	cmp	r5, #0
 800998e:	ee30 0b46 	vsub.f64	d0, d0, d6
 8009992:	ee30 0b47 	vsub.f64	d0, d0, d7
 8009996:	ed84 0b02 	vstr	d0, [r4, #8]
 800999a:	da85      	bge.n	80098a8 <__ieee754_rem_pio2+0x60>
 800999c:	eeb1 6b46 	vneg.f64	d6, d6
 80099a0:	eeb1 0b40 	vneg.f64	d0, d0
 80099a4:	ed84 6b00 	vstr	d6, [r4]
 80099a8:	ed84 0b02 	vstr	d0, [r4, #8]
 80099ac:	4240      	negs	r0, r0
 80099ae:	e77b      	b.n	80098a8 <__ieee754_rem_pio2+0x60>
 80099b0:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 8009aa0 <__ieee754_rem_pio2+0x258>
 80099b4:	eeb0 0b46 	vmov.f64	d0, d6
 80099b8:	eea4 0b07 	vfma.f64	d0, d4, d7
 80099bc:	ee36 6b40 	vsub.f64	d6, d6, d0
 80099c0:	eea4 6b07 	vfma.f64	d6, d4, d7
 80099c4:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 8009aa8 <__ieee754_rem_pio2+0x260>
 80099c8:	eeb0 7b46 	vmov.f64	d7, d6
 80099cc:	ee95 7b04 	vfnms.f64	d7, d5, d4
 80099d0:	ee30 6b47 	vsub.f64	d6, d0, d7
 80099d4:	e7ba      	b.n	800994c <__ieee754_rem_pio2+0x104>
 80099d6:	4b3c      	ldr	r3, [pc, #240]	@ (8009ac8 <__ieee754_rem_pio2+0x280>)
 80099d8:	429e      	cmp	r6, r3
 80099da:	d906      	bls.n	80099ea <__ieee754_rem_pio2+0x1a2>
 80099dc:	ee30 7b40 	vsub.f64	d7, d0, d0
 80099e0:	ed80 7b02 	vstr	d7, [r0, #8]
 80099e4:	ed80 7b00 	vstr	d7, [r0]
 80099e8:	e740      	b.n	800986c <__ieee754_rem_pio2+0x24>
 80099ea:	ee10 3a10 	vmov	r3, s0
 80099ee:	1532      	asrs	r2, r6, #20
 80099f0:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 80099f4:	4618      	mov	r0, r3
 80099f6:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80099fa:	ec41 0b17 	vmov	d7, r0, r1
 80099fe:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8009a02:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 8009ab0 <__ieee754_rem_pio2+0x268>
 8009a06:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8009a0a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009a0e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009a12:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009a16:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8009a1a:	a808      	add	r0, sp, #32
 8009a1c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8009a20:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009a24:	ed8d 6b04 	vstr	d6, [sp, #16]
 8009a28:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009a2c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009a30:	2103      	movs	r1, #3
 8009a32:	ed30 7b02 	vldmdb	r0!, {d7}
 8009a36:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a3e:	460b      	mov	r3, r1
 8009a40:	f101 31ff 	add.w	r1, r1, #4294967295
 8009a44:	d0f5      	beq.n	8009a32 <__ieee754_rem_pio2+0x1ea>
 8009a46:	4921      	ldr	r1, [pc, #132]	@ (8009acc <__ieee754_rem_pio2+0x284>)
 8009a48:	9101      	str	r1, [sp, #4]
 8009a4a:	2102      	movs	r1, #2
 8009a4c:	9100      	str	r1, [sp, #0]
 8009a4e:	a802      	add	r0, sp, #8
 8009a50:	4621      	mov	r1, r4
 8009a52:	f000 f845 	bl	8009ae0 <__kernel_rem_pio2>
 8009a56:	2d00      	cmp	r5, #0
 8009a58:	f6bf af26 	bge.w	80098a8 <__ieee754_rem_pio2+0x60>
 8009a5c:	ed94 7b00 	vldr	d7, [r4]
 8009a60:	eeb1 7b47 	vneg.f64	d7, d7
 8009a64:	ed84 7b00 	vstr	d7, [r4]
 8009a68:	ed94 7b02 	vldr	d7, [r4, #8]
 8009a6c:	eeb1 7b47 	vneg.f64	d7, d7
 8009a70:	ed84 7b02 	vstr	d7, [r4, #8]
 8009a74:	e79a      	b.n	80099ac <__ieee754_rem_pio2+0x164>
 8009a76:	bf00      	nop
 8009a78:	54400000 	.word	0x54400000
 8009a7c:	3ff921fb 	.word	0x3ff921fb
 8009a80:	1a626331 	.word	0x1a626331
 8009a84:	3dd0b461 	.word	0x3dd0b461
 8009a88:	1a600000 	.word	0x1a600000
 8009a8c:	3dd0b461 	.word	0x3dd0b461
 8009a90:	2e037073 	.word	0x2e037073
 8009a94:	3ba3198a 	.word	0x3ba3198a
 8009a98:	6dc9c883 	.word	0x6dc9c883
 8009a9c:	3fe45f30 	.word	0x3fe45f30
 8009aa0:	2e000000 	.word	0x2e000000
 8009aa4:	3ba3198a 	.word	0x3ba3198a
 8009aa8:	252049c1 	.word	0x252049c1
 8009aac:	397b839a 	.word	0x397b839a
 8009ab0:	00000000 	.word	0x00000000
 8009ab4:	41700000 	.word	0x41700000
 8009ab8:	3fe921fb 	.word	0x3fe921fb
 8009abc:	4002d97b 	.word	0x4002d97b
 8009ac0:	413921fb 	.word	0x413921fb
 8009ac4:	0800a2c0 	.word	0x0800a2c0
 8009ac8:	7fefffff 	.word	0x7fefffff
 8009acc:	0800a340 	.word	0x0800a340

08009ad0 <fabs>:
 8009ad0:	ec51 0b10 	vmov	r0, r1, d0
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009ada:	ec43 2b10 	vmov	d0, r2, r3
 8009ade:	4770      	bx	lr

08009ae0 <__kernel_rem_pio2>:
 8009ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae4:	ed2d 8b06 	vpush	{d8-d10}
 8009ae8:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 8009aec:	469b      	mov	fp, r3
 8009aee:	460f      	mov	r7, r1
 8009af0:	4bb9      	ldr	r3, [pc, #740]	@ (8009dd8 <__kernel_rem_pio2+0x2f8>)
 8009af2:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 8009af4:	9ea3      	ldr	r6, [sp, #652]	@ 0x28c
 8009af6:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8009afa:	9001      	str	r0, [sp, #4]
 8009afc:	f112 0f14 	cmn.w	r2, #20
 8009b00:	bfa8      	it	ge
 8009b02:	1ed3      	subge	r3, r2, #3
 8009b04:	f10b 3aff 	add.w	sl, fp, #4294967295
 8009b08:	bfb8      	it	lt
 8009b0a:	2300      	movlt	r3, #0
 8009b0c:	f06f 0517 	mvn.w	r5, #23
 8009b10:	ed9f 6bab 	vldr	d6, [pc, #684]	@ 8009dc0 <__kernel_rem_pio2+0x2e0>
 8009b14:	bfa4      	itt	ge
 8009b16:	2018      	movge	r0, #24
 8009b18:	fb93 f3f0 	sdivge	r3, r3, r0
 8009b1c:	fb03 5505 	mla	r5, r3, r5, r5
 8009b20:	eba3 040a 	sub.w	r4, r3, sl
 8009b24:	4415      	add	r5, r2
 8009b26:	eb09 0c0a 	add.w	ip, r9, sl
 8009b2a:	a81a      	add	r0, sp, #104	@ 0x68
 8009b2c:	eb06 0e84 	add.w	lr, r6, r4, lsl #2
 8009b30:	2200      	movs	r2, #0
 8009b32:	4562      	cmp	r2, ip
 8009b34:	dd0e      	ble.n	8009b54 <__kernel_rem_pio2+0x74>
 8009b36:	aa1a      	add	r2, sp, #104	@ 0x68
 8009b38:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8009b3c:	f50d 78d4 	add.w	r8, sp, #424	@ 0x1a8
 8009b40:	2400      	movs	r4, #0
 8009b42:	454c      	cmp	r4, r9
 8009b44:	dc23      	bgt.n	8009b8e <__kernel_rem_pio2+0xae>
 8009b46:	ed9f 7b9e 	vldr	d7, [pc, #632]	@ 8009dc0 <__kernel_rem_pio2+0x2e0>
 8009b4a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8009b4e:	4694      	mov	ip, r2
 8009b50:	2000      	movs	r0, #0
 8009b52:	e015      	b.n	8009b80 <__kernel_rem_pio2+0xa0>
 8009b54:	42d4      	cmn	r4, r2
 8009b56:	d409      	bmi.n	8009b6c <__kernel_rem_pio2+0x8c>
 8009b58:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 8009b5c:	ee07 1a90 	vmov	s15, r1
 8009b60:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009b64:	eca0 7b02 	vstmia	r0!, {d7}
 8009b68:	3201      	adds	r2, #1
 8009b6a:	e7e2      	b.n	8009b32 <__kernel_rem_pio2+0x52>
 8009b6c:	eeb0 7b46 	vmov.f64	d7, d6
 8009b70:	e7f8      	b.n	8009b64 <__kernel_rem_pio2+0x84>
 8009b72:	ecbe 5b02 	vldmia	lr!, {d5}
 8009b76:	ed3c 6b02 	vldmdb	ip!, {d6}
 8009b7a:	3001      	adds	r0, #1
 8009b7c:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009b80:	4550      	cmp	r0, sl
 8009b82:	ddf6      	ble.n	8009b72 <__kernel_rem_pio2+0x92>
 8009b84:	eca8 7b02 	vstmia	r8!, {d7}
 8009b88:	3401      	adds	r4, #1
 8009b8a:	3208      	adds	r2, #8
 8009b8c:	e7d9      	b.n	8009b42 <__kernel_rem_pio2+0x62>
 8009b8e:	aa06      	add	r2, sp, #24
 8009b90:	ed9f 9b8d 	vldr	d9, [pc, #564]	@ 8009dc8 <__kernel_rem_pio2+0x2e8>
 8009b94:	ed9f ab8e 	vldr	d10, [pc, #568]	@ 8009dd0 <__kernel_rem_pio2+0x2f0>
 8009b98:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8009b9c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009ba0:	9203      	str	r2, [sp, #12]
 8009ba2:	9302      	str	r3, [sp, #8]
 8009ba4:	464c      	mov	r4, r9
 8009ba6:	00e3      	lsls	r3, r4, #3
 8009ba8:	9304      	str	r3, [sp, #16]
 8009baa:	ab92      	add	r3, sp, #584	@ 0x248
 8009bac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009bb0:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 8009bb4:	aa6a      	add	r2, sp, #424	@ 0x1a8
 8009bb6:	ab06      	add	r3, sp, #24
 8009bb8:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8009bbc:	461e      	mov	r6, r3
 8009bbe:	4620      	mov	r0, r4
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	dc4a      	bgt.n	8009c5a <__kernel_rem_pio2+0x17a>
 8009bc4:	4628      	mov	r0, r5
 8009bc6:	9305      	str	r3, [sp, #20]
 8009bc8:	f000 f9fe 	bl	8009fc8 <scalbn>
 8009bcc:	eeb0 8b40 	vmov.f64	d8, d0
 8009bd0:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 8009bd4:	ee28 0b00 	vmul.f64	d0, d8, d0
 8009bd8:	f000 fa72 	bl	800a0c0 <floor>
 8009bdc:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 8009be0:	eea0 8b47 	vfms.f64	d8, d0, d7
 8009be4:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8009be8:	2d00      	cmp	r5, #0
 8009bea:	ee17 8a90 	vmov	r8, s15
 8009bee:	9b05      	ldr	r3, [sp, #20]
 8009bf0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009bf4:	ee38 8b47 	vsub.f64	d8, d8, d7
 8009bf8:	dd41      	ble.n	8009c7e <__kernel_rem_pio2+0x19e>
 8009bfa:	1e60      	subs	r0, r4, #1
 8009bfc:	aa06      	add	r2, sp, #24
 8009bfe:	f1c5 0c18 	rsb	ip, r5, #24
 8009c02:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8009c06:	fa46 f20c 	asr.w	r2, r6, ip
 8009c0a:	4490      	add	r8, r2
 8009c0c:	fa02 f20c 	lsl.w	r2, r2, ip
 8009c10:	1ab6      	subs	r6, r6, r2
 8009c12:	aa06      	add	r2, sp, #24
 8009c14:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 8009c18:	f1c5 0217 	rsb	r2, r5, #23
 8009c1c:	4116      	asrs	r6, r2
 8009c1e:	2e00      	cmp	r6, #0
 8009c20:	dd3c      	ble.n	8009c9c <__kernel_rem_pio2+0x1bc>
 8009c22:	f04f 0c00 	mov.w	ip, #0
 8009c26:	f108 0801 	add.w	r8, r8, #1
 8009c2a:	4660      	mov	r0, ip
 8009c2c:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 8009c30:	4564      	cmp	r4, ip
 8009c32:	dc66      	bgt.n	8009d02 <__kernel_rem_pio2+0x222>
 8009c34:	2d00      	cmp	r5, #0
 8009c36:	dd03      	ble.n	8009c40 <__kernel_rem_pio2+0x160>
 8009c38:	2d01      	cmp	r5, #1
 8009c3a:	d072      	beq.n	8009d22 <__kernel_rem_pio2+0x242>
 8009c3c:	2d02      	cmp	r5, #2
 8009c3e:	d07a      	beq.n	8009d36 <__kernel_rem_pio2+0x256>
 8009c40:	2e02      	cmp	r6, #2
 8009c42:	d12b      	bne.n	8009c9c <__kernel_rem_pio2+0x1bc>
 8009c44:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8009c48:	ee30 8b48 	vsub.f64	d8, d0, d8
 8009c4c:	b330      	cbz	r0, 8009c9c <__kernel_rem_pio2+0x1bc>
 8009c4e:	4628      	mov	r0, r5
 8009c50:	f000 f9ba 	bl	8009fc8 <scalbn>
 8009c54:	ee38 8b40 	vsub.f64	d8, d8, d0
 8009c58:	e020      	b.n	8009c9c <__kernel_rem_pio2+0x1bc>
 8009c5a:	ee20 7b09 	vmul.f64	d7, d0, d9
 8009c5e:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8009c62:	3801      	subs	r0, #1
 8009c64:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8009c68:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8009c6c:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8009c70:	eca6 0a01 	vstmia	r6!, {s0}
 8009c74:	ed32 0b02 	vldmdb	r2!, {d0}
 8009c78:	ee37 0b00 	vadd.f64	d0, d7, d0
 8009c7c:	e7a0      	b.n	8009bc0 <__kernel_rem_pio2+0xe0>
 8009c7e:	d105      	bne.n	8009c8c <__kernel_rem_pio2+0x1ac>
 8009c80:	1e62      	subs	r2, r4, #1
 8009c82:	a906      	add	r1, sp, #24
 8009c84:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 8009c88:	15f6      	asrs	r6, r6, #23
 8009c8a:	e7c8      	b.n	8009c1e <__kernel_rem_pio2+0x13e>
 8009c8c:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8009c90:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c98:	da31      	bge.n	8009cfe <__kernel_rem_pio2+0x21e>
 8009c9a:	2600      	movs	r6, #0
 8009c9c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ca4:	f040 809c 	bne.w	8009de0 <__kernel_rem_pio2+0x300>
 8009ca8:	1e62      	subs	r2, r4, #1
 8009caa:	2000      	movs	r0, #0
 8009cac:	454a      	cmp	r2, r9
 8009cae:	da49      	bge.n	8009d44 <__kernel_rem_pio2+0x264>
 8009cb0:	2800      	cmp	r0, #0
 8009cb2:	d062      	beq.n	8009d7a <__kernel_rem_pio2+0x29a>
 8009cb4:	3c01      	subs	r4, #1
 8009cb6:	ab06      	add	r3, sp, #24
 8009cb8:	3d18      	subs	r5, #24
 8009cba:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d0f8      	beq.n	8009cb4 <__kernel_rem_pio2+0x1d4>
 8009cc2:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8009cc6:	4628      	mov	r0, r5
 8009cc8:	f000 f97e 	bl	8009fc8 <scalbn>
 8009ccc:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8009dc8 <__kernel_rem_pio2+0x2e8>
 8009cd0:	1c62      	adds	r2, r4, #1
 8009cd2:	a96a      	add	r1, sp, #424	@ 0x1a8
 8009cd4:	00d3      	lsls	r3, r2, #3
 8009cd6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8009cda:	4622      	mov	r2, r4
 8009cdc:	2a00      	cmp	r2, #0
 8009cde:	f280 80a9 	bge.w	8009e34 <__kernel_rem_pio2+0x354>
 8009ce2:	4622      	mov	r2, r4
 8009ce4:	2a00      	cmp	r2, #0
 8009ce6:	f2c0 80c7 	blt.w	8009e78 <__kernel_rem_pio2+0x398>
 8009cea:	a96a      	add	r1, sp, #424	@ 0x1a8
 8009cec:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8009cf0:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 8009dc0 <__kernel_rem_pio2+0x2e0>
 8009cf4:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 8009ddc <__kernel_rem_pio2+0x2fc>
 8009cf8:	2000      	movs	r0, #0
 8009cfa:	1aa1      	subs	r1, r4, r2
 8009cfc:	e0b1      	b.n	8009e62 <__kernel_rem_pio2+0x382>
 8009cfe:	2602      	movs	r6, #2
 8009d00:	e78f      	b.n	8009c22 <__kernel_rem_pio2+0x142>
 8009d02:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d06:	b948      	cbnz	r0, 8009d1c <__kernel_rem_pio2+0x23c>
 8009d08:	b122      	cbz	r2, 8009d14 <__kernel_rem_pio2+0x234>
 8009d0a:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 8009d0e:	f843 2c04 	str.w	r2, [r3, #-4]
 8009d12:	2201      	movs	r2, #1
 8009d14:	f10c 0c01 	add.w	ip, ip, #1
 8009d18:	4610      	mov	r0, r2
 8009d1a:	e789      	b.n	8009c30 <__kernel_rem_pio2+0x150>
 8009d1c:	ebae 0202 	sub.w	r2, lr, r2
 8009d20:	e7f5      	b.n	8009d0e <__kernel_rem_pio2+0x22e>
 8009d22:	1e62      	subs	r2, r4, #1
 8009d24:	ab06      	add	r3, sp, #24
 8009d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d2a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009d2e:	a906      	add	r1, sp, #24
 8009d30:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009d34:	e784      	b.n	8009c40 <__kernel_rem_pio2+0x160>
 8009d36:	1e62      	subs	r2, r4, #1
 8009d38:	ab06      	add	r3, sp, #24
 8009d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d3e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009d42:	e7f4      	b.n	8009d2e <__kernel_rem_pio2+0x24e>
 8009d44:	ab06      	add	r3, sp, #24
 8009d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d4a:	3a01      	subs	r2, #1
 8009d4c:	4318      	orrs	r0, r3
 8009d4e:	e7ad      	b.n	8009cac <__kernel_rem_pio2+0x1cc>
 8009d50:	3301      	adds	r3, #1
 8009d52:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8009d56:	2800      	cmp	r0, #0
 8009d58:	d0fa      	beq.n	8009d50 <__kernel_rem_pio2+0x270>
 8009d5a:	9a04      	ldr	r2, [sp, #16]
 8009d5c:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 8009d60:	446a      	add	r2, sp
 8009d62:	eb04 000b 	add.w	r0, r4, fp
 8009d66:	a91a      	add	r1, sp, #104	@ 0x68
 8009d68:	1c66      	adds	r6, r4, #1
 8009d6a:	3a98      	subs	r2, #152	@ 0x98
 8009d6c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8009d70:	4423      	add	r3, r4
 8009d72:	42b3      	cmp	r3, r6
 8009d74:	da04      	bge.n	8009d80 <__kernel_rem_pio2+0x2a0>
 8009d76:	461c      	mov	r4, r3
 8009d78:	e715      	b.n	8009ba6 <__kernel_rem_pio2+0xc6>
 8009d7a:	9a03      	ldr	r2, [sp, #12]
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	e7e8      	b.n	8009d52 <__kernel_rem_pio2+0x272>
 8009d80:	9902      	ldr	r1, [sp, #8]
 8009d82:	f8dd c004 	ldr.w	ip, [sp, #4]
 8009d86:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 8009d8a:	9104      	str	r1, [sp, #16]
 8009d8c:	ee07 1a90 	vmov	s15, r1
 8009d90:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009d94:	2400      	movs	r4, #0
 8009d96:	eca0 7b02 	vstmia	r0!, {d7}
 8009d9a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8009dc0 <__kernel_rem_pio2+0x2e0>
 8009d9e:	4686      	mov	lr, r0
 8009da0:	4554      	cmp	r4, sl
 8009da2:	dd03      	ble.n	8009dac <__kernel_rem_pio2+0x2cc>
 8009da4:	eca2 7b02 	vstmia	r2!, {d7}
 8009da8:	3601      	adds	r6, #1
 8009daa:	e7e2      	b.n	8009d72 <__kernel_rem_pio2+0x292>
 8009dac:	ecbc 5b02 	vldmia	ip!, {d5}
 8009db0:	ed3e 6b02 	vldmdb	lr!, {d6}
 8009db4:	3401      	adds	r4, #1
 8009db6:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009dba:	e7f1      	b.n	8009da0 <__kernel_rem_pio2+0x2c0>
 8009dbc:	f3af 8000 	nop.w
	...
 8009dcc:	3e700000 	.word	0x3e700000
 8009dd0:	00000000 	.word	0x00000000
 8009dd4:	41700000 	.word	0x41700000
 8009dd8:	0800a488 	.word	0x0800a488
 8009ddc:	0800a448 	.word	0x0800a448
 8009de0:	4268      	negs	r0, r5
 8009de2:	eeb0 0b48 	vmov.f64	d0, d8
 8009de6:	f000 f8ef 	bl	8009fc8 <scalbn>
 8009dea:	ed9f 6b71 	vldr	d6, [pc, #452]	@ 8009fb0 <__kernel_rem_pio2+0x4d0>
 8009dee:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8009df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009df6:	db17      	blt.n	8009e28 <__kernel_rem_pio2+0x348>
 8009df8:	ed9f 7b6f 	vldr	d7, [pc, #444]	@ 8009fb8 <__kernel_rem_pio2+0x4d8>
 8009dfc:	ee20 7b07 	vmul.f64	d7, d0, d7
 8009e00:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8009e04:	aa06      	add	r2, sp, #24
 8009e06:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8009e0a:	eea5 0b46 	vfms.f64	d0, d5, d6
 8009e0e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8009e12:	3518      	adds	r5, #24
 8009e14:	ee10 3a10 	vmov	r3, s0
 8009e18:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8009e1c:	ee17 3a10 	vmov	r3, s14
 8009e20:	3401      	adds	r4, #1
 8009e22:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8009e26:	e74c      	b.n	8009cc2 <__kernel_rem_pio2+0x1e2>
 8009e28:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8009e2c:	aa06      	add	r2, sp, #24
 8009e2e:	ee10 3a10 	vmov	r3, s0
 8009e32:	e7f6      	b.n	8009e22 <__kernel_rem_pio2+0x342>
 8009e34:	a806      	add	r0, sp, #24
 8009e36:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8009e3a:	9001      	str	r0, [sp, #4]
 8009e3c:	ee07 0a90 	vmov	s15, r0
 8009e40:	3a01      	subs	r2, #1
 8009e42:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009e46:	ee27 7b00 	vmul.f64	d7, d7, d0
 8009e4a:	ee20 0b06 	vmul.f64	d0, d0, d6
 8009e4e:	ed21 7b02 	vstmdb	r1!, {d7}
 8009e52:	e743      	b.n	8009cdc <__kernel_rem_pio2+0x1fc>
 8009e54:	ecbc 5b02 	vldmia	ip!, {d5}
 8009e58:	ecb5 6b02 	vldmia	r5!, {d6}
 8009e5c:	3001      	adds	r0, #1
 8009e5e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009e62:	4548      	cmp	r0, r9
 8009e64:	dc01      	bgt.n	8009e6a <__kernel_rem_pio2+0x38a>
 8009e66:	4288      	cmp	r0, r1
 8009e68:	ddf4      	ble.n	8009e54 <__kernel_rem_pio2+0x374>
 8009e6a:	a842      	add	r0, sp, #264	@ 0x108
 8009e6c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8009e70:	ed81 7b00 	vstr	d7, [r1]
 8009e74:	3a01      	subs	r2, #1
 8009e76:	e735      	b.n	8009ce4 <__kernel_rem_pio2+0x204>
 8009e78:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8009e7a:	2a02      	cmp	r2, #2
 8009e7c:	dc0a      	bgt.n	8009e94 <__kernel_rem_pio2+0x3b4>
 8009e7e:	2a00      	cmp	r2, #0
 8009e80:	dc29      	bgt.n	8009ed6 <__kernel_rem_pio2+0x3f6>
 8009e82:	d042      	beq.n	8009f0a <__kernel_rem_pio2+0x42a>
 8009e84:	f008 0007 	and.w	r0, r8, #7
 8009e88:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 8009e8c:	ecbd 8b06 	vpop	{d8-d10}
 8009e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e94:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 8009e96:	2a03      	cmp	r2, #3
 8009e98:	d1f4      	bne.n	8009e84 <__kernel_rem_pio2+0x3a4>
 8009e9a:	a942      	add	r1, sp, #264	@ 0x108
 8009e9c:	f1a3 0208 	sub.w	r2, r3, #8
 8009ea0:	440a      	add	r2, r1
 8009ea2:	4611      	mov	r1, r2
 8009ea4:	4620      	mov	r0, r4
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	dc50      	bgt.n	8009f4c <__kernel_rem_pio2+0x46c>
 8009eaa:	4621      	mov	r1, r4
 8009eac:	2901      	cmp	r1, #1
 8009eae:	dc5d      	bgt.n	8009f6c <__kernel_rem_pio2+0x48c>
 8009eb0:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 8009fc0 <__kernel_rem_pio2+0x4e0>
 8009eb4:	aa42      	add	r2, sp, #264	@ 0x108
 8009eb6:	4413      	add	r3, r2
 8009eb8:	2c01      	cmp	r4, #1
 8009eba:	dc67      	bgt.n	8009f8c <__kernel_rem_pio2+0x4ac>
 8009ebc:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 8009ec0:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 8009ec4:	2e00      	cmp	r6, #0
 8009ec6:	d167      	bne.n	8009f98 <__kernel_rem_pio2+0x4b8>
 8009ec8:	ed87 5b00 	vstr	d5, [r7]
 8009ecc:	ed87 6b02 	vstr	d6, [r7, #8]
 8009ed0:	ed87 7b04 	vstr	d7, [r7, #16]
 8009ed4:	e7d6      	b.n	8009e84 <__kernel_rem_pio2+0x3a4>
 8009ed6:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 8009fc0 <__kernel_rem_pio2+0x4e0>
 8009eda:	aa42      	add	r2, sp, #264	@ 0x108
 8009edc:	4413      	add	r3, r2
 8009ede:	4622      	mov	r2, r4
 8009ee0:	2a00      	cmp	r2, #0
 8009ee2:	da24      	bge.n	8009f2e <__kernel_rem_pio2+0x44e>
 8009ee4:	b34e      	cbz	r6, 8009f3a <__kernel_rem_pio2+0x45a>
 8009ee6:	eeb1 7b46 	vneg.f64	d7, d6
 8009eea:	ed87 7b00 	vstr	d7, [r7]
 8009eee:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 8009ef2:	aa44      	add	r2, sp, #272	@ 0x110
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009efa:	429c      	cmp	r4, r3
 8009efc:	da20      	bge.n	8009f40 <__kernel_rem_pio2+0x460>
 8009efe:	b10e      	cbz	r6, 8009f04 <__kernel_rem_pio2+0x424>
 8009f00:	eeb1 7b47 	vneg.f64	d7, d7
 8009f04:	ed87 7b02 	vstr	d7, [r7, #8]
 8009f08:	e7bc      	b.n	8009e84 <__kernel_rem_pio2+0x3a4>
 8009f0a:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 8009fc0 <__kernel_rem_pio2+0x4e0>
 8009f0e:	aa42      	add	r2, sp, #264	@ 0x108
 8009f10:	4413      	add	r3, r2
 8009f12:	2c00      	cmp	r4, #0
 8009f14:	da05      	bge.n	8009f22 <__kernel_rem_pio2+0x442>
 8009f16:	b10e      	cbz	r6, 8009f1c <__kernel_rem_pio2+0x43c>
 8009f18:	eeb1 7b47 	vneg.f64	d7, d7
 8009f1c:	ed87 7b00 	vstr	d7, [r7]
 8009f20:	e7b0      	b.n	8009e84 <__kernel_rem_pio2+0x3a4>
 8009f22:	ed33 6b02 	vldmdb	r3!, {d6}
 8009f26:	3c01      	subs	r4, #1
 8009f28:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009f2c:	e7f1      	b.n	8009f12 <__kernel_rem_pio2+0x432>
 8009f2e:	ed33 7b02 	vldmdb	r3!, {d7}
 8009f32:	3a01      	subs	r2, #1
 8009f34:	ee36 6b07 	vadd.f64	d6, d6, d7
 8009f38:	e7d2      	b.n	8009ee0 <__kernel_rem_pio2+0x400>
 8009f3a:	eeb0 7b46 	vmov.f64	d7, d6
 8009f3e:	e7d4      	b.n	8009eea <__kernel_rem_pio2+0x40a>
 8009f40:	ecb2 6b02 	vldmia	r2!, {d6}
 8009f44:	3301      	adds	r3, #1
 8009f46:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009f4a:	e7d6      	b.n	8009efa <__kernel_rem_pio2+0x41a>
 8009f4c:	ed31 7b02 	vldmdb	r1!, {d7}
 8009f50:	ed91 5b02 	vldr	d5, [r1, #8]
 8009f54:	3801      	subs	r0, #1
 8009f56:	ee37 6b05 	vadd.f64	d6, d7, d5
 8009f5a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009f5e:	ed81 6b00 	vstr	d6, [r1]
 8009f62:	ee37 7b05 	vadd.f64	d7, d7, d5
 8009f66:	ed81 7b02 	vstr	d7, [r1, #8]
 8009f6a:	e79c      	b.n	8009ea6 <__kernel_rem_pio2+0x3c6>
 8009f6c:	ed32 7b02 	vldmdb	r2!, {d7}
 8009f70:	ed92 5b02 	vldr	d5, [r2, #8]
 8009f74:	3901      	subs	r1, #1
 8009f76:	ee37 6b05 	vadd.f64	d6, d7, d5
 8009f7a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009f7e:	ed82 6b00 	vstr	d6, [r2]
 8009f82:	ee37 7b05 	vadd.f64	d7, d7, d5
 8009f86:	ed82 7b02 	vstr	d7, [r2, #8]
 8009f8a:	e78f      	b.n	8009eac <__kernel_rem_pio2+0x3cc>
 8009f8c:	ed33 6b02 	vldmdb	r3!, {d6}
 8009f90:	3c01      	subs	r4, #1
 8009f92:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009f96:	e78f      	b.n	8009eb8 <__kernel_rem_pio2+0x3d8>
 8009f98:	eeb1 5b45 	vneg.f64	d5, d5
 8009f9c:	eeb1 6b46 	vneg.f64	d6, d6
 8009fa0:	ed87 5b00 	vstr	d5, [r7]
 8009fa4:	eeb1 7b47 	vneg.f64	d7, d7
 8009fa8:	ed87 6b02 	vstr	d6, [r7, #8]
 8009fac:	e790      	b.n	8009ed0 <__kernel_rem_pio2+0x3f0>
 8009fae:	bf00      	nop
 8009fb0:	00000000 	.word	0x00000000
 8009fb4:	41700000 	.word	0x41700000
 8009fb8:	00000000 	.word	0x00000000
 8009fbc:	3e700000 	.word	0x3e700000
	...

08009fc8 <scalbn>:
 8009fc8:	ee10 1a90 	vmov	r1, s1
 8009fcc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009fd0:	b98b      	cbnz	r3, 8009ff6 <scalbn+0x2e>
 8009fd2:	ee10 3a10 	vmov	r3, s0
 8009fd6:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8009fda:	4319      	orrs	r1, r3
 8009fdc:	d00a      	beq.n	8009ff4 <scalbn+0x2c>
 8009fde:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800a088 <scalbn+0xc0>
 8009fe2:	4b35      	ldr	r3, [pc, #212]	@ (800a0b8 <scalbn+0xf0>)
 8009fe4:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009fe8:	4298      	cmp	r0, r3
 8009fea:	da0b      	bge.n	800a004 <scalbn+0x3c>
 8009fec:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 800a090 <scalbn+0xc8>
 8009ff0:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009ff4:	4770      	bx	lr
 8009ff6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d107      	bne.n	800a00e <scalbn+0x46>
 8009ffe:	ee30 0b00 	vadd.f64	d0, d0, d0
 800a002:	4770      	bx	lr
 800a004:	ee10 1a90 	vmov	r1, s1
 800a008:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a00c:	3b36      	subs	r3, #54	@ 0x36
 800a00e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800a012:	4290      	cmp	r0, r2
 800a014:	dd0d      	ble.n	800a032 <scalbn+0x6a>
 800a016:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 800a098 <scalbn+0xd0>
 800a01a:	ee10 3a90 	vmov	r3, s1
 800a01e:	eeb0 6b47 	vmov.f64	d6, d7
 800a022:	ed9f 5b1f 	vldr	d5, [pc, #124]	@ 800a0a0 <scalbn+0xd8>
 800a026:	2b00      	cmp	r3, #0
 800a028:	fe27 7b05 	vselge.f64	d7, d7, d5
 800a02c:	ee27 0b06 	vmul.f64	d0, d7, d6
 800a030:	4770      	bx	lr
 800a032:	4418      	add	r0, r3
 800a034:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 800a038:	4298      	cmp	r0, r3
 800a03a:	dcec      	bgt.n	800a016 <scalbn+0x4e>
 800a03c:	2800      	cmp	r0, #0
 800a03e:	dd08      	ble.n	800a052 <scalbn+0x8a>
 800a040:	ec53 2b10 	vmov	r2, r3, d0
 800a044:	f36f 511e 	bfc	r1, #20, #11
 800a048:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800a04c:	ec43 2b10 	vmov	d0, r2, r3
 800a050:	4770      	bx	lr
 800a052:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 800a056:	da09      	bge.n	800a06c <scalbn+0xa4>
 800a058:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800a090 <scalbn+0xc8>
 800a05c:	ee10 3a90 	vmov	r3, s1
 800a060:	eeb0 6b47 	vmov.f64	d6, d7
 800a064:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 800a0a8 <scalbn+0xe0>
 800a068:	2b00      	cmp	r3, #0
 800a06a:	e7dd      	b.n	800a028 <scalbn+0x60>
 800a06c:	ec53 2b10 	vmov	r2, r3, d0
 800a070:	3036      	adds	r0, #54	@ 0x36
 800a072:	f36f 511e 	bfc	r1, #20, #11
 800a076:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800a07a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800a0b0 <scalbn+0xe8>
 800a07e:	ec43 2b10 	vmov	d0, r2, r3
 800a082:	e7b5      	b.n	8009ff0 <scalbn+0x28>
 800a084:	f3af 8000 	nop.w
 800a088:	00000000 	.word	0x00000000
 800a08c:	43500000 	.word	0x43500000
 800a090:	c2f8f359 	.word	0xc2f8f359
 800a094:	01a56e1f 	.word	0x01a56e1f
 800a098:	8800759c 	.word	0x8800759c
 800a09c:	7e37e43c 	.word	0x7e37e43c
 800a0a0:	8800759c 	.word	0x8800759c
 800a0a4:	fe37e43c 	.word	0xfe37e43c
 800a0a8:	c2f8f359 	.word	0xc2f8f359
 800a0ac:	81a56e1f 	.word	0x81a56e1f
 800a0b0:	00000000 	.word	0x00000000
 800a0b4:	3c900000 	.word	0x3c900000
 800a0b8:	ffff3cb0 	.word	0xffff3cb0
 800a0bc:	00000000 	.word	0x00000000

0800a0c0 <floor>:
 800a0c0:	ee10 3a90 	vmov	r3, s1
 800a0c4:	f3c3 500a 	ubfx	r0, r3, #20, #11
 800a0c8:	ee10 2a10 	vmov	r2, s0
 800a0cc:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 800a0d0:	2913      	cmp	r1, #19
 800a0d2:	b530      	push	{r4, r5, lr}
 800a0d4:	4615      	mov	r5, r2
 800a0d6:	dc33      	bgt.n	800a140 <floor+0x80>
 800a0d8:	2900      	cmp	r1, #0
 800a0da:	da18      	bge.n	800a10e <floor+0x4e>
 800a0dc:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 800a1a0 <floor+0xe0>
 800a0e0:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a0e4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a0e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0ec:	dd0a      	ble.n	800a104 <floor+0x44>
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	da50      	bge.n	800a194 <floor+0xd4>
 800a0f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	4b2a      	ldr	r3, [pc, #168]	@ (800a1a8 <floor+0xe8>)
 800a0fe:	bf08      	it	eq
 800a100:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800a104:	4619      	mov	r1, r3
 800a106:	4610      	mov	r0, r2
 800a108:	ec41 0b10 	vmov	d0, r0, r1
 800a10c:	e01f      	b.n	800a14e <floor+0x8e>
 800a10e:	4827      	ldr	r0, [pc, #156]	@ (800a1ac <floor+0xec>)
 800a110:	4108      	asrs	r0, r1
 800a112:	ea03 0400 	and.w	r4, r3, r0
 800a116:	4314      	orrs	r4, r2
 800a118:	d019      	beq.n	800a14e <floor+0x8e>
 800a11a:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a1a0 <floor+0xe0>
 800a11e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a122:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a12a:	ddeb      	ble.n	800a104 <floor+0x44>
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	bfbe      	ittt	lt
 800a130:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 800a134:	410a      	asrlt	r2, r1
 800a136:	189b      	addlt	r3, r3, r2
 800a138:	ea23 0300 	bic.w	r3, r3, r0
 800a13c:	2200      	movs	r2, #0
 800a13e:	e7e1      	b.n	800a104 <floor+0x44>
 800a140:	2933      	cmp	r1, #51	@ 0x33
 800a142:	dd05      	ble.n	800a150 <floor+0x90>
 800a144:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a148:	d101      	bne.n	800a14e <floor+0x8e>
 800a14a:	ee30 0b00 	vadd.f64	d0, d0, d0
 800a14e:	bd30      	pop	{r4, r5, pc}
 800a150:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 800a154:	f04f 30ff 	mov.w	r0, #4294967295
 800a158:	40e0      	lsrs	r0, r4
 800a15a:	4210      	tst	r0, r2
 800a15c:	d0f7      	beq.n	800a14e <floor+0x8e>
 800a15e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800a1a0 <floor+0xe0>
 800a162:	ee30 0b07 	vadd.f64	d0, d0, d7
 800a166:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a16a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a16e:	ddc9      	ble.n	800a104 <floor+0x44>
 800a170:	2b00      	cmp	r3, #0
 800a172:	da02      	bge.n	800a17a <floor+0xba>
 800a174:	2914      	cmp	r1, #20
 800a176:	d103      	bne.n	800a180 <floor+0xc0>
 800a178:	3301      	adds	r3, #1
 800a17a:	ea22 0200 	bic.w	r2, r2, r0
 800a17e:	e7c1      	b.n	800a104 <floor+0x44>
 800a180:	2401      	movs	r4, #1
 800a182:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 800a186:	fa04 f101 	lsl.w	r1, r4, r1
 800a18a:	440a      	add	r2, r1
 800a18c:	42aa      	cmp	r2, r5
 800a18e:	bf38      	it	cc
 800a190:	191b      	addcc	r3, r3, r4
 800a192:	e7f2      	b.n	800a17a <floor+0xba>
 800a194:	2200      	movs	r2, #0
 800a196:	4613      	mov	r3, r2
 800a198:	e7b4      	b.n	800a104 <floor+0x44>
 800a19a:	bf00      	nop
 800a19c:	f3af 8000 	nop.w
 800a1a0:	8800759c 	.word	0x8800759c
 800a1a4:	7e37e43c 	.word	0x7e37e43c
 800a1a8:	bff00000 	.word	0xbff00000
 800a1ac:	000fffff 	.word	0x000fffff

0800a1b0 <_init>:
 800a1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1b2:	bf00      	nop
 800a1b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1b6:	bc08      	pop	{r3}
 800a1b8:	469e      	mov	lr, r3
 800a1ba:	4770      	bx	lr

0800a1bc <_fini>:
 800a1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1be:	bf00      	nop
 800a1c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1c2:	bc08      	pop	{r3}
 800a1c4:	469e      	mov	lr, r3
 800a1c6:	4770      	bx	lr
